(dp0
S'resource_pool'
p1
(lp2
(dp3
S'spatial_map_timeseries_for_DR'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine.workflows
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(cnipype.pipeline.engine.nodes
Node
p18
g7
Ntp19
Rp20
(dp21
S'input_source'
p22
(dp23
sS'_interface'
p24
g5
(cnipype.interfaces.fsl.model
GLM
p25
g7
Ntp26
Rp27
(dp28
S'inputs'
p29
ctraits.traits
__newobj__
p30
(cnipype.interfaces.fsl.model
GLMInputSpec
p31
tp32
Rp33
(dp34
S'__traits_version__'
p35
S'4.6.0'
p36
sS'out_sigsq_name'
p37
ctraits.trait_base
_Undefined
p38
(tRp39
sS'dat_norm'
p40
g39
sS'mask'
p41
g39
sS'out_pf_name'
p42
g39
sS'out_t_name'
p43
g39
sS'out_cope'
p44
g39
sS'design'
p45
g39
sS'out_res_name'
p46
g39
sS'in_file'
p47
g39
sS'demean'
p48
g39
sS'out_vnscales_name'
p49
g39
sS'ignore_exception'
p50
I00
sS'out_varcb_name'
p51
g39
sS'args'
p52
g39
sS'out_z_name'
p53
g39
sS'terminal_output'
p54
S'stream'
p55
sS'var_norm'
p56
g39
sS'out_f_name'
p57
g39
sS'out_data_name'
p58
g39
sS'contrasts'
p59
g39
sS'out_file'
p60
S'spatial_map_timeseries.txt'
p61
sS'dof'
p62
g39
sS'environ'
p63
g5
(ctraits.trait_handlers
TraitDictObject
p64
c__builtin__
dict
p65
(dp66
S'FSLOUTPUTTYPE'
p67
S'NIFTI_GZ'
p68
stp69
Rp70
(dp71
S'name_items'
p72
S'environ_items'
p73
sS'name'
p74
g63
sbsS'output_type'
p75
g68
sS'des_norm'
p76
g39
sS'out_p_name'
p77
g39
sbsS'num_threads'
p78
I1
sS'_terminal_output'
p79
g55
sS'_output_type'
p80
g68
sS'_environ'
p81
NsS'estimated_memory_gb'
p82
I1
sbsS'_result'
p83
Nsg74
S'spatial_regression'
p84
sS'plugin_args'
p85
(dp86
sS'_hierarchy'
p87
S'spatial_map_timeseries_for_DR_0'
p88
sS'itersource'
p89
NsS'run_without_submitting'
p90
I00
sS'synchronize'
p91
I00
sS'parameterization'
p92
NsS'iterables'
p93
NsS'_got_inputs'
p94
I00
sS'_id'
p95
g84
sS'config'
p96
NsS'needed_outputs'
p97
(lp98
sS'overwrite'
p99
NsS'base_dir'
p100
Nsb(dp101
sg5
(g18
g7
Ntp102
Rp103
(dp104
g22
(dp105
sg24
g5
(cnipype.interfaces.utility
IdentityInterface
p106
g7
Ntp107
Rp108
(dp109
g29
g30
(cnipype.interfaces.base
DynamicTraitedSpec
p110
tp111
Rp112
(dp113
S'spatial_map'
p114
g39
sS'subject_rest'
p115
g39
sg48
I01
sg35
g36
sS'subject_mask'
p116
g39
sbsS'_fields'
p117
(lp118
g115
ag116
ag114
ag48
asg82
I1
sS'_mandatory_inputs'
p119
I01
sg78
I1
sbsg83
Nsg74
S'inputspec'
p120
sg85
(dp121
sg87
g88
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp122
sg99
Nsg100
Nsb(dp123
sg5
(g18
g7
Ntp124
Rp125
(dp126
g22
(dp127
sg24
g5
(g106
g7
Ntp128
Rp129
(dp130
g29
g30
(g110
tp131
Rp132
(dp133
g35
g36
sS'subject_timeseries'
p134
g39
sbsg117
(lp135
g134
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
S'outputspec'
p136
sg85
(dp137
sg87
g88
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp138
sg99
Nsg100
Nsb(dp139
ssS'node_dict_factory'
p140
g65
sS'edge_attr_dict_factory'
p141
g65
sS'succ'
p142
(dp143
g20
(dp144
g125
(dp145
S'connect'
p146
(lp147
(g60
g134
tp148
asssg103
(dp149
g20
(dp150
g146
(lp151
(g115
g47
tp152
a(g116
g41
tp153
a(g114
g45
tp154
a(g48
g48
tp155
asssg125
(dp156
ssS'edge'
p157
g143
sS'graph'
p158
(dp159
sS'adjlist_dict_factory'
p160
g65
sS'adj'
p161
g143
sS'pred'
p162
(dp163
g20
(dp164
g103
g150
ssg103
(dp165
sg125
(dp166
g20
g145
sssbsg74
g88
sg87
S'resting_preproc_sub-0001_ses-1'
p167
sg95
g88
sg96
ccollections
OrderedDict
p168
((lp169
(lp170
S'logging'
p171
ag168
((lp172
(lp173
S'workflow_level'
p174
aVINFO
p175
aa(lp176
S'filemanip_level'
p177
aVINFO
p178
aa(lp179
S'interface_level'
p180
aVINFO
p181
aa(lp182
S'log_to_file'
p183
aVTrue
p184
aa(lp185
S'log_directory'
p186
aV/outputs/log/sub-0001_ses-1
p187
aa(lp188
S'log_size'
p189
aV16384000
p190
aa(lp191
S'log_rotate'
p192
aV4
p193
aatp194
Rp195
aa(lp196
S'execution'
p197
ag168
((lp198
(lp199
S'create_report'
p200
aVtrue
p201
aa(lp202
S'crashdump_dir'
p203
aV/
p204
aa(lp205
S'display_variable'
p206
aV:1
p207
aa(lp208
S'hash_method'
p209
aVtimestamp
p210
aa(lp211
S'job_finished_timeout'
p212
aV5
p213
aa(lp214
S'keep_inputs'
p215
aVfalse
p216
aa(lp217
S'local_hash_check'
p218
aVtrue
p219
aa(lp220
S'matplotlib_backend'
p221
aVAgg
p222
aa(lp223
S'plugin'
p224
aVLinear
p225
aa(lp226
S'remove_node_directories'
p227
aVfalse
p228
aa(lp229
S'remove_unnecessary_outputs'
p230
aVtrue
p231
aa(lp232
S'try_hard_link_datasink'
p233
aVtrue
p234
aa(lp235
S'single_thread_matlab'
p236
aVtrue
p237
aa(lp238
S'stop_on_first_crash'
p239
aVfalse
p240
aa(lp241
S'stop_on_first_rerun'
p242
aVfalse
p243
aa(lp244
S'use_relative_paths'
p245
aVfalse
p246
aa(lp247
S'stop_on_unknown_version'
p248
aVfalse
p249
aa(lp250
S'write_provenance'
p251
aVfalse
p252
aa(lp253
S'parameterize_dirs'
p254
aVtrue
p255
aa(lp256
S'poll_sleep_duration'
p257
aV60
p258
aa(lp259
S'xvfb_max_wait'
p260
aV10
p261
aa(lp262
S'profile_runtime'
p263
aVfalse
p264
aatp265
Rp266
aa(lp267
S'check'
p268
ag168
((lp269
(lp270
S'interval'
p271
aV1209600
p272
aatp273
Rp274
aatp275
Rp276
sg100
NsbS'outputspec.subject_timeseries'
p277
tp278
sS'ants_initial_xfm'
p279
(g5
(g6
g7
Ntp280
Rp281
(dp282
g11
g5
(g12
g7
Ntp283
Rp284
(dp285
g16
(dp286
g5
(g18
g7
Ntp287
Rp288
(dp289
g22
(dp290
sg24
g5
(cnipype.interfaces.utility
Function
p291
g7
Ntp292
Rp293
(dp294
g29
g30
(cnipype.interfaces.utility
FunctionInputSpec
p295
tp296
Rp297
(dp298
S'warp_list'
p299
g39
sg50
I00
sS'selection'
p300
S'Affine'
p301
sS'function_str'
p302
S'def seperate_warps_list(warp_list, selection):\n\n    for warp in warp_list:\n\n        if selection in warp:\n\n            selected_warp = warp\n\n    return selected_warp\n'
p303
sg35
g36
sbsg78
I1
sS'imports'
p304
NsS'_input_names'
p305
(lp306
g299
ag300
asg82
I1
sS'_out'
p307
(dp308
S'selected_warp'
p309
NssS'_output_names'
p310
(lp311
g309
asbsg83
Nsg74
S'select_forward_affine'
p312
sg85
(dp313
sg87
S'anat_mni_ants_register_0'
p314
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g312
sg96
Nsg97
(lp315
sg99
Nsg100
Nsb(dp316
sg5
(g18
g7
Ntp317
Rp318
(dp319
g22
(dp320
sg24
g5
(g291
g7
Ntp321
Rp322
(dp323
g29
g30
(g295
tp324
Rp325
(dp326
g50
I00
sg35
g36
sS'anatomical_skull'
p327
g39
sg302
S'def hardcoded_reg(anatomical_brain, reference_brain, anatomical_skull, reference_skull): #, wait=""):\n\n    import os\n\n    os.system("antsRegistration --collapse-output-transforms 0 --dimensionality 3 --initial-moving-transform [ %s, %s, 0 ] --interpolation Linear --output [ transform, transform_Warped.nii.gz ] --transform Rigid[ 0.1 ] --metric MI[ %s, %s, 1, 32, Regular, 0.25 ] --convergence [ 1000x500x250x100, 1e-08, 10 ] --smoothing-sigmas 3.0x2.0x1.0x0.0 --shrink-factors 8x4x2x1 --use-histogram-matching 1 --transform Affine[ 0.1 ] --metric MI[ %s, %s, 1, 32, Regular, 0.25 ] --convergence [ 1000x500x250x100, 1e-08, 10 ] --smoothing-sigmas 3.0x2.0x1.0x0.0 --shrink-factors 8x4x2x1 --use-histogram-matching 1 --transform SyN[ 0.1, 3.0, 0.0 ] --metric CC[ %s, %s, 1, 4 ] --convergence [ 100x100x70x20, 1e-09, 15 ] --smoothing-sigmas 3.0x2.0x1.0x0.0 --shrink-factors 6x4x2x1 --use-histogram-matching 1 --winsorize-image-intensities [ 0.01, 0.99 ]" % (reference_brain, anatomical_brain, reference_brain, anatomical_brain, reference_brain, anatomical_brain, reference_skull, anatomical_skull))\n\n    warp_list = []\n\n    files = [f for f in os.listdir(\'.\') if os.path.isfile(f)]\n\n    for f in files:\n\n        if ("transform" in f) and ("Warped" not in f):\n            warp_list.append(os.getcwd() + "/" + f)\n\n        if "Warped" in f:\n            warped_image = os.getcwd() + "/" + f\n\n    #print wait\n\n    return warp_list, warped_image\n'
p328
sS'anatomical_brain'
p329
g39
sS'reference_skull'
p330
g39
sS'reference_brain'
p331
g39
sS'wait'
p332
g39
sbsg78
I1
sg304
Nsg305
(lp333
g329
ag331
ag327
ag330
ag332
asg82
I1
sg307
(dp334
g299
NsS'warped_image'
p335
Nssg310
(lp336
g299
ag335
asbsg83
Nsg74
S'calc_ants_warp'
p337
sg85
(dp338
sg87
g314
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g337
sg96
Nsg97
(lp339
sg99
Nsg100
Nsb(dp340
sg5
(g18
g7
Ntp341
Rp342
(dp343
g22
(dp344
sg24
g5
(g291
g7
Ntp345
Rp346
(dp347
g29
g30
(g295
tp348
Rp349
(dp350
g299
g39
sg50
I00
sg300
S'Rigid'
p351
sg302
S'def seperate_warps_list(warp_list, selection):\n\n    for warp in warp_list:\n\n        if selection in warp:\n\n            selected_warp = warp\n\n    return selected_warp\n'
p352
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp353
g299
ag300
asg82
I1
sg307
(dp354
g309
Nssg310
(lp355
g309
asbsg83
Nsg74
S'select_forward_rigid'
p356
sg85
(dp357
sg87
g314
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g356
sg96
Nsg97
(lp358
sg99
Nsg100
Nsb(dp359
sg5
(g18
g7
Ntp360
Rp361
(dp362
g22
(dp363
sg24
g5
(g106
g7
Ntp364
Rp365
(dp366
g29
g30
(g110
tp367
Rp368
(dp369
g35
g36
sS'normalized_output_brain'
p370
g39
sg279
g39
sS'ants_rigid_xfm'
p371
g39
sS'ants_affine_xfm'
p372
g39
sS'inverse_warp_field'
p373
g39
sS'composite_transform'
p374
g39
sS'warp_field'
p375
g39
sg332
g39
sbsg117
(lp376
g279
ag371
ag372
ag375
ag373
ag374
ag332
ag370
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp377
sg87
g314
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp378
sg99
Nsg100
Nsb(dp379
sg5
(g18
g7
Ntp380
Rp381
(dp382
g22
(dp383
sg24
g5
(g291
g7
Ntp384
Rp385
(dp386
g29
g30
(g295
tp387
Rp388
(dp389
g299
g39
sg50
I00
sg300
S'Inverse'
p390
sg302
S'def seperate_warps_list(warp_list, selection):\n\n    for warp in warp_list:\n\n        if selection in warp:\n\n            selected_warp = warp\n\n    return selected_warp\n'
p391
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp392
g299
ag300
asg82
I1
sg307
(dp393
g309
Nssg310
(lp394
g309
asbsg83
Nsg74
S'select_inverse_warp'
p395
sg85
(dp396
sg87
g314
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g395
sg96
Nsg97
(lp397
sg99
Nsg100
Nsb(dp398
sg5
(g18
g7
Ntp399
Rp400
(dp401
g22
(dp402
sg24
g5
(g291
g7
Ntp403
Rp404
(dp405
g29
g30
(g295
tp406
Rp407
(dp408
g299
g39
sg50
I00
sg300
S'Initial'
p409
sg302
S'def seperate_warps_list(warp_list, selection):\n\n    for warp in warp_list:\n\n        if selection in warp:\n\n            selected_warp = warp\n\n    return selected_warp\n'
p410
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp411
g299
ag300
asg82
I1
sg307
(dp412
g309
Nssg310
(lp413
g309
asbsg83
Nsg74
S'select_forward_initial'
p414
sg85
(dp415
sg87
g314
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g414
sg96
Nsg97
(lp416
sg99
Nsg100
Nsb(dp417
sg5
(g18
g7
Ntp418
Rp419
(dp420
g22
(dp421
sg24
g5
(g106
g7
Ntp422
Rp423
(dp424
g29
g30
(g110
tp425
Rp426
(dp427
g35
g36
sS'convergence_window_size'
p428
(lp429
I10
aI10
aI15
asS'winsorize_lower_quantile'
p430
F0.01
sS'metric'
p431
(lp432
S'MI'
p433
ag433
aS'CC'
p434
asg329
g39
sS'transforms'
p435
(lp436
g351
ag301
aS'SyN'
p437
asS'write_composite_transform'
p438
g39
sS'metric_weight'
p439
(lp440
I1
aI1
aI1
asg327
g39
sS'convergence_threshold'
p441
(lp442
F1e-08
aF1e-08
aF1e-09
asS'sampling_strategy'
p443
(lp444
S'Regular'
p445
ag445
aNasS'shrink_factors'
p446
(lp447
(lp448
I8
aI4
aI2
aI1
aa(lp449
I8
aI4
aI2
aI1
aa(lp450
I6
aI4
aI2
aI1
aasS'winsorize_upper_quantile'
p451
F0.99
sg331
S'/usr/share/fsl/5.0/data/standard/MNI152_T1_2mm_brain.nii.gz'
p452
sS'smoothing_sigmas'
p453
(lp454
(lp455
I3
aI2
aI1
aI0
aa(lp456
I3
aI2
aI1
aI0
aa(lp457
I3
aI2
aI1
aI0
aasS'number_of_iterations'
p458
(lp459
(lp460
I1000
aI500
aI250
aI100
aa(lp461
I1000
aI500
aI250
aI100
aa(lp462
I100
aI100
aI70
aI20
aasS'radius_or_number_of_bins'
p463
(lp464
I32
aI32
aI4
asg330
S'/usr/share/fsl/5.0/data/standard/MNI152_T1_2mm.nii.gz'
p465
sS'sampling_percentage'
p466
(lp467
F0.25
aF0.25
aNasS'use_histogram_matching'
p468
I01
sS'transform_parameters'
p469
(lp470
(lp471
F0.1
aa(lp472
F0.1
aa(lp473
F0.1
aI3
aI0
aasS'dimension'
p474
I3
sbsg117
(lp475
g329
ag331
ag474
ag468
ag430
ag451
ag431
ag439
ag463
ag443
ag466
ag458
ag441
ag428
ag435
ag469
ag446
ag453
ag438
ag327
ag330
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp476
sg87
g314
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp477
sg99
Nsg100
Nsb(dp478
sg5
(g18
g7
Ntp479
Rp480
(dp481
g22
(dp482
sg24
g5
(g291
g7
Ntp483
Rp484
(dp485
g29
g30
(g295
tp486
Rp487
(dp488
g299
g39
sg50
I00
sg300
S'3Warp'
p489
sg302
S'def seperate_warps_list(warp_list, selection):\n\n    for warp in warp_list:\n\n        if selection in warp:\n\n            selected_warp = warp\n\n    return selected_warp\n'
p490
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp491
g299
ag300
asg82
I1
sg307
(dp492
g309
Nssg310
(lp493
g309
asbsg83
Nsg74
S'select_forward_warp'
p494
sg85
(dp495
sg87
g314
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g494
sg96
Nsg97
(lp496
sg99
Nsg100
Nsb(dp497
ssg140
g65
sg141
g65
sg142
(dp498
g288
(dp499
g361
(dp500
g146
(lp501
(g309
g372
tp502
asssg318
(dp503
g288
(dp504
g146
(lp505
(g299
g299
tp506
assg381
(dp507
g146
(lp508
(g299
g299
tp509
assg361
(dp510
g146
(lp511
(g335
g370
tp512
assg400
(dp513
g146
(lp514
(g299
g299
tp515
assg342
(dp516
g146
(lp517
(g299
g299
tp518
assg480
(dp519
g146
(lp520
(g299
g299
tp521
asssg342
(dp522
g361
(dp523
g146
(lp524
(g309
g371
tp525
asssg361
(dp526
sg381
(dp527
g361
(dp528
g146
(lp529
(g309
g373
tp530
asssg400
(dp531
g361
(dp532
g146
(lp533
(g309
g279
tp534
asssg419
(dp535
g318
(dp536
g146
(lp537
(g329
g329
tp538
a(g327
g327
tp539
a(g331
g331
tp540
a(g330
g330
tp541
a(g474
g474
tp542
a(g468
g468
tp543
a(g430
g430
tp544
a(g451
g451
tp545
a(g431
g431
tp546
a(g439
g439
tp547
a(g463
g463
tp548
a(g443
g443
tp549
a(g466
g466
tp550
a(g458
g458
tp551
a(g441
g441
tp552
a(g428
g428
tp553
a(g435
g435
tp554
a(g469
g469
tp555
a(g446
g446
tp556
a(g453
g453
tp557
a(g438
g438
tp558
asssg480
(dp559
g361
(dp560
g146
(lp561
(g309
g375
tp562
assssg157
g498
sg158
(dp563
sg160
g65
sg161
g498
sg162
(dp564
g288
(dp565
g318
g504
ssg318
(dp566
g419
g536
ssg342
(dp567
g318
g516
ssg361
(dp568
g288
g500
sg381
g528
sg342
g523
sg400
g532
sg318
g510
sg480
g560
ssg381
(dp569
g318
g507
ssg400
(dp570
g318
g513
ssg419
(dp571
sg480
(dp572
g318
g519
sssbsg74
g314
sg87
g167
sg95
g314
sg96
g168
((lp573
(lp574
g171
ag168
((lp575
(lp576
g174
ag175
aa(lp577
g177
ag178
aa(lp578
g180
ag181
aa(lp579
g183
ag184
aa(lp580
g186
ag187
aa(lp581
g189
ag190
aa(lp582
g192
ag193
aatp583
Rp584
aa(lp585
g197
ag168
((lp586
(lp587
g200
ag201
aa(lp588
g203
ag204
aa(lp589
g206
ag207
aa(lp590
g209
ag210
aa(lp591
g212
ag213
aa(lp592
g215
ag216
aa(lp593
g218
ag219
aa(lp594
g221
ag222
aa(lp595
g224
ag225
aa(lp596
g227
ag228
aa(lp597
g230
ag231
aa(lp598
g233
ag234
aa(lp599
g236
ag237
aa(lp600
g239
ag240
aa(lp601
g242
ag243
aa(lp602
g245
ag246
aa(lp603
g248
ag249
aa(lp604
g251
ag252
aa(lp605
g254
ag255
aa(lp606
g257
ag258
aa(lp607
g260
ag261
aa(lp608
g263
ag264
aatp609
Rp610
aa(lp611
g268
ag168
((lp612
(lp613
g271
ag272
aatp614
Rp615
aatp616
Rp617
sg100
NsbS'outputspec.ants_initial_xfm'
p618
tp619
sS'output_means.@reho_to_standard_smooth_average'
p620
(g5
(g18
g7
Ntp621
Rp622
(dp623
g22
(dp624
sg24
g5
(g291
g7
Ntp625
Rp626
(dp627
g29
g30
(g295
tp628
Rp629
(dp630
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p631
sS'output_name'
p632
S'reho_to_standard_smooth'
p633
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp634
g47
ag632
asg82
I1
sg307
(dp635
S'output_mean'
p636
Nssg310
(lp637
g636
asbsg83
Nsg74
S'reho_to_standard_smooth_mean_to_txt_0'
p638
sg85
(dp639
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g638
sg96
Nsg97
(lp640
sg99
Nsg100
Nsbg636
tp641
sS'spatial_map_timeseries'
p642
(g5
(g6
g7
Ntp643
Rp644
(dp645
g11
g5
(g12
g7
Ntp646
Rp647
(dp648
g16
(dp649
g5
(g18
g7
Ntp650
Rp651
(dp652
g22
(dp653
sg24
g5
(g106
g7
Ntp654
Rp655
(dp656
g29
g30
(g110
tp657
Rp658
(dp659
g114
g39
sg115
g39
sg48
I01
sg35
g36
sg116
g39
sbsg117
(lp660
g115
ag116
ag114
ag48
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp661
sg87
S'spatial_map_timeseries_0'
p662
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp663
sg99
Nsg100
Nsb(dp664
sg5
(g18
g7
Ntp665
Rp666
(dp667
g22
(dp668
sg24
g5
(g106
g7
Ntp669
Rp670
(dp671
g29
g30
(g110
tp672
Rp673
(dp674
g35
g36
sg134
g39
sbsg117
(lp675
g134
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp676
sg87
g662
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp677
sg99
Nsg100
Nsb(dp678
sg5
(g18
g7
Ntp679
Rp680
(dp681
g22
(dp682
sg24
g5
(g25
g7
Ntp683
Rp684
(dp685
g29
g30
(g31
tp686
Rp687
(dp688
g35
g36
sg37
g39
sg40
g39
sg41
g39
sg42
g39
sg43
g39
sg44
g39
sg45
g39
sg46
g39
sg47
g39
sg48
g39
sg49
g39
sg50
I00
sg51
g39
sg52
g39
sg53
g39
sg54
g55
sg56
g39
sg57
g39
sg58
g39
sg59
g39
sg60
g61
sg62
g39
sg63
g5
(g64
g65
(dp689
g67
g68
stp690
Rp691
(dp692
g72
S'environ_items'
p693
sg74
g63
sbsg75
g68
sg76
g39
sg77
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
g84
sg85
(dp694
sg87
g662
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g84
sg96
Nsg97
(lp695
sg99
Nsg100
Nsb(dp696
ssg140
g65
sg141
g65
sg142
(dp697
g651
(dp698
g680
(dp699
g146
(lp700
(g115
g47
tp701
a(g116
g41
tp702
a(g114
g45
tp703
a(g48
g48
tp704
asssg666
(dp705
sg680
(dp706
g666
(dp707
g146
(lp708
(g60
g134
tp709
assssg157
g697
sg158
(dp710
sg160
g65
sg161
g697
sg162
(dp711
g651
(dp712
sg666
(dp713
g680
g707
ssg680
(dp714
g651
g699
sssbsg74
g662
sg87
g167
sg95
g662
sg96
g168
((lp715
(lp716
g171
ag168
((lp717
(lp718
g174
ag175
aa(lp719
g177
ag178
aa(lp720
g180
ag181
aa(lp721
g183
ag184
aa(lp722
g186
ag187
aa(lp723
g189
ag190
aa(lp724
g192
ag193
aatp725
Rp726
aa(lp727
g197
ag168
((lp728
(lp729
g200
ag201
aa(lp730
g203
ag204
aa(lp731
g206
ag207
aa(lp732
g209
ag210
aa(lp733
g212
ag213
aa(lp734
g215
ag216
aa(lp735
g218
ag219
aa(lp736
g221
ag222
aa(lp737
g224
ag225
aa(lp738
g227
ag228
aa(lp739
g230
ag231
aa(lp740
g233
ag234
aa(lp741
g236
ag237
aa(lp742
g239
ag240
aa(lp743
g242
ag243
aa(lp744
g245
ag246
aa(lp745
g248
ag249
aa(lp746
g251
ag252
aa(lp747
g254
ag255
aa(lp748
g257
ag258
aa(lp749
g260
ag261
aa(lp750
g263
ag264
aatp751
Rp752
aa(lp753
g268
ag168
((lp754
(lp755
g271
ag272
aatp756
Rp757
aatp758
Rp759
sg100
Nsbg277
tp760
sS'seg_partial_volume_map'
p761
(g5
(g6
g7
Ntp762
Rp763
(dp764
g11
g5
(g12
g7
Ntp765
Rp766
(dp767
g16
(dp768
g5
(g6
g7
Ntp769
Rp770
(dp771
g11
g5
(g12
g7
Ntp772
Rp773
(dp774
g16
(dp775
g5
(g18
g7
Ntp776
Rp777
(dp778
g22
(dp779
sg24
g5
(g106
g7
Ntp780
Rp781
(dp782
g29
g30
(g110
tp783
Rp784
(dp785
S'standard2highres_rig'
p786
g39
sg35
g36
sS'standard2highres_init'
p787
g39
sS'standard2highres_mat'
p788
g39
sS'brain'
p789
g39
sS'probability_map'
p790
g39
sS'tissue_prior'
p791
g39
sbsg117
(lp792
g791
ag789
ag790
ag787
ag788
ag786
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp793
sg87
S'GM'
p794
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp795
sg99
Nsg100
Nsb(dp796
sg5
(g18
g7
Ntp797
Rp798
(dp799
g22
(dp800
sg24
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p801
g7
Ntp802
Rp803
(dp804
g29
g30
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p805
tp806
Rp807
(dp808
g50
I00
sS'nan2zeros'
p809
g39
sS'op_string'
p810
S'-mas %s '
p811
sg60
g39
sg52
g39
sS'internal_datatype'
p812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp813
g67
g68
stp814
Rp815
(dp816
g72
S'environ_items'
p817
sg74
g63
sbsg47
g39
sg75
g68
sS'output_datatype'
p818
g39
sS'operand_files'
p819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'GM_mask'
p820
sg85
(dp821
sg87
g794
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g820
sg96
Nsg97
(lp822
sg99
Nsg100
Nsb(dp823
sg5
(g18
g7
Ntp824
Rp825
(dp826
g22
(dp827
sg24
g5
(cnipype.interfaces.utility
Merge
p828
g7
Ntp829
Rp830
(dp831
S'_numinputs'
p832
I3
sg29
g30
(cnipype.interfaces.utility
MergeInputSpec
p833
tp834
Rp835
(dp836
g50
I00
sg35
g36
sS'no_flatten'
p837
I00
sS'in1'
p838
g39
sS'in2'
p839
g39
sS'in3'
p840
g39
sS'axis'
p841
S'vstack'
p842
sbsg82
I1
sg78
I1
sbsg83
Nsg74
S'GM_collect_linear_transforms'
p843
sg85
(dp844
sg87
g794
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g843
sg96
Nsg97
(lp845
sg99
Nsg100
Nsb(dp846
sg5
(g18
g7
Ntp847
Rp848
(dp849
g22
(dp850
sg24
g5
(g106
g7
Ntp851
Rp852
(dp853
g29
g30
(g110
tp854
Rp855
(dp856
g35
g36
sS'segment_mask'
p857
g39
sS'tissueprior_mni2t1'
p858
g39
sbsg117
(lp859
g858
ag857
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp860
sg87
g794
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp861
sg99
Nsg100
Nsb(dp862
sg5
(g18
g7
Ntp863
Rp864
(dp865
g22
(dp866
sg24
g5
(cnipype.interfaces.ants.resampling
ApplyTransforms
p867
g7
Ntp868
Rp869
(dp870
g29
g30
(cnipype.interfaces.ants.resampling
ApplyTransformsInputSpec
p871
tp872
Rp873
(dp874
g50
I00
sg78
I1
sS'float'
p875
g39
sS'output_image'
p876
g39
sS'out_postfix'
p877
S'_trans'
p878
sS'interpolation_parameters'
p879
g39
sg52
g39
sS'print_out_composite_warp_file'
p880
g39
sg35
g36
sS'input_image_type'
p881
g39
sg54
g55
sg63
g5
(g64
g65
(dp882
S'NSLOTS'
p883
S'1'
p884
stp885
Rp886
(dp887
g72
S'environ_items'
p888
sg74
g63
sbsg435
g39
sS'reference_image'
p889
g39
sS'input_image'
p890
g39
sS'default_value'
p891
F0.0
sg474
g39
sS'invert_transform_flags'
p892
g5
(ctraits.trait_handlers
TraitListObject
p893
c__builtin__
list
p894
(lp895
I01
aI01
aI01
atp896
Rp897
(dp898
g72
S'invert_transform_flags_items'
p899
sg74
g892
sbsS'interpolation'
p900
S'NearestNeighbor'
p901
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sS'_num_threads'
p902
I1
sbsg83
Nsg74
S'GM_prior_mni_to_t1'
p903
sg85
(dp904
sg87
g794
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g903
sg96
Nsg97
(lp905
sg99
Nsg100
Nsb(dp906
ssg140
g65
sg141
g65
sg142
(dp907
g777
(dp908
g864
(dp909
g146
(lp910
(g791
g890
tp911
a(g789
g889
tp912
assg825
(dp913
g146
(lp914
(g787
S'in1'
p915
tp916
a(g786
S'in2'
p917
tp918
a(g788
S'in3'
p919
tp920
assg798
(dp921
g146
(lp922
(g790
g47
tp923
asssg798
(dp924
g848
(dp925
g146
(lp926
(g60
g857
tp927
asssg825
(dp928
g864
(dp929
g146
(lp930
(S'out'
p931
g435
tp932
asssg848
(dp933
sg864
(dp934
g798
(dp935
g146
(lp936
(g876
g819
tp937
assg848
(dp938
g146
(lp939
(g876
g858
tp940
assssg157
g907
sg158
(dp941
sg160
g65
sg161
g907
sg162
(dp942
g777
(dp943
sg798
(dp944
g777
g921
sg864
g935
ssg825
(dp945
g777
g913
ssg848
(dp946
g864
g938
sg798
g925
ssg864
(dp947
g777
g909
sg825
g929
sssbsg74
g794
sg87
S'seg_preproc_0'
p948
sg95
g794
sg96
g168
((lp949
(lp950
g171
ag168
((lp951
(lp952
g174
ag175
aa(lp953
g177
ag178
aa(lp954
g180
ag181
aa(lp955
g183
ag184
aa(lp956
g186
ag187
aa(lp957
g189
ag190
aa(lp958
g192
ag193
aatp959
Rp960
aa(lp961
g197
ag168
((lp962
(lp963
g200
ag201
aa(lp964
g203
ag204
aa(lp965
g206
ag207
aa(lp966
g209
ag210
aa(lp967
g212
ag213
aa(lp968
g215
ag216
aa(lp969
g218
ag219
aa(lp970
g221
ag222
aa(lp971
g224
ag225
aa(lp972
g227
ag228
aa(lp973
g230
ag231
aa(lp974
g233
ag234
aa(lp975
g236
ag237
aa(lp976
g239
ag240
aa(lp977
g242
ag243
aa(lp978
g245
ag246
aa(lp979
g248
ag249
aa(lp980
g251
ag252
aa(lp981
g254
ag255
aa(lp982
g257
ag258
aa(lp983
g260
ag261
aa(lp984
g263
ag264
aatp985
Rp986
aa(lp987
g268
ag168
((lp988
(lp989
g271
ag272
aatp990
Rp991
aatp992
Rp993
sg100
Nsb(dp994
sg5
(g18
g7
Ntp995
Rp996
(dp997
g22
(dp998
sg24
g5
(cnipype.interfaces.fsl.preprocess
FAST
p999
g7
Ntp1000
Rp1001
(dp1002
g29
g30
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p1003
tp1004
Rp1005
(dp1006
S'number_classes'
p1007
g39
sS'out_basename'
p1008
S'segment'
p1009
sS'hyper'
p1010
g39
sS'verbose'
p1011
g39
sS'init_seg_smooth'
p1012
g39
sS'init_transform'
p1013
g39
sS'no_pve'
p1014
g39
sS'output_biascorrected'
p1015
g39
sS'mixel_smooth'
p1016
g39
sS'segments'
p1017
I01
sS'iters_afterbias'
p1018
g39
sS'bias_lowpass'
p1019
g39
sS'other_priors'
p1020
g39
sg35
g36
sg50
I00
sS'img_type'
p1021
I1
sg52
g39
sS'probability_maps'
p1022
I01
sS'manual_seg'
p1023
g39
sg54
g55
sS'output_biasfield'
p1024
g39
sS'no_bias'
p1025
g39
sS'use_priors'
p1026
g39
sS'in_files'
p1027
g39
sS'segment_iters'
p1028
g39
sg63
g5
(g64
g65
(dp1029
g67
g68
stp1030
Rp1031
(dp1032
g72
S'environ_items'
p1033
sg74
g63
sbsg75
g68
sS'bias_iters'
p1034
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
F1.5
sbsg83
Nsg74
g1009
sg85
(dp1035
sg87
g948
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1009
sg96
Nsg97
(lp1036
sg99
Nsg100
Nsb(dp1037
sg5
(g6
g7
Ntp1038
Rp1039
(dp1040
g11
g5
(g12
g7
Ntp1041
Rp1042
(dp1043
g16
(dp1044
g5
(g18
g7
Ntp1045
Rp1046
(dp1047
g22
(dp1048
sg24
g5
(g801
g7
Ntp1049
Rp1050
(dp1051
g29
g30
(g805
tp1052
Rp1053
(dp1054
g50
I00
sg809
g39
sg810
g811
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp1055
g67
g68
stp1056
Rp1057
(dp1058
g72
S'environ_items'
p1059
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'WM_mask'
p1060
sg85
(dp1061
sg87
S'WM'
p1062
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1060
sg96
Nsg97
(lp1063
sg99
Nsg100
Nsb(dp1064
sg5
(g18
g7
Ntp1065
Rp1066
(dp1067
g22
(dp1068
sg24
g5
(g828
g7
Ntp1069
Rp1070
(dp1071
g832
I3
sg29
g30
(g833
tp1072
Rp1073
(dp1074
g50
I00
sg35
g36
sg837
I00
sS'in1'
p1075
g39
sS'in2'
p1076
g39
sS'in3'
p1077
g39
sg841
g842
sbsg82
I1
sg78
I1
sbsg83
Nsg74
S'WM_collect_linear_transforms'
p1078
sg85
(dp1079
sg87
g1062
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1078
sg96
Nsg97
(lp1080
sg99
Nsg100
Nsb(dp1081
sg5
(g18
g7
Ntp1082
Rp1083
(dp1084
g22
(dp1085
sg24
g5
(g106
g7
Ntp1086
Rp1087
(dp1088
g29
g30
(g110
tp1089
Rp1090
(dp1091
g35
g36
sg857
g39
sg858
g39
sbsg117
(lp1092
g858
ag857
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp1093
sg87
g1062
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp1094
sg99
Nsg100
Nsb(dp1095
sg5
(g18
g7
Ntp1096
Rp1097
(dp1098
g22
(dp1099
sg24
g5
(g106
g7
Ntp1100
Rp1101
(dp1102
g29
g30
(g110
tp1103
Rp1104
(dp1105
g786
g39
sg35
g36
sg787
g39
sg788
g39
sg789
g39
sg790
g39
sg791
g39
sbsg117
(lp1106
g791
ag789
ag790
ag787
ag788
ag786
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp1107
sg87
g1062
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp1108
sg99
Nsg100
Nsb(dp1109
sg5
(g18
g7
Ntp1110
Rp1111
(dp1112
g22
(dp1113
sg24
g5
(g867
g7
Ntp1114
Rp1115
(dp1116
g29
g30
(g871
tp1117
Rp1118
(dp1119
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g878
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp1120
g883
S'1'
p1121
stp1122
Rp1123
(dp1124
g72
S'environ_items'
p1125
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g5
(g893
g894
(lp1126
I01
aI01
aI01
atp1127
Rp1128
(dp1129
g72
S'invert_transform_flags_items'
p1130
sg74
g892
sbsg900
g901
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg902
I1
sbsg83
Nsg74
S'WM_prior_mni_to_t1'
p1131
sg85
(dp1132
sg87
g1062
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1131
sg96
Nsg97
(lp1133
sg99
Nsg100
Nsb(dp1134
ssg140
g65
sg141
g65
sg142
(dp1135
g1046
(dp1136
g1083
(dp1137
g146
(lp1138
(g60
g857
tp1139
asssg1066
(dp1140
g1111
(dp1141
g146
(lp1142
(g931
g435
tp1143
asssg1083
(dp1144
sg1097
(dp1145
g1066
(dp1146
g146
(lp1147
(g787
g915
tp1148
a(g786
g917
tp1149
a(g788
g919
tp1150
assg1111
(dp1151
g146
(lp1152
(g791
g890
tp1153
a(g789
g889
tp1154
assg1046
(dp1155
g146
(lp1156
(g790
g47
tp1157
asssg1111
(dp1158
g1046
(dp1159
g146
(lp1160
(g876
g819
tp1161
assg1083
(dp1162
g146
(lp1163
(g876
g858
tp1164
assssg157
g1135
sg158
(dp1165
sg160
g65
sg161
g1135
sg162
(dp1166
g1046
(dp1167
g1097
g1155
sg1111
g1159
ssg1066
(dp1168
g1097
g1146
ssg1083
(dp1169
g1046
g1137
sg1111
g1162
ssg1097
(dp1170
sg1111
(dp1171
g1066
g1141
sg1097
g1151
sssbsg74
g1062
sg87
g948
sg95
g1062
sg96
g168
((lp1172
(lp1173
g171
ag168
((lp1174
(lp1175
g174
ag175
aa(lp1176
g177
ag178
aa(lp1177
g180
ag181
aa(lp1178
g183
ag184
aa(lp1179
g186
ag187
aa(lp1180
g189
ag190
aa(lp1181
g192
ag193
aatp1182
Rp1183
aa(lp1184
g197
ag168
((lp1185
(lp1186
g200
ag201
aa(lp1187
g203
ag204
aa(lp1188
g206
ag207
aa(lp1189
g209
ag210
aa(lp1190
g212
ag213
aa(lp1191
g215
ag216
aa(lp1192
g218
ag219
aa(lp1193
g221
ag222
aa(lp1194
g224
ag225
aa(lp1195
g227
ag228
aa(lp1196
g230
ag231
aa(lp1197
g233
ag234
aa(lp1198
g236
ag237
aa(lp1199
g239
ag240
aa(lp1200
g242
ag243
aa(lp1201
g245
ag246
aa(lp1202
g248
ag249
aa(lp1203
g251
ag252
aa(lp1204
g254
ag255
aa(lp1205
g257
ag258
aa(lp1206
g260
ag261
aa(lp1207
g263
ag264
aatp1208
Rp1209
aa(lp1210
g268
ag168
((lp1211
(lp1212
g271
ag272
aatp1213
Rp1214
aatp1215
Rp1216
sg100
Nsb(dp1217
sg5
(g18
g7
Ntp1218
Rp1219
(dp1220
g22
(dp1221
sg24
g5
(g106
g7
Ntp1222
Rp1223
(dp1224
g29
g30
(g110
tp1225
Rp1226
(dp1227
g786
g39
sg35
g36
sg787
g39
sg789
g39
sS'PRIOR_GRAY'
p1228
S'/usr/share/fsl/5.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p1229
sg788
g39
sS'PRIOR_CSF'
p1230
S'/usr/share/fsl/5.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p1231
sS'PRIOR_WHITE'
p1232
S'/usr/share/fsl/5.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p1233
sbsg117
(lp1234
g789
ag787
ag788
ag786
ag1230
ag1228
ag1232
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp1235
sg87
g948
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp1236
sg99
Nsg100
Nsb(dp1237
sg5
(g6
g7
Ntp1238
Rp1239
(dp1240
g11
g5
(g12
g7
Ntp1241
Rp1242
(dp1243
g16
(dp1244
g5
(g18
g7
Ntp1245
Rp1246
(dp1247
g22
(dp1248
sg24
g5
(g801
g7
Ntp1249
Rp1250
(dp1251
g29
g30
(g805
tp1252
Rp1253
(dp1254
g50
I00
sg809
g39
sg810
g811
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp1255
g67
g68
stp1256
Rp1257
(dp1258
g72
S'environ_items'
p1259
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'CSF_mask'
p1260
sg85
(dp1261
sg87
S'CSF'
p1262
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1260
sg96
Nsg97
(lp1263
sg99
Nsg100
Nsb(dp1264
sg5
(g18
g7
Ntp1265
Rp1266
(dp1267
g22
(dp1268
sg24
g5
(g106
g7
Ntp1269
Rp1270
(dp1271
g29
g30
(g110
tp1272
Rp1273
(dp1274
g786
g39
sg35
g36
sg787
g39
sg788
g39
sg789
g39
sg790
g39
sg791
g39
sbsg117
(lp1275
g791
ag789
ag790
ag787
ag788
ag786
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp1276
sg87
g1262
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp1277
sg99
Nsg100
Nsb(dp1278
sg5
(g18
g7
Ntp1279
Rp1280
(dp1281
g22
(dp1282
sg24
g5
(g106
g7
Ntp1283
Rp1284
(dp1285
g29
g30
(g110
tp1286
Rp1287
(dp1288
g35
g36
sg857
g39
sg858
g39
sbsg117
(lp1289
g858
ag857
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp1290
sg87
g1262
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp1291
sg99
Nsg100
Nsb(dp1292
sg5
(g18
g7
Ntp1293
Rp1294
(dp1295
g22
(dp1296
sg24
g5
(g828
g7
Ntp1297
Rp1298
(dp1299
g832
I3
sg29
g30
(g833
tp1300
Rp1301
(dp1302
g50
I00
sg35
g36
sg837
I00
sS'in1'
p1303
g39
sS'in2'
p1304
g39
sS'in3'
p1305
g39
sg841
g842
sbsg82
I1
sg78
I1
sbsg83
Nsg74
S'CSF_collect_linear_transforms'
p1306
sg85
(dp1307
sg87
g1262
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1306
sg96
Nsg97
(lp1308
sg99
Nsg100
Nsb(dp1309
sg5
(g18
g7
Ntp1310
Rp1311
(dp1312
g22
(dp1313
sg24
g5
(g867
g7
Ntp1314
Rp1315
(dp1316
g29
g30
(g871
tp1317
Rp1318
(dp1319
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g878
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp1320
g883
S'1'
p1321
stp1322
Rp1323
(dp1324
g72
S'environ_items'
p1325
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g5
(g893
g894
(lp1326
I01
aI01
aI01
atp1327
Rp1328
(dp1329
g72
S'invert_transform_flags_items'
p1330
sg74
g892
sbsg900
g901
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg902
I1
sbsg83
Nsg74
S'CSF_prior_mni_to_t1'
p1331
sg85
(dp1332
sg87
g1262
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1331
sg96
Nsg97
(lp1333
sg99
Nsg100
Nsb(dp1334
ssg140
g65
sg141
g65
sg142
(dp1335
g1246
(dp1336
g1280
(dp1337
g146
(lp1338
(g60
g857
tp1339
asssg1266
(dp1340
g1311
(dp1341
g146
(lp1342
(g791
g890
tp1343
a(g789
g889
tp1344
assg1294
(dp1345
g146
(lp1346
(g787
g915
tp1347
a(g786
g917
tp1348
a(g788
g919
tp1349
assg1246
(dp1350
g146
(lp1351
(g790
g47
tp1352
asssg1280
(dp1353
sg1294
(dp1354
g1311
(dp1355
g146
(lp1356
(g931
g435
tp1357
asssg1311
(dp1358
g1246
(dp1359
g146
(lp1360
(g876
g819
tp1361
assg1280
(dp1362
g146
(lp1363
(g876
g858
tp1364
assssg157
g1335
sg158
(dp1365
sg160
g65
sg161
g1335
sg162
(dp1366
g1246
(dp1367
g1266
g1350
sg1311
g1359
ssg1266
(dp1368
sg1280
(dp1369
g1311
g1362
sg1246
g1337
ssg1294
(dp1370
g1266
g1345
ssg1311
(dp1371
g1266
g1341
sg1294
g1355
sssbsg74
g1262
sg87
g948
sg95
g1262
sg96
g168
((lp1372
(lp1373
g171
ag168
((lp1374
(lp1375
g174
ag175
aa(lp1376
g177
ag178
aa(lp1377
g180
ag181
aa(lp1378
g183
ag184
aa(lp1379
g186
ag187
aa(lp1380
g189
ag190
aa(lp1381
g192
ag193
aatp1382
Rp1383
aa(lp1384
g197
ag168
((lp1385
(lp1386
g200
ag201
aa(lp1387
g203
ag204
aa(lp1388
g206
ag207
aa(lp1389
g209
ag210
aa(lp1390
g212
ag213
aa(lp1391
g215
ag216
aa(lp1392
g218
ag219
aa(lp1393
g221
ag222
aa(lp1394
g224
ag225
aa(lp1395
g227
ag228
aa(lp1396
g230
ag231
aa(lp1397
g233
ag234
aa(lp1398
g236
ag237
aa(lp1399
g239
ag240
aa(lp1400
g242
ag243
aa(lp1401
g245
ag246
aa(lp1402
g248
ag249
aa(lp1403
g251
ag252
aa(lp1404
g254
ag255
aa(lp1405
g257
ag258
aa(lp1406
g260
ag261
aa(lp1407
g263
ag264
aatp1408
Rp1409
aa(lp1410
g268
ag168
((lp1411
(lp1412
g271
ag272
aatp1413
Rp1414
aatp1415
Rp1416
sg100
Nsb(dp1417
sg5
(g18
g7
Ntp1418
Rp1419
(dp1420
g22
(dp1421
sg24
g5
(g106
g7
Ntp1422
Rp1423
(dp1424
g29
g30
(g110
tp1425
Rp1426
(dp1427
S'partial_volume_files'
p1428
g39
sg35
g36
sS'mixeltype'
p1429
g39
sS'csf_mni2t1'
p1430
g39
sg1022
g39
sS'wm_mni2t1'
p1431
g39
sS'wm_mask'
p1432
g39
sS'gm_mask'
p1433
g39
sS'csf_mask'
p1434
g39
sS'partial_volume_map'
p1435
g39
sS'gm_mni2t1'
p1436
g39
sbsg117
(lp1437
g1430
ag1434
ag1436
ag1433
ag1431
ag1022
ag1429
ag1435
ag1428
ag1432
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp1438
sg87
g948
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp1439
sg99
Nsg100
Nsb(dp1440
ssg140
g65
sg141
g65
sg142
(dp1441
g770
(dp1442
g1419
(dp1443
g146
(lp1444
(S'outputspec.tissueprior_mni2t1'
p1445
g1436
tp1446
a(S'outputspec.segment_mask'
p1447
g1433
tp1448
asssg996
(dp1449
g770
(dp1450
g146
(lp1451
((S'tissue_class_files'
p1452
S'def pick_wm_1(probability_maps):\n\n    """\n    Returns the gray matter probability map from the list of segmented probability maps\n\n    Parameters\n    ----------\n\n    probability_maps : list (string)\n        List of Probability Maps\n\n    Returns\n    -------\n\n    file : string\n        Path to segment_prob_1.nii.gz is returned\n\n    """\n    import sys\n    import os\n\n    if(isinstance(probability_maps, list)):\n\n        if(len(probability_maps) == 1):\n            probability_maps = probability_maps[0]\n        for file in probability_maps:\n            print file\n            if file.endswith("seg_1.nii.gz"):\n\n                return file\n    return None\n'
p1453
(ttp1454
S'inputspec.probability_map'
p1455
tp1456
assg1239
(dp1457
g146
(lp1458
((g1452
S'def pick_wm_0(probability_maps):\n\n    """\n    Returns the csf probability map from the list of segmented probability maps\n\n    Parameters\n    ----------\n\n    probability_maps : list (string)\n        List of Probability Maps\n\n    Returns\n    -------\n\n    file : string\n        Path to segment_prob_0.nii.gz is returned\n\n    """\n\n    import sys\n    import os\n\n    if(isinstance(probability_maps, list)):\n\n        if(len(probability_maps) == 1):\n            probability_maps = probability_maps[0]\n        for file in probability_maps:\n            print file\n            if file.endswith("seg_0.nii.gz"):\n\n                return file\n    return None\n'
p1459
(ttp1460
g1455
tp1461
assg1419
(dp1462
g146
(lp1463
(g1022
g1022
tp1464
a(g1429
g1429
tp1465
a(g1428
g1428
tp1466
a(g1435
g1435
tp1467
assg1039
(dp1468
g146
(lp1469
((g1452
S'def pick_wm_2(probability_maps):\n\n    """\n    Returns the white matter probability map from the list of segmented probability maps\n\n    Parameters\n    ----------\n\n    probability_maps : list (string)\n        List of Probability Maps\n\n    Returns\n    -------\n\n    file : string\n        Path to segment_prob_2.nii.gz is returned\n\n    """\n    import sys\n    import os\n    if(isinstance(probability_maps, list)):\n\n        if(len(probability_maps) == 1):\n            probability_maps = probability_maps[0]\n        for file in probability_maps:\n            print file\n            if file.endswith("seg_2.nii.gz"):\n\n                return file\n    return None\n'
p1470
(ttp1471
g1455
tp1472
asssg1039
(dp1473
g1419
(dp1474
g146
(lp1475
(g1445
g1431
tp1476
a(g1447
g1432
tp1477
asssg1219
(dp1478
g770
(dp1479
g146
(lp1480
(g787
S'inputspec.standard2highres_init'
p1481
tp1482
a(g786
S'inputspec.standard2highres_rig'
p1483
tp1484
a(g789
S'inputspec.brain'
p1485
tp1486
a(g1228
S'inputspec.tissue_prior'
p1487
tp1488
a(g788
S'inputspec.standard2highres_mat'
p1489
tp1490
assg1239
(dp1491
g146
(lp1492
(g787
g1481
tp1493
a(g786
g1483
tp1494
a(g789
g1485
tp1495
a(g1230
g1487
tp1496
a(g788
g1489
tp1497
assg996
(dp1498
g146
(lp1499
(g789
g1027
tp1500
assg1039
(dp1501
g146
(lp1502
(g787
g1481
tp1503
a(g786
g1483
tp1504
a(g789
g1485
tp1505
a(g1232
g1487
tp1506
a(g788
g1489
tp1507
asssg1239
(dp1508
g1419
(dp1509
g146
(lp1510
(g1447
g1434
tp1511
asssg1419
(dp1512
ssg157
g1441
sg158
(dp1513
sg160
g65
sg161
g1441
sg162
(dp1514
g770
(dp1515
g1219
g1479
sg996
g1450
ssg996
(dp1516
g1219
g1498
ssg1039
(dp1517
g1219
g1501
sg996
g1468
ssg1219
(dp1518
sg1239
(dp1519
g1219
g1491
sg996
g1457
ssg1419
(dp1520
g770
g1443
sg1239
g1509
sg996
g1462
sg1039
g1474
sssbsg74
g948
sg87
g167
sg95
g948
sg96
g168
((lp1521
(lp1522
g171
ag168
((lp1523
(lp1524
g174
ag175
aa(lp1525
g177
ag178
aa(lp1526
g180
ag181
aa(lp1527
g183
ag184
aa(lp1528
g186
ag187
aa(lp1529
g189
ag190
aa(lp1530
g192
ag193
aatp1531
Rp1532
aa(lp1533
g197
ag168
((lp1534
(lp1535
g200
ag201
aa(lp1536
g203
ag204
aa(lp1537
g206
ag207
aa(lp1538
g209
ag210
aa(lp1539
g212
ag213
aa(lp1540
g215
ag216
aa(lp1541
g218
ag219
aa(lp1542
g221
ag222
aa(lp1543
g224
ag225
aa(lp1544
g227
ag228
aa(lp1545
g230
ag231
aa(lp1546
g233
ag234
aa(lp1547
g236
ag237
aa(lp1548
g239
ag240
aa(lp1549
g242
ag243
aa(lp1550
g245
ag246
aa(lp1551
g248
ag249
aa(lp1552
g251
ag252
aa(lp1553
g254
ag255
aa(lp1554
g257
ag258
aa(lp1555
g260
ag261
aa(lp1556
g263
ag264
aatp1557
Rp1558
aa(lp1559
g268
ag168
((lp1560
(lp1561
g271
ag272
aatp1562
Rp1563
aatp1564
Rp1565
sg100
NsbS'outputspec.partial_volume_map'
p1566
tp1567
sS'max_displacement'
p1568
(g5
(g6
g7
Ntp1569
Rp1570
(dp1571
g11
g5
(g12
g7
Ntp1572
Rp1573
(dp1574
g16
(dp1575
g5
(g18
g7
Ntp1576
Rp1577
(dp1578
g22
(dp1579
sg24
g5
(cnipype.interfaces.afni.preprocess
TStat
p1580
g7
Ntp1581
Rp1582
(dp1583
g29
g30
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p1584
tp1585
Rp1586
(dp1587
g50
I00
sg35
g36
sg60
g39
sg52
g39
sg41
g39
sS'outputtype'
p1588
S'NIFTI_GZ'
p1589
sg54
g55
sg63
g5
(g64
g65
(dp1590
tp1591
Rp1592
(dp1593
g72
S'environ_items'
p1594
sg74
g63
sbsg47
g39
sS'options'
p1595
S'-mean'
p1596
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sS'_outputtype'
p1597
g1589
sbsg83
Nsg74
S'func_mean_skullstrip'
p1598
sg85
(dp1599
sg87
S'func_preproc_automask_0'
p1600
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1598
sg96
Nsg97
(lp1601
sg99
Nsg100
Nsb(dp1602
sg5
(g18
g7
Ntp1603
Rp1604
(dp1605
g22
(dp1606
sg24
g5
(cnipype.interfaces.afni.preprocess
Volreg
p1607
g7
Ntp1608
Rp1609
(dp1610
g29
g30
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p1611
tp1612
Rp1613
(dp1614
S'oned_file'
p1615
g39
sg50
I00
sg1011
g39
sS'timeshift'
p1616
g39
sS'basefile'
p1617
g39
sg52
S'-Fourier -twopass'
p1618
sg1588
g1589
sS'zpad'
p1619
I4
sg54
g55
sS'md1d_file'
p1620
g39
sg47
g39
sS'copyorigin'
p1621
g39
sg63
g5
(g64
g65
(dp1622
tp1623
Rp1624
(dp1625
g72
S'environ_items'
p1626
sg74
g63
sbsS'oned_matrix_save'
p1627
g39
sg35
g36
sg60
g39
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'func_motion_correct'
p1628
sg85
(dp1629
sg87
g1600
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1628
sg96
Nsg97
(lp1630
sg99
Nsg100
Nsb(dp1631
sg5
(g18
g7
Ntp1632
Rp1633
(dp1634
g22
(dp1635
sg24
g5
(cnipype.interfaces.afni.preprocess
Resample
p1636
g7
Ntp1637
Rp1638
(dp1639
g29
g30
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p1640
tp1641
Rp1642
(dp1643
g50
I00
sg35
g36
sg60
g39
sg52
g39
sg1588
g1589
sS'resample_mode'
p1644
g39
sS'voxel_size'
p1645
g39
sg54
g55
sS'master'
p1646
g39
sg47
g39
sg63
g5
(g64
g65
(dp1647
tp1648
Rp1649
(dp1650
g72
S'environ_items'
p1651
sg74
g63
sbsS'orientation'
p1652
S'RPI'
p1653
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'func_reorient'
p1654
sg85
(dp1655
sg87
g1600
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1654
sg96
Nsg97
(lp1656
sg99
Nsg100
Nsb(dp1657
sg5
(g18
g7
Ntp1658
Rp1659
(dp1660
g22
(dp1661
sg24
g5
(g1580
g7
Ntp1662
Rp1663
(dp1664
g29
g30
(g1584
tp1665
Rp1666
(dp1667
g50
I00
sg35
g36
sg60
g39
sg52
g39
sg41
g39
sg1588
g1589
sg54
g55
sg63
g5
(g64
g65
(dp1668
tp1669
Rp1670
(dp1671
g72
S'environ_items'
p1672
sg74
g63
sbsg47
g39
sg1595
g1596
sbsg82
I1
sg79
g55
sg78
I1
sg1597
g1589
sg81
Nsbsg83
Nsg90
I00
sg85
(dp1673
sg92
Nsg89
Nsg99
Nsg74
S'func_get_mean_motion'
p1674
sg87
g1600
sg91
I00
sg93
Nsg94
I00
sg95
g1674
sg96
Nsg97
(lp1675
sg100
Nsb(dp1676
sg5
(g18
g7
Ntp1677
Rp1678
(dp1679
g22
(dp1680
sg24
g5
(cnipype.interfaces.afni.preprocess
Refit
p1681
g7
Ntp1682
Rp1683
(dp1684
g29
g30
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p1685
tp1686
Rp1687
(dp1688
g50
I00
sS'ydel'
p1689
g39
sS'deoblique'
p1690
I01
sS'space'
p1691
g39
sg52
g39
sS'yorigin'
p1692
g39
sS'xdel'
p1693
g39
sg54
g55
sg63
g5
(g64
g65
(dp1694
tp1695
Rp1696
(dp1697
g72
S'environ_items'
p1698
sg74
g63
sbsg47
g39
sS'zdel'
p1699
g39
sS'xorigin'
p1700
g39
sg35
g36
sS'zorigin'
p1701
g39
sbsg82
I1
sg79
g55
sg81
Nsg78
I1
sbsg83
Nsg74
S'func_deoblique'
p1702
sg85
(dp1703
sg87
g1600
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1702
sg96
Nsg97
(lp1704
sg99
Nsg100
Nsb(dp1705
sg5
(g18
g7
Ntp1706
Rp1707
(dp1708
g22
(dp1709
sg24
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p1710
g7
Ntp1711
Rp1712
(dp1713
g29
g30
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p1714
tp1715
Rp1716
(dp1717
g50
I00
sg35
g36
sg810
S'-ing 10000'
p1718
sS'out_data_type'
p1719
g875
sg60
g39
sg52
g39
sS'in_file2'
p1720
g39
sg54
g55
sg63
g5
(g64
g65
(dp1721
g67
g68
stp1722
Rp1723
(dp1724
g72
S'environ_items'
p1725
sg74
g63
sbsg47
g39
sg75
g68
sS'suffix'
p1726
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'func_normalize'
p1727
sg85
(dp1728
sg87
g1600
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1727
sg96
Nsg97
(lp1729
sg99
Nsg100
Nsb(dp1730
sg5
(g18
g7
Ntp1731
Rp1732
(dp1733
g22
(dp1734
sg24
g5
(g1580
g7
Ntp1735
Rp1736
(dp1737
g29
g30
(g1584
tp1738
Rp1739
(dp1740
g50
I00
sg35
g36
sg60
g39
sg52
g39
sg41
g39
sg1588
g1589
sg54
g55
sg63
g5
(g64
g65
(dp1741
tp1742
Rp1743
(dp1744
g72
S'environ_items'
p1745
sg74
g63
sbsg47
g39
sg1595
g1596
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'func_get_mean_RPI'
p1746
sg85
(dp1747
sg87
g1600
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1746
sg96
Nsg97
(lp1748
sg99
Nsg100
Nsb(dp1749
sg5
(g18
g7
Ntp1750
Rp1751
(dp1752
g22
(dp1753
sg24
g5
(cnipype.interfaces.afni.preprocess
Calc
p1754
g7
Ntp1755
Rp1756
(dp1757
g29
g30
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p1758
tp1759
Rp1760
(dp1761
S'stop_idx'
p1762
g39
sg50
I00
sg35
g36
sg60
g39
sS'expr'
p1763
S'a*b'
p1764
sg52
g39
sg1588
g1589
sS'in_file_b'
p1765
g39
sS'in_file_c'
p1766
g39
sS'in_file_a'
p1767
g39
sg63
g5
(g64
g65
(dp1768
tp1769
Rp1770
(dp1771
g72
S'environ_items'
p1772
sg74
g63
sbsS'single_idx'
p1773
g39
sS'other'
p1774
g39
sS'start_idx'
p1775
g39
sg54
g55
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'func_edge_detect'
p1776
sg85
(dp1777
sg87
g1600
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1776
sg96
Nsg97
(lp1778
sg99
Nsg100
Nsb(dp1779
sg5
(g18
g7
Ntp1780
Rp1781
(dp1782
g22
(dp1783
sg24
g5
(g1607
g7
Ntp1784
Rp1785
(dp1786
g29
g30
(g1611
tp1787
Rp1788
(dp1789
g1615
g39
sg50
I00
sg1011
g39
sg1616
g39
sg1617
g39
sg52
g1618
sg1588
g1589
sg1619
I4
sg54
g55
sg1620
S'max_displacement.1D'
p1790
sg47
g39
sg1621
g39
sg63
g5
(g64
g65
(dp1791
tp1792
Rp1793
(dp1794
g72
S'environ_items'
p1795
sg74
g63
sbsg1627
g39
sg35
g36
sg60
g39
sbsg82
I1
sg79
g55
sg78
I1
sg1597
g1589
sg81
Nsbsg83
Nsg90
I00
sg85
(dp1796
sg92
Nsg89
Nsg99
Nsg74
S'func_motion_correct_A'
p1797
sg87
g1600
sg91
I00
sg93
Nsg94
I00
sg95
g1797
sg96
Nsg97
(lp1798
sg100
Nsb(dp1799
sg5
(g18
g7
Ntp1800
Rp1801
(dp1802
g22
(dp1803
sg24
g5
(g106
g7
Ntp1804
Rp1805
(dp1806
g29
g30
(g110
tp1807
Rp1808
(dp1809
g35
g36
sS'func'
p1810
g39
sbsg117
(lp1811
g1810
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp1812
sg87
g1600
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp1813
sg99
Nsg100
Nsb(dp1814
sg5
(g18
g7
Ntp1815
Rp1816
(dp1817
g22
(dp1818
sg24
g5
(cnipype.interfaces.afni.preprocess
Automask
p1819
g7
Ntp1820
Rp1821
(dp1822
g29
g30
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p1823
tp1824
Rp1825
(dp1826
g50
I00
sg35
g36
sg52
g39
sS'erode'
p1827
g39
sg60
g39
sS'dilate'
p1828
g39
sS'clfrac'
p1829
g39
sg1588
g1589
sS'brain_file'
p1830
g39
sg54
g55
sg63
g5
(g64
g65
(dp1831
tp1832
Rp1833
(dp1834
g72
S'environ_items'
p1835
sg74
g63
sbsg47
g39
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'func_get_brain_mask'
p1836
sg85
(dp1837
sg87
g1600
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1836
sg96
Nsg97
(lp1838
sg99
Nsg100
Nsb(dp1839
sg5
(g18
g7
Ntp1840
Rp1841
(dp1842
g22
(dp1843
sg24
g5
(g1710
g7
Ntp1844
Rp1845
(dp1846
g29
g30
(g1714
tp1847
Rp1848
(dp1849
g50
I00
sg35
g36
sg810
S'-Tmin -bin'
p1850
sg1719
S'char'
p1851
sg60
g39
sg52
g39
sg1720
g39
sg54
g55
sg63
g5
(g64
g65
(dp1852
g67
g68
stp1853
Rp1854
(dp1855
g72
S'environ_items'
p1856
sg74
g63
sbsg47
g39
sg75
g68
sg1726
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'func_mask_normalize'
p1857
sg85
(dp1858
sg87
g1600
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g1857
sg96
Nsg97
(lp1859
sg99
Nsg100
Nsb(dp1860
sg5
(g18
g7
Ntp1861
Rp1862
(dp1863
g22
(dp1864
sg24
g5
(g106
g7
Ntp1865
Rp1866
(dp1867
g29
g30
(g110
tp1868
Rp1869
(dp1870
g1568
g39
sS'motion_correct_ref'
p1871
g39
sS'preprocessed_mask'
p1872
g39
sS'reorient_mean'
p1873
g39
sg41
g39
sS'refit'
p1874
g39
sS'skullstrip'
p1875
g39
sS'reorient'
p1876
g39
sS'preprocessed'
p1877
g39
sS'slice_time_corrected'
p1878
g39
sS'movement_parameters'
p1879
g39
sS'motion_correct'
p1880
g39
sg1627
g39
sg35
g36
sS'example_func'
p1881
g39
sbsg117
(lp1882
g1874
ag1876
ag1873
ag1880
ag1871
ag1879
ag1568
ag41
ag1875
ag1881
ag1877
ag1872
ag1878
ag1627
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp1883
sg87
g1600
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp1884
sg99
Nsg100
Nsb(dp1885
ssg140
g65
sg141
g65
sg142
(dp1886
g1577
(dp1887
g1862
(dp1888
g146
(lp1889
(g60
g1881
tp1890
asssg1604
(dp1891
g1659
(dp1892
g146
(lp1893
(g60
g47
tp1894
asssg1633
(dp1895
g1732
(dp1896
g146
(lp1897
(g60
g47
tp1898
assg1781
(dp1899
g146
(lp1900
(g60
g47
tp1901
assg1862
(dp1902
g146
(lp1903
(g60
g1876
tp1904
assg1604
(dp1905
g146
(lp1906
(g60
g47
tp1907
asssg1659
(dp1908
g1862
(dp1909
g146
(lp1910
(g60
g1871
tp1911
assg1781
(dp1912
g146
(lp1913
(g60
g1617
tp1914
asssg1678
(dp1915
g1633
(dp1916
g146
(lp1917
(g60
g47
tp1918
asssg1707
(dp1919
g1841
(dp1920
g146
(lp1921
(g60
g47
tp1922
assg1862
(dp1923
g146
(lp1924
(g60
g1877
tp1925
asssg1732
(dp1926
g1604
(dp1927
g146
(lp1928
(g60
g1617
tp1929
asssg1751
(dp1930
g1577
(dp1931
g146
(lp1932
(g60
g47
tp1933
assg1862
(dp1934
g146
(lp1935
(g60
g1875
tp1936
assg1707
(dp1937
g146
(lp1938
(g60
g47
tp1939
asssg1781
(dp1940
g1816
(dp1941
g146
(lp1942
(g60
g47
tp1943
assg1862
(dp1944
g146
(lp1945
(g60
g1880
tp1946
a(g1620
g1568
tp1947
a(g1615
g1879
tp1948
a(g1627
g1627
tp1949
assg1751
(dp1950
g146
(lp1951
(g60
g1767
tp1952
asssg1801
(dp1953
g1678
(dp1954
g146
(lp1955
(g1810
g47
tp1956
asssg1816
(dp1957
g1751
(dp1958
g146
(lp1959
(g60
g1765
tp1960
assg1862
(dp1961
g146
(lp1962
(g60
g41
tp1963
asssg1841
(dp1964
g1862
(dp1965
g146
(lp1966
(g60
g1872
tp1967
asssg1862
(dp1968
ssg157
g1886
sg158
(dp1969
sg160
g65
sg161
g1886
sg162
(dp1970
g1577
(dp1971
g1751
g1931
ssg1604
(dp1972
g1732
g1927
sg1633
g1905
ssg1633
(dp1973
g1678
g1916
ssg1659
(dp1974
g1604
g1892
ssg1678
(dp1975
g1801
g1954
ssg1707
(dp1976
g1751
g1937
ssg1732
(dp1977
g1633
g1896
ssg1751
(dp1978
g1816
g1958
sg1781
g1950
ssg1781
(dp1979
g1633
g1899
sg1659
g1912
ssg1801
(dp1980
sg1816
(dp1981
g1781
g1941
ssg1841
(dp1982
g1707
g1920
ssg1862
(dp1983
g1816
g1961
sg1781
g1944
sg1659
g1909
sg1633
g1902
sg1707
g1923
sg1577
g1888
sg1751
g1934
sg1841
g1965
sssbsg74
g1600
sg87
g167
sg95
g1600
sg96
g168
((lp1984
(lp1985
g171
ag168
((lp1986
(lp1987
g174
ag175
aa(lp1988
g177
ag178
aa(lp1989
g180
ag181
aa(lp1990
g183
ag184
aa(lp1991
g186
ag187
aa(lp1992
g189
ag190
aa(lp1993
g192
ag193
aatp1994
Rp1995
aa(lp1996
g197
ag168
((lp1997
(lp1998
g200
ag201
aa(lp1999
g203
ag204
aa(lp2000
g206
ag207
aa(lp2001
g209
ag210
aa(lp2002
g212
ag213
aa(lp2003
g215
ag216
aa(lp2004
g218
ag219
aa(lp2005
g221
ag222
aa(lp2006
g224
ag225
aa(lp2007
g227
ag228
aa(lp2008
g230
ag231
aa(lp2009
g233
ag234
aa(lp2010
g236
ag237
aa(lp2011
g239
ag240
aa(lp2012
g242
ag243
aa(lp2013
g245
ag246
aa(lp2014
g248
ag249
aa(lp2015
g251
ag252
aa(lp2016
g254
ag255
aa(lp2017
g257
ag258
aa(lp2018
g260
ag261
aa(lp2019
g263
ag264
aatp2020
Rp2021
aa(lp2022
g268
ag168
((lp2023
(lp2024
g271
ag272
aatp2025
Rp2026
aatp2027
Rp2028
sg100
NsbS'outputspec.max_displacement'
p2029
tp2030
sS'reho_to_standard_smooth'
p2031
(g5
(g18
g7
Ntp2032
Rp2033
(dp2034
g22
(dp2035
sg24
g5
(g801
g7
Ntp2036
Rp2037
(dp2038
g29
g30
(g805
tp2039
Rp2040
(dp2041
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp2042
g67
g68
stp2043
Rp2044
(dp2045
g72
S'environ_items'
p2046
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'reho_to_standard_smooth_0'
p2047
sg85
(dp2048
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2047
sg96
Nsg97
(lp2049
sg99
Nsg100
Nsbg60
tp2050
sS'output_means.@alff_to_standard_smooth_average'
p2051
(g5
(g18
g7
Ntp2052
Rp2053
(dp2054
g22
(dp2055
sg24
g5
(g291
g7
Ntp2056
Rp2057
(dp2058
g29
g30
(g295
tp2059
Rp2060
(dp2061
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p2062
sg632
S'alff_to_standard_smooth'
p2063
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp2064
g47
ag632
asg82
I1
sg307
(dp2065
g636
Nssg310
(lp2066
g636
asbsg83
Nsg74
S'alff_to_standard_smooth_mean_to_txt_0'
p2067
sg85
(dp2068
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2067
sg96
Nsg97
(lp2069
sg99
Nsg100
Nsbg636
tp2070
sS'raw_functional'
p2071
(g5
(g6
g7
Ntp2072
Rp2073
(dp2074
g11
g5
(g12
g7
Ntp2075
Rp2076
(dp2077
g16
(dp2078
g5
(g18
g7
Ntp2079
Rp2080
(dp2081
g22
(dp2082
sg24
g5
(g106
g7
Ntp2083
Rp2084
(dp2085
g29
g30
(g110
tp2086
Rp2087
(dp2088
g35
g36
sS'creds_path'
p2089
NsS'subject'
p2090
S'sub-0001_ses-1'
p2091
sS'scan'
p2092
g39
sbsg117
(lp2093
g2090
ag2092
ag2089
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
S'inputnode'
p2094
sg85
(dp2095
sg87
S'func_gather_0'
p2096
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
(lp2097
(g2092
(lp2098
S'task-resting_run-02'
p2099
aS'task-resting_run-03'
p2100
aS'task-resting_run-01'
p2101
atp2102
asg94
I00
sg95
g2094
sg96
Nsg97
(lp2103
sg99
Nsg100
Nsb(dp2104
sg5
(g18
g7
Ntp2105
Rp2106
(dp2107
g22
(dp2108
sg24
g5
(g106
g7
Ntp2109
Rp2110
(dp2111
g29
g30
(g110
tp2112
Rp2113
(dp2114
g35
g36
sg2090
g39
sS'rest'
p2115
g39
sg2092
g39
sbsg117
(lp2116
g2090
ag2115
ag2092
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp2117
sg87
g2096
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp2118
sg99
Nsg100
Nsb(dp2119
sg5
(g18
g7
Ntp2120
Rp2121
(dp2122
g22
(dp2123
sg24
g5
(g291
g7
Ntp2124
Rp2125
(dp2126
g29
g30
(g295
tp2127
Rp2128
(dp2129
g50
I00
sS'rest_dict'
p2130
(dp2131
g2099
S'/bids_dataset/sub-0001/func/sub-0001_task-resting_run-02_bold.nii.gz'
p2132
sg2100
S'/bids_dataset/sub-0001/func/sub-0001_task-resting_run-03_bold.nii.gz'
p2133
sg2101
S'/bids_dataset/sub-0001/func/sub-0001_task-resting_run-01_bold.nii.gz'
p2134
ssg302
S'def get_rest(scan, rest_dict):\n    return rest_dict[scan]\n'
p2135
sg35
g36
sg2092
g39
sbsg78
I1
sg304
Nsg305
(lp2136
g2092
ag2130
asg82
I1
sg307
(dp2137
g2115
Nssg310
(lp2138
g2115
asbsg83
Nsg74
S'selectrest'
p2139
sg85
(dp2140
sg87
g2096
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2139
sg96
Nsg97
(lp2141
sg99
Nsg100
Nsb(dp2142
sg5
(g18
g7
Ntp2143
Rp2144
(dp2145
g22
(dp2146
sg24
g5
(g291
g7
Ntp2147
Rp2148
(dp2149
g29
g30
(g295
tp2150
Rp2151
(dp2152
g1021
g1810
sg50
I00
sg2089
g39
sg302
S'def check_for_s3(file_path, creds_path, dl_dir=None, img_type=\'anat\'):\n    \'\'\'\n    \'\'\'\n\n    # Import packages\n    import os\n    import nibabel as nib\n    import botocore.exceptions\n\n    from indi_aws import fetch_creds\n\n    # Init variables\n    s3_str = \'s3://\'\n    if dl_dir is None:\n        dl_dir = os.getcwd()\n\n    # Explicitly lower-case the "s3"\n    if file_path.lower().startswith(s3_str):\n        file_path_sp = file_path.split(\'/\')\n        file_path_sp[0] = file_path_sp[0].lower()\n        file_path = \'/\'.join(file_path_sp)\n\n    # Check for s3 string in filepaths\n    if file_path.startswith(s3_str):\n        # Get bucket name and bucket object\n        bucket_name = file_path.replace(s3_str, \'\').split(\'/\')[0]\n        bucket = fetch_creds.return_bucket(creds_path, bucket_name)\n\n        # Extract relative key path from bucket and local path\n        s3_prefix = os.path.join(s3_str, bucket_name)\n        s3_key = file_path.replace(s3_prefix, \'\').lstrip(\'/\')\n        local_path = os.path.join(dl_dir, os.path.basename(s3_key))\n\n        # Get local directory and create folders if they dont exist\n        local_dir = os.path.dirname(local_path)\n        if not os.path.exists(local_dir):\n            os.makedirs(local_dir)\n\n        # Download file\n        try:\n            bucket.download_file(Key=s3_key, Filename=local_path)\n        except botocore.exceptions.ClientError as exc:\n            error_code = int(exc.response[\'Error\'][\'Code\'])\n            if error_code == 403:\n                err_msg = \'Access to bucket: "%s" is denied; using credentials \'\\\n                          \'in subject list: "%s"; cannot access the file "%s"\'\\\n                          % (bucket_name, creds_path, file_path)\n                raise Exception(err_msg)\n            elif error_code == 404:\n                err_msg = \'Bucket: "%s" does not exist; check spelling and try \'\\\n                          \'again\' % bucket_name\n                raise Exception(err_msg)\n            else:\n                err_msg = \'Unable to connect to bucket: "%s". Error message:\\n%s\'\\\n                          % (bucket_name, exc)\n        except Exception as exc:\n            err_msg = \'Unable to connect to bucket: "%s". Error message:\\n%s\'\\\n                      % (bucket_name, exc)\n            raise Exception(err_msg)\n\n    # Otherwise just return what was passed in\n    else:\n        local_path = file_path\n\n    # Check image dimensionality\n    img_nii = nib.load(local_path)\n    if img_type == \'anat\':\n        if len(img_nii.shape) != 3:\n            raise IOError(\'File: %s must be an anatomical image with 3 \'\\\n                          \'dimensions but %d dimensions found!\' % (local_path,len(img_nii.shape)))\n    elif img_type == \'func\':\n        if len(img_nii.shape) != 4:\n            raise IOError(\'File: %s must be a functional image with 4 \'\\\n                          \'dimensions but %d dimensions found!\' % (local_path,len(img_nii.shape)))\n\n    # Return the local path\n    return local_path\n'
p2153
sS'file_path'
p2154
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp2155
g2154
ag2089
ag1021
asg82
I1
sg307
(dp2156
S'local_path'
p2157
Nssg310
(lp2158
g2157
asbsg83
Nsg74
S'check_for_s3'
p2159
sg85
(dp2160
sg87
g2096
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2159
sg96
Nsg97
(lp2161
sg99
Nsg100
Nsb(dp2162
ssg140
g65
sg141
g65
sg142
(dp2163
g2080
(dp2164
g2106
(dp2165
g146
(lp2166
(g2090
g2090
tp2167
a(g2092
g2092
tp2168
assg2144
(dp2169
g146
(lp2170
(g2089
g2089
tp2171
assg2121
(dp2172
g146
(lp2173
(g2092
g2092
tp2174
asssg2106
(dp2175
sg2121
(dp2176
g2144
(dp2177
g146
(lp2178
(g2115
g2154
tp2179
asssg2144
(dp2180
g2106
(dp2181
g146
(lp2182
(g2157
g2115
tp2183
assssg157
g2163
sg158
(dp2184
sg160
g65
sg161
g2163
sg162
(dp2185
g2080
(dp2186
sg2106
(dp2187
g2080
g2165
sg2144
g2181
ssg2121
(dp2188
g2080
g2172
ssg2144
(dp2189
g2080
g2169
sg2121
g2177
sssbsg74
g2096
sg87
g167
sg95
g2096
sg96
g168
((lp2190
(lp2191
g171
ag168
((lp2192
(lp2193
g174
ag175
aa(lp2194
g177
ag178
aa(lp2195
g180
ag181
aa(lp2196
g183
ag184
aa(lp2197
g186
ag187
aa(lp2198
g189
ag190
aa(lp2199
g192
ag193
aatp2200
Rp2201
aa(lp2202
g197
ag168
((lp2203
(lp2204
g200
ag201
aa(lp2205
g203
ag204
aa(lp2206
g206
ag207
aa(lp2207
g209
ag210
aa(lp2208
g212
ag213
aa(lp2209
g215
ag216
aa(lp2210
g218
ag219
aa(lp2211
g221
ag222
aa(lp2212
g224
ag225
aa(lp2213
g227
ag228
aa(lp2214
g230
ag231
aa(lp2215
g233
ag234
aa(lp2216
g236
ag237
aa(lp2217
g239
ag240
aa(lp2218
g242
ag243
aa(lp2219
g245
ag246
aa(lp2220
g248
ag249
aa(lp2221
g251
ag252
aa(lp2222
g254
ag255
aa(lp2223
g257
ag258
aa(lp2224
g260
ag261
aa(lp2225
g263
ag264
aatp2226
Rp2227
aa(lp2228
g268
ag168
((lp2229
(lp2230
g271
ag272
aatp2231
Rp2232
aatp2233
Rp2234
sg100
NsbS'outputspec.rest'
p2235
tp2236
sS'reho_to_standard'
p2237
(g5
(g6
g7
Ntp2238
Rp2239
(dp2240
g11
g5
(g12
g7
Ntp2241
Rp2242
(dp2243
g16
(dp2244
g5
(g18
g7
Ntp2245
Rp2246
(dp2247
g22
(dp2248
sg24
g5
(g106
g7
Ntp2249
Rp2250
(dp2251
g29
g30
(g110
tp2252
Rp2253
(dp2254
g35
g36
sg876
g39
sbsg117
(lp2255
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp2256
sg87
S'reho_to_standard_0'
p2257
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp2258
sg99
Nsg100
Nsb(dp2259
sg5
(g18
g7
Ntp2260
Rp2261
(dp2262
g22
(dp2263
sg24
g5
(g106
g7
Ntp2264
Rp2265
(dp2266
g29
g30
(g110
tp2267
Rp2268
(dp2269
g35
g36
sg881
I0
sg435
g39
sg889
S'/usr/share/fsl/5.0/data/standard/MNI152_T1_3mm_brain.nii.gz'
p2270
sg890
g39
sg474
I3
sg900
S'Linear'
p2271
sbsg117
(lp2272
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp2273
sg87
g2257
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp2274
sg99
Nsg100
Nsb(dp2275
sg5
(g18
g7
Ntp2276
Rp2277
(dp2278
g22
(dp2279
sg24
g5
(g867
g7
Ntp2280
Rp2281
(dp2282
g29
g30
(g871
tp2283
Rp2284
(dp2285
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
S'_antswarp'
p2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp2287
g883
S'1'
p2288
stp2289
Rp2290
(dp2291
g72
S'environ_items'
p2292
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
S'apply_ants_warp'
p2293
sg85
(dp2294
sg87
g2257
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp2295
sg99
Nsg100
Nsb(dp2296
ssg140
g65
sg141
g65
sg142
(dp2297
g2246
(dp2298
sg2261
(dp2299
g2277
(dp2300
g146
(lp2301
(g890
g890
tp2302
a(g889
g889
tp2303
a(g435
g435
tp2304
a(g474
g474
tp2305
a(g881
g881
tp2306
a(g900
g900
tp2307
asssg2277
(dp2308
g2246
(dp2309
g146
(lp2310
(g876
g876
tp2311
assssg157
g2297
sg158
(dp2312
sg160
g65
sg161
g2297
sg162
(dp2313
g2246
(dp2314
g2277
g2309
ssg2261
(dp2315
sg2277
(dp2316
g2261
g2300
sssbsg74
g2257
sg87
g167
sg95
g2257
sg96
g168
((lp2317
(lp2318
g171
ag168
((lp2319
(lp2320
g174
ag175
aa(lp2321
g177
ag178
aa(lp2322
g180
ag181
aa(lp2323
g183
ag184
aa(lp2324
g186
ag187
aa(lp2325
g189
ag190
aa(lp2326
g192
ag193
aatp2327
Rp2328
aa(lp2329
g197
ag168
((lp2330
(lp2331
g200
ag201
aa(lp2332
g203
ag204
aa(lp2333
g206
ag207
aa(lp2334
g209
ag210
aa(lp2335
g212
ag213
aa(lp2336
g215
ag216
aa(lp2337
g218
ag219
aa(lp2338
g221
ag222
aa(lp2339
g224
ag225
aa(lp2340
g227
ag228
aa(lp2341
g230
ag231
aa(lp2342
g233
ag234
aa(lp2343
g236
ag237
aa(lp2344
g239
ag240
aa(lp2345
g242
ag243
aa(lp2346
g245
ag246
aa(lp2347
g248
ag249
aa(lp2348
g251
ag252
aa(lp2349
g254
ag255
aa(lp2350
g257
ag258
aa(lp2351
g260
ag261
aa(lp2352
g263
ag264
aatp2353
Rp2354
aa(lp2355
g268
ag168
((lp2356
(lp2357
g271
ag272
aatp2358
Rp2359
aatp2360
Rp2361
sg100
NsbS'outputspec.output_image'
p2362
tp2363
sS'output_means.@dr_tempreg_maps_files_average'
p2364
(g5
(cnipype.pipeline.engine.nodes
MapNode
p2365
g7
Ntp2366
Rp2367
(dp2368
S'nested'
p2369
I00
sg22
(dp2370
sg24
g5
(g291
g7
Ntp2371
Rp2372
(dp2373
g29
g30
(g295
tp2374
Rp2375
(dp2376
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p2377
sg632
S'dr_tempreg_maps_files'
p2378
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp2379
g47
ag632
asg82
I1
sg307
(dp2380
g636
Nssg310
(lp2381
g636
asbsg83
NsS'_inputs'
p2382
g30
(g110
tp2383
Rp2384
(dp2385
g50
I00
sg302
g2377
sg632
g2378
sg47
g39
sg35
g36
sbsg74
S'dr_tempreg_maps_files_mean_to_txt_0'
p2386
sg85
(dp2387
sS'_serial'
p2388
I00
sg87
g167
sS'iterfield'
p2389
(lp2390
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2386
sg96
Nsg97
(lp2391
sg99
Nsg100
Nsbg636
tp2392
sS'anat_to_mni_ants_composite_xfm'
p2393
(g281
S'outputspec.composite_transform'
p2394
tp2395
sS'vmhc_fisher_zstd_zstat_map'
p2396
(g5
(g6
g7
Ntp2397
Rp2398
(dp2399
g11
g5
(g12
g7
Ntp2400
Rp2401
(dp2402
g16
(dp2403
g5
(g18
g7
Ntp2404
Rp2405
(dp2406
g22
(dp2407
sg24
g5
(g291
g7
Ntp2408
Rp2409
(dp2410
g29
g30
(g295
tp2411
Rp2412
(dp2413
g50
I00
sg35
g36
sg302
S'def get_img_nvols(in_files):\n\n    """\n    Calculates the number of volumes in the given nifti image\n\n    Parameters\n    ----------\n\n    in_files : string (nifti file)\n\n    Returns\n    -------\n\n    out : int\n        number of volumes of input nifti file\n\n    """\n\n    out = None\n    from nibabel import load\n    img = load(in_files)\n    hdr = img.get_header()\n    nvols = None\n    if len(hdr.get_data_shape()) > 3:\n        nvols = int(hdr.get_data_shape()[3])\n    else:\n        nvols = 1\n    out = nvols\n\n    return out\n'
p2414
sg1027
g39
sbsg78
I1
sg304
Nsg305
(lp2415
g1027
asg82
I1
sg307
(dp2416
S'nvols'
p2417
Nssg310
(lp2418
g2417
asbsg83
Nsg74
S'NVOLS'
p2419
sg85
(dp2420
sg87
S'vmhc_0'
p2421
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2419
sg96
Nsg97
(lp2422
sg99
Nsg100
Nsb(dp2423
sg5
(g18
g7
Ntp2424
Rp2425
(dp2426
g22
(dp2427
sg24
g5
(g106
g7
Ntp2428
Rp2429
(dp2430
g29
g30
(g110
tp2431
Rp2432
(dp2433
S'rest_res'
p2434
g39
sS'ants_symm_affine_xfm'
p2435
g39
sS'example_func2highres_mat'
p2436
g39
sS'ants_symm_initial_xfm'
p2437
g39
sS'mean_functional'
p2438
g39
sg789
g39
sS'ants_symm_rigid_xfm'
p2439
g39
sS'rest_mask'
p2440
g39
sS'standard_for_func'
p2441
S'/usr/share/fsl/5.0/data/standard/MNI152_T1_3mm.nii.gz'
p2442
sS'fnirt_nonlinear_warp'
p2443
g39
sS'ants_symm_warp_field'
p2444
g39
sg35
g36
sbsg117
(lp2445
g2434
ag2436
ag2440
ag2441
ag2438
ag789
ag2443
ag2437
ag2439
ag2435
ag2444
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp2446
sg87
g2421
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp2447
sg99
Nsg100
Nsb(dp2448
sg5
(g18
g7
Ntp2449
Rp2450
(dp2451
g22
(dp2452
sg24
g5
(g291
g7
Ntp2453
Rp2454
(dp2455
g29
g30
(g295
tp2456
Rp2457
(dp2458
g50
I00
sg2417
g39
sg302
S'def get_operand_expression(nvols):\n\n    """\n    Generates operand string\n\n    Parameters\n    ----------\n\n    nvols : int\n\n    Returns\n    -------\n\n    expr : string\n\n    """\n\n    expr = None\n    vol = int(nvols)\n    expr = (\'a*sqrt(%d-3)\' % vol)\n\n    return expr\n'
p2459
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp2460
g2417
asg82
I1
sg307
(dp2461
g1763
Nssg310
(lp2462
g1763
asbsg83
Nsg74
S'generateEXP'
p2463
sg85
(dp2464
sg87
g2421
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2463
sg96
Nsg97
(lp2465
sg99
Nsg100
Nsb(dp2466
sg5
(g18
g7
Ntp2467
Rp2468
(dp2469
g22
(dp2470
sg24
g5
(g1754
g7
Ntp2471
Rp2472
(dp2473
g29
g30
(g1758
tp2474
Rp2475
(dp2476
g1762
g39
sg50
I00
sg35
g36
sg60
g39
sg1763
S'log((1+a)/(1-a))/2'
p2477
sg52
g39
sg1588
g1589
sg1765
g39
sg1766
g39
sg1767
g39
sg63
g5
(g64
g65
(dp2478
tp2479
Rp2480
(dp2481
g72
S'environ_items'
p2482
sg74
g63
sbsg1773
g39
sg1774
g39
sg1775
g39
sg54
g55
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'z_trans'
p2483
sg85
(dp2484
sg87
g2421
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2483
sg96
Nsg97
(lp2485
sg99
Nsg100
Nsb(dp2486
sg5
(g18
g7
Ntp2487
Rp2488
(dp2489
g22
(dp2490
sg24
g5
(g106
g7
Ntp2491
Rp2492
(dp2493
g29
g30
(g110
tp2494
Rp2495
(dp2496
g35
g36
sS'fwhm'
p2497
(lp2498
I6
asbsg117
(lp2499
g2497
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
S'fwhm_input'
p2500
sg85
(dp2501
sg87
g2421
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
(g2497
(lp2502
I6
atp2503
sg94
I00
sg95
g2500
sg96
Nsg97
(lp2504
sg99
Nsg100
Nsb(dp2505
sg5
(g6
g7
Ntp2506
Rp2507
(dp2508
g11
g5
(g12
g7
Ntp2509
Rp2510
(dp2511
g16
(dp2512
g5
(g18
g7
Ntp2513
Rp2514
(dp2515
g22
(dp2516
sg24
g5
(g106
g7
Ntp2517
Rp2518
(dp2519
g29
g30
(g110
tp2520
Rp2521
(dp2522
g35
g36
sS'linear_initial'
p2523
g39
sS'linear_affine'
p2524
g39
sS'linear_rigid'
p2525
g39
sS'warp_file'
p2526
g39
sS'fsl_to_itk_affine'
p2527
g39
sbsg117
(lp2528
g2526
ag2523
ag2524
ag2525
ag2527
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp2529
sg87
S'collect_transforms_vmhc'
p2530
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp2531
sg99
Nsg100
Nsb(dp2532
sg5
(g18
g7
Ntp2533
Rp2534
(dp2535
g22
(dp2536
sg24
g5
(g106
g7
Ntp2537
Rp2538
(dp2539
g29
g30
(g110
tp2540
Rp2541
(dp2542
g35
g36
sS'transformation_series'
p2543
g39
sbsg117
(lp2544
g2543
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp2545
sg87
g2530
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp2546
sg99
Nsg100
Nsb(dp2547
sg5
(g18
g7
Ntp2548
Rp2549
(dp2550
g22
(dp2551
sg24
g5
(g828
g7
Ntp2552
Rp2553
(dp2554
g832
I5
sg29
g30
(g833
tp2555
Rp2556
(dp2557
g50
I00
sg35
g36
sg837
I00
sS'in5'
p2558
g39
sS'in1'
p2559
g39
sS'in2'
p2560
g39
sS'in3'
p2561
g39
sS'in4'
p2562
g39
sg841
g842
sbsg82
I1
sg78
I1
sbsg83
Nsg74
S'collect_transforms'
p2563
sg85
(dp2564
sg87
g2530
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2563
sg96
Nsg97
(lp2565
sg99
Nsg100
Nsb(dp2566
ssg140
g65
sg141
g65
sg142
(dp2567
g2514
(dp2568
g2549
(dp2569
g146
(lp2570
(g2526
g915
tp2571
a(g2524
g917
tp2572
a(g2525
g919
tp2573
a(g2523
S'in4'
p2574
tp2575
a(g2527
S'in5'
p2576
tp2577
asssg2534
(dp2578
sg2549
(dp2579
g2534
(dp2580
g146
(lp2581
(g931
g2543
tp2582
assssg157
g2567
sg158
(dp2583
sg160
g65
sg161
g2567
sg162
(dp2584
g2514
(dp2585
sg2534
(dp2586
g2549
g2580
ssg2549
(dp2587
g2514
g2569
sssbsg74
g2530
sg87
g2421
sg95
g2530
sg96
g168
((lp2588
(lp2589
g171
ag168
((lp2590
(lp2591
g174
ag175
aa(lp2592
g177
ag178
aa(lp2593
g180
ag181
aa(lp2594
g183
ag184
aa(lp2595
g186
ag187
aa(lp2596
g189
ag190
aa(lp2597
g192
ag193
aatp2598
Rp2599
aa(lp2600
g197
ag168
((lp2601
(lp2602
g200
ag201
aa(lp2603
g203
ag204
aa(lp2604
g206
ag207
aa(lp2605
g209
ag210
aa(lp2606
g212
ag213
aa(lp2607
g215
ag216
aa(lp2608
g218
ag219
aa(lp2609
g221
ag222
aa(lp2610
g224
ag225
aa(lp2611
g227
ag228
aa(lp2612
g230
ag231
aa(lp2613
g233
ag234
aa(lp2614
g236
ag237
aa(lp2615
g239
ag240
aa(lp2616
g242
ag243
aa(lp2617
g245
ag246
aa(lp2618
g248
ag249
aa(lp2619
g251
ag252
aa(lp2620
g254
ag255
aa(lp2621
g257
ag258
aa(lp2622
g260
ag261
aa(lp2623
g263
ag264
aatp2624
Rp2625
aa(lp2626
g268
ag168
((lp2627
(lp2628
g271
ag272
aatp2629
Rp2630
aatp2631
Rp2632
sg100
Nsb(dp2633
sg5
(g18
g7
Ntp2634
Rp2635
(dp2636
g22
(dp2637
sg24
g5
(cnipype.interfaces.fsl.utils
SwapDimensions
p2638
g7
Ntp2639
Rp2640
(dp2641
g29
g30
(cnipype.interfaces.fsl.utils
SwapDimensionsInputSpec
p2642
tp2643
Rp2644
(dp2645
S'new_dims'
p2646
(S'-x'
p2647
S'y'
p2648
S'z'
p2649
tp2650
sg50
I00
sg60
g39
sg52
g39
sg54
g55
sg63
g5
(g64
g65
(dp2651
g67
g68
stp2652
Rp2653
(dp2654
g72
S'environ_items'
p2655
sg74
g63
sbsg47
g39
sg75
g68
sg35
g36
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'copy_and_L_R_swap'
p2656
sg85
(dp2657
sg87
g2421
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2656
sg96
Nsg97
(lp2658
sg99
Nsg100
Nsb(dp2659
sg5
(g6
g7
Ntp2660
Rp2661
(dp2662
g11
g5
(g12
g7
Ntp2663
Rp2664
(dp2665
g16
(dp2666
g5
(g18
g7
Ntp2667
Rp2668
(dp2669
g22
(dp2670
sg24
g5
(g106
g7
Ntp2671
Rp2672
(dp2673
g29
g30
(g110
tp2674
Rp2675
(dp2676
g35
g36
sS'affine_file'
p2677
g39
sS'source_file'
p2678
g39
sS'reference_file'
p2679
g39
sbsg117
(lp2680
g2677
ag2679
ag2678
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp2681
sg87
S'fsl_to_itk_vmhc'
p2682
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp2683
sg99
Nsg100
Nsb(dp2684
sg5
(g18
g7
Ntp2685
Rp2686
(dp2687
g22
(dp2688
sg24
g5
(g106
g7
Ntp2689
Rp2690
(dp2691
g29
g30
(g110
tp2692
Rp2693
(dp2694
g35
g36
sS'itk_transform'
p2695
g39
sbsg117
(lp2696
g2695
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp2697
sg87
g2682
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp2698
sg99
Nsg100
Nsb(dp2699
sg5
(g18
g7
Ntp2700
Rp2701
(dp2702
g22
(dp2703
sg24
g5
(cnipype.interfaces.c3
C3dAffineTool
p2704
g7
Ntp2705
Rp2706
(dp2707
g29
g30
(cnipype.interfaces.c3
C3dAffineToolInputSpec
p2708
tp2709
Rp2710
(dp2711
g50
I00
sg35
g36
sg52
g39
sS'fsl2ras'
p2712
I01
sg54
g55
sg63
g5
(g64
g65
(dp2713
tp2714
Rp2715
(dp2716
g72
S'environ_items'
p2717
sg74
g63
sbsg2695
I01
sg2678
g39
sS'transform_file'
p2718
g39
sg2679
g39
sbsg82
I1
sg79
g55
sg81
Nsg78
I1
sbsg83
Nsg74
S'fsl_reg_2_itk'
p2719
sg85
(dp2720
sg87
g2682
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2719
sg96
Nsg97
(lp2721
sg99
Nsg100
Nsb(dp2722
sg5
(g18
g7
Ntp2723
Rp2724
(dp2725
g22
(dp2726
sg24
g5
(g291
g7
Ntp2727
Rp2728
(dp2729
g29
g30
(g295
tp2730
Rp2731
(dp2732
g50
I00
sg35
g36
sS'input_affine_file'
p2733
g39
sg302
S"def change_itk_transform_type(input_affine_file):\n\n    '''\n    this function takes in the affine.txt produced by the c3d_affine_tool\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\n\n    it then modifies the 'Transform Type' of this affine.txt so that it is\n    compatible with the antsApplyTransforms tool and produces a new affine\n    file titled 'updated_affine.txt'\n    '''\n\n    import os\n\n    new_file_lines = []\n\n    with open(input_affine_file) as f:\n\n        for line in f:\n\n            if 'Transform:' in line:\n\n                if 'MatrixOffsetTransformBase_double_3_3' in line:\n\n                    transform_line = 'Transform: AffineTransform_double_3_3'\n                    new_file_lines.append(transform_line)\n\n            else:\n\n                new_file_lines.append(line)\n\n\n    updated_affine_file = os.path.join(os.getcwd(), 'updated_affine.txt')\n\n    outfile = open(updated_affine_file, 'wt')\n\n    for line in new_file_lines:\n\n        print >>outfile, line.strip('\\n')\n\n    outfile.close()\n\n\n    return updated_affine_file\n"
p2734
sbsg78
I1
sg304
Nsg305
(lp2735
g2733
asg82
I1
sg307
(dp2736
S'updated_affine_file'
p2737
Nssg310
(lp2738
g2737
asbsg83
Nsg74
S'change_transform_type'
p2739
sg85
(dp2740
sg87
g2682
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2739
sg96
Nsg97
(lp2741
sg99
Nsg100
Nsb(dp2742
ssg140
g65
sg141
g65
sg142
(dp2743
g2668
(dp2744
g2701
(dp2745
g146
(lp2746
(g2677
g2718
tp2747
a(g2679
g2679
tp2748
a(g2678
g2678
tp2749
asssg2686
(dp2750
sg2701
(dp2751
g2724
(dp2752
g146
(lp2753
(g2695
g2733
tp2754
asssg2724
(dp2755
g2686
(dp2756
g146
(lp2757
(g2737
g2695
tp2758
assssg157
g2743
sg158
(dp2759
sg160
g65
sg161
g2743
sg162
(dp2760
g2668
(dp2761
sg2686
(dp2762
g2724
g2756
ssg2701
(dp2763
g2668
g2745
ssg2724
(dp2764
g2701
g2752
sssbsg74
g2682
sg87
g2421
sg95
g2682
sg96
g168
((lp2765
(lp2766
g171
ag168
((lp2767
(lp2768
g174
ag175
aa(lp2769
g177
ag178
aa(lp2770
g180
ag181
aa(lp2771
g183
ag184
aa(lp2772
g186
ag187
aa(lp2773
g189
ag190
aa(lp2774
g192
ag193
aatp2775
Rp2776
aa(lp2777
g197
ag168
((lp2778
(lp2779
g200
ag201
aa(lp2780
g203
ag204
aa(lp2781
g206
ag207
aa(lp2782
g209
ag210
aa(lp2783
g212
ag213
aa(lp2784
g215
ag216
aa(lp2785
g218
ag219
aa(lp2786
g221
ag222
aa(lp2787
g224
ag225
aa(lp2788
g227
ag228
aa(lp2789
g230
ag231
aa(lp2790
g233
ag234
aa(lp2791
g236
ag237
aa(lp2792
g239
ag240
aa(lp2793
g242
ag243
aa(lp2794
g245
ag246
aa(lp2795
g248
ag249
aa(lp2796
g251
ag252
aa(lp2797
g254
ag255
aa(lp2798
g257
ag258
aa(lp2799
g260
ag261
aa(lp2800
g263
ag264
aatp2801
Rp2802
aa(lp2803
g268
ag168
((lp2804
(lp2805
g271
ag272
aatp2806
Rp2807
aatp2808
Rp2809
sg100
Nsb(dp2810
sg5
(g18
g7
Ntp2811
Rp2812
(dp2813
g22
(dp2814
sg24
g5
(g1754
g7
Ntp2815
Rp2816
(dp2817
g29
g30
(g1758
tp2818
Rp2819
(dp2820
g1762
g39
sg50
I00
sg35
g36
sg60
g39
sg1763
g39
sg52
g39
sg1588
g1589
sg1765
g39
sg1766
g39
sg1767
g39
sg63
g5
(g64
g65
(dp2821
tp2822
Rp2823
(dp2824
g72
S'environ_items'
p2825
sg74
g63
sbsg1773
g39
sg1774
g39
sg1775
g39
sg54
g55
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'z_stat'
p2826
sg85
(dp2827
sg87
g2421
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2826
sg96
Nsg97
(lp2828
sg99
Nsg100
Nsb(dp2829
sg5
(g18
g7
Ntp2830
Rp2831
(dp2832
g22
(dp2833
sg24
g5
(g106
g7
Ntp2834
Rp2835
(dp2836
g29
g30
(g110
tp2837
Rp2838
(dp2839
g35
g36
sS'VMHC_FWHM_img'
p2840
g39
sS'VMHC_Z_stat_FWHM_img'
p2841
g39
sS'rest_res_2symmstandard'
p2842
g39
sS'VMHC_Z_FWHM_img'
p2843
g39
sbsg117
(lp2844
g2842
ag2840
ag2843
ag2841
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp2845
sg87
g2421
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp2846
sg99
Nsg100
Nsb(dp2847
sg5
(g18
g7
Ntp2848
Rp2849
(dp2850
g22
(dp2851
sg24
g5
(cnipype.interfaces.afni.preprocess
TCorrelate
p2852
g7
Ntp2853
Rp2854
(dp2855
g29
g30
(cnipype.interfaces.afni.preprocess
TCorrelateInputSpec
p2856
tp2857
Rp2858
(dp2859
S'polort'
p2860
I-1
sg50
I00
sS'pearson'
p2861
I01
sg60
g39
sg52
g39
sS'xset'
p2862
g39
sg1588
g1589
sg54
g55
sg63
g5
(g64
g65
(dp2863
tp2864
Rp2865
(dp2866
g72
S'environ_items'
p2867
sg74
g63
sbsS'yset'
p2868
g39
sg35
g36
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'pearson_correlation'
p2869
sg85
(dp2870
sg87
g2421
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2869
sg96
Nsg97
(lp2871
sg99
Nsg100
Nsb(dp2872
sg5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g18
g7
Ntp2880
Rp2881
(dp2882
g22
(dp2883
sg24
g5
(g106
g7
Ntp2884
Rp2885
(dp2886
g29
g30
(g110
tp2887
Rp2888
(dp2889
g35
g36
sg876
g39
sbsg117
(lp2890
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp2891
sg87
S'apply_ants_xfm_vmhc'
p2892
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp2893
sg99
Nsg100
Nsb(dp2894
sg5
(g18
g7
Ntp2895
Rp2896
(dp2897
g22
(dp2898
sg24
g5
(g106
g7
Ntp2899
Rp2900
(dp2901
g29
g30
(g110
tp2902
Rp2903
(dp2904
g35
g36
sg881
I3
sg435
g39
sg889
g39
sg890
g39
sg474
g39
sg900
g39
sbsg117
(lp2905
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp2906
sg87
g2892
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp2907
sg99
Nsg100
Nsb(dp2908
sg5
(g18
g7
Ntp2909
Rp2910
(dp2911
g22
(dp2912
sg24
g5
(g867
g7
Ntp2913
Rp2914
(dp2915
g29
g30
(g871
tp2916
Rp2917
(dp2918
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp2919
g883
S'1'
p2920
stp2921
Rp2922
(dp2923
g72
S'environ_items'
p2924
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp2925
sg87
g2892
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp2926
sg99
Nsg100
Nsb(dp2927
ssg140
g65
sg141
g65
sg142
(dp2928
g2881
(dp2929
sg2896
(dp2930
g2910
(dp2931
g146
(lp2932
(g890
g890
tp2933
a(g889
g889
tp2934
a(g435
g435
tp2935
a(g474
g474
tp2936
a(g881
g881
tp2937
a(g900
g900
tp2938
asssg2910
(dp2939
g2881
(dp2940
g146
(lp2941
(g876
g876
tp2942
assssg157
g2928
sg158
(dp2943
sg160
g65
sg161
g2928
sg162
(dp2944
g2881
(dp2945
g2910
g2940
ssg2896
(dp2946
sg2910
(dp2947
g2896
g2931
sssbsg74
g2892
sg87
g2421
sg95
g2892
sg96
g168
((lp2948
(lp2949
g171
ag168
((lp2950
(lp2951
g174
ag175
aa(lp2952
g177
ag178
aa(lp2953
g180
ag181
aa(lp2954
g183
ag184
aa(lp2955
g186
ag187
aa(lp2956
g189
ag190
aa(lp2957
g192
ag193
aatp2958
Rp2959
aa(lp2960
g197
ag168
((lp2961
(lp2962
g200
ag201
aa(lp2963
g203
ag204
aa(lp2964
g206
ag207
aa(lp2965
g209
ag210
aa(lp2966
g212
ag213
aa(lp2967
g215
ag216
aa(lp2968
g218
ag219
aa(lp2969
g221
ag222
aa(lp2970
g224
ag225
aa(lp2971
g227
ag228
aa(lp2972
g230
ag231
aa(lp2973
g233
ag234
aa(lp2974
g236
ag237
aa(lp2975
g239
ag240
aa(lp2976
g242
ag243
aa(lp2977
g245
ag246
aa(lp2978
g248
ag249
aa(lp2979
g251
ag252
aa(lp2980
g254
ag255
aa(lp2981
g257
ag258
aa(lp2982
g260
ag261
aa(lp2983
g263
ag264
aatp2984
Rp2985
aa(lp2986
g268
ag168
((lp2987
(lp2988
g271
ag272
aatp2989
Rp2990
aatp2991
Rp2992
sg100
Nsb(dp2993
sg5
(g18
g7
Ntp2994
Rp2995
(dp2996
g22
(dp2997
sg24
g5
(g801
g7
Ntp2998
Rp2999
(dp3000
g29
g30
(g805
tp3001
Rp3002
(dp3003
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp3004
g67
g68
stp3005
Rp3006
(dp3007
g72
S'environ_items'
p3008
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'smooth'
p3009
sg85
(dp3010
sg87
g2421
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3009
sg96
Nsg97
(lp3011
sg99
Nsg100
Nsb(dp3012
ssg140
g65
sg141
g65
sg142
(dp3013
g2405
(dp3014
g2450
(dp3015
g146
(lp3016
(g2417
g2417
tp3017
asssg2425
(dp3018
g2661
(dp3019
g146
(lp3020
(g2436
S'inputspec.affine_file'
p3021
tp3022
a(g789
S'inputspec.reference_file'
p3023
tp3024
a(g2438
S'inputspec.source_file'
p3025
tp3026
assg2874
(dp3027
g146
(lp3028
(g2441
S'inputspec.reference_image'
p3029
tp3030
assg2995
(dp3031
g146
(lp3032
(g2434
g47
tp3033
a(g2440
g819
tp3034
assg2507
(dp3035
g146
(lp3036
(g2437
S'inputspec.linear_initial'
p3037
tp3038
a(g2439
S'inputspec.linear_rigid'
p3039
tp3040
a(g2435
S'inputspec.linear_affine'
p3041
tp3042
a(g2444
S'inputspec.warp_file'
p3043
tp3044
asssg2450
(dp3045
g2812
(dp3046
g146
(lp3047
(g1763
g1763
tp3048
asssg2468
(dp3049
g2812
(dp3050
g146
(lp3051
(g60
g1767
tp3052
assg2831
(dp3053
g146
(lp3054
(g60
g2843
tp3055
asssg2488
(dp3056
g2995
(dp3057
g146
(lp3058
((g2497
S'def set_gauss(fwhm):\n\n    """\n    Compute the sigma value, given Full Width Half Max. \n    Further it builds an operand string and returns it\n\n    Parameters\n    ----------\n\n    fwhm : float\n\n    Returns\n    -------\n\n    op_string : string\n\n    """\n\n    op_string = ""\n\n    fwhm = float(fwhm)\n\n    sigma = float(fwhm / 2.3548)\n\n    op = "-kernel gauss %f -fmean -mas " % (sigma) + "%s"\n    op_string = op\n\n    return op_string\n'
p3059
(ttp3060
g810
tp3061
asssg2507
(dp3062
g2874
(dp3063
g146
(lp3064
(S'outputspec.transformation_series'
p3065
S'inputspec.transforms'
p3066
tp3067
asssg2635
(dp3068
g2849
(dp3069
g146
(lp3070
(g60
g2868
tp3071
assg2405
(dp3072
g146
(lp3073
(g60
g1027
tp3074
asssg2661
(dp3075
g2507
(dp3076
g146
(lp3077
(S'outputspec.itk_transform'
p3078
S'inputspec.fsl_to_itk_affine'
p3079
tp3080
asssg2812
(dp3081
g2831
(dp3082
g146
(lp3083
(g60
g2841
tp3084
asssg2831
(dp3085
sg2849
(dp3086
g2468
(dp3087
g146
(lp3088
(g60
g1767
tp3089
assg2831
(dp3090
g146
(lp3091
(g60
g2840
tp3092
asssg2874
(dp3093
g2849
(dp3094
g146
(lp3095
(S'outputspec.output_image'
p3096
g2862
tp3097
assg2635
(dp3098
g146
(lp3099
(g3096
g47
tp3100
assg2831
(dp3101
g146
(lp3102
(g3096
g2842
tp3103
asssg2995
(dp3104
g2874
(dp3105
g146
(lp3106
(g60
S'inputspec.input_image'
p3107
tp3108
assssg157
g3013
sg158
(dp3109
sg160
g65
sg161
g3013
sg162
(dp3110
g2405
(dp3111
g2635
g3072
ssg2425
(dp3112
sg2450
(dp3113
g2405
g3015
ssg2468
(dp3114
g2849
g3087
ssg2488
(dp3115
sg2507
(dp3116
g2425
g3035
sg2661
g3076
ssg2635
(dp3117
g2874
g3098
ssg2661
(dp3118
g2425
g3019
ssg2812
(dp3119
g2468
g3050
sg2450
g3046
ssg2831
(dp3120
g2874
g3101
sg2468
g3053
sg2812
g3082
sg2849
g3090
ssg2849
(dp3121
g2874
g3094
sg2635
g3069
ssg2874
(dp3122
g2425
g3027
sg2995
g3105
sg2507
g3063
ssg2995
(dp3123
g2425
g3031
sg2488
g3057
sssbsg74
g2421
sg87
g167
sg95
g2421
sg96
g168
((lp3124
(lp3125
g171
ag168
((lp3126
(lp3127
g174
ag175
aa(lp3128
g177
ag178
aa(lp3129
g180
ag181
aa(lp3130
g183
ag184
aa(lp3131
g186
ag187
aa(lp3132
g189
ag190
aa(lp3133
g192
ag193
aatp3134
Rp3135
aa(lp3136
g197
ag168
((lp3137
(lp3138
g200
ag201
aa(lp3139
g203
ag204
aa(lp3140
g206
ag207
aa(lp3141
g209
ag210
aa(lp3142
g212
ag213
aa(lp3143
g215
ag216
aa(lp3144
g218
ag219
aa(lp3145
g221
ag222
aa(lp3146
g224
ag225
aa(lp3147
g227
ag228
aa(lp3148
g230
ag231
aa(lp3149
g233
ag234
aa(lp3150
g236
ag237
aa(lp3151
g239
ag240
aa(lp3152
g242
ag243
aa(lp3153
g245
ag246
aa(lp3154
g248
ag249
aa(lp3155
g251
ag252
aa(lp3156
g254
ag255
aa(lp3157
g257
ag258
aa(lp3158
g260
ag261
aa(lp3159
g263
ag264
aatp3160
Rp3161
aa(lp3162
g268
ag168
((lp3163
(lp3164
g271
ag272
aatp3165
Rp3166
aatp3167
Rp3168
sg100
NsbS'outputspec.VMHC_Z_stat_FWHM_img'
p3169
tp3170
sS'functional_brain_mask_to_standard'
p3171
(g5
(g6
g7
Ntp3172
Rp3173
(dp3174
g11
g5
(g12
g7
Ntp3175
Rp3176
(dp3177
g16
(dp3178
g5
(g18
g7
Ntp3179
Rp3180
(dp3181
g22
(dp3182
sg24
g5
(g106
g7
Ntp3183
Rp3184
(dp3185
g29
g30
(g110
tp3186
Rp3187
(dp3188
g35
g36
sg876
g39
sbsg117
(lp3189
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp3190
sg87
S'apply_ants_warp_functional_brain_mask_to_standard_0'
p3191
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp3192
sg99
Nsg100
Nsb(dp3193
sg5
(g18
g7
Ntp3194
Rp3195
(dp3196
g22
(dp3197
sg24
g5
(g106
g7
Ntp3198
Rp3199
(dp3200
g29
g30
(g110
tp3201
Rp3202
(dp3203
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g901
sbsg117
(lp3204
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp3205
sg87
g3191
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp3206
sg99
Nsg100
Nsb(dp3207
sg5
(g18
g7
Ntp3208
Rp3209
(dp3210
g22
(dp3211
sg24
g5
(g867
g7
Ntp3212
Rp3213
(dp3214
g29
g30
(g871
tp3215
Rp3216
(dp3217
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp3218
g883
S'1'
p3219
stp3220
Rp3221
(dp3222
g72
S'environ_items'
p3223
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp3224
sg87
g3191
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp3225
sg99
Nsg100
Nsb(dp3226
ssg140
g65
sg141
g65
sg142
(dp3227
g3180
(dp3228
sg3195
(dp3229
g3209
(dp3230
g146
(lp3231
(g890
g890
tp3232
a(g889
g889
tp3233
a(g435
g435
tp3234
a(g474
g474
tp3235
a(g881
g881
tp3236
a(g900
g900
tp3237
asssg3209
(dp3238
g3180
(dp3239
g146
(lp3240
(g876
g876
tp3241
assssg157
g3227
sg158
(dp3242
sg160
g65
sg161
g3227
sg162
(dp3243
g3180
(dp3244
g3209
g3239
ssg3195
(dp3245
sg3209
(dp3246
g3195
g3230
sssbsg74
g3191
sg87
g167
sg95
g3191
sg96
g168
((lp3247
(lp3248
g171
ag168
((lp3249
(lp3250
g174
ag175
aa(lp3251
g177
ag178
aa(lp3252
g180
ag181
aa(lp3253
g183
ag184
aa(lp3254
g186
ag187
aa(lp3255
g189
ag190
aa(lp3256
g192
ag193
aatp3257
Rp3258
aa(lp3259
g197
ag168
((lp3260
(lp3261
g200
ag201
aa(lp3262
g203
ag204
aa(lp3263
g206
ag207
aa(lp3264
g209
ag210
aa(lp3265
g212
ag213
aa(lp3266
g215
ag216
aa(lp3267
g218
ag219
aa(lp3268
g221
ag222
aa(lp3269
g224
ag225
aa(lp3270
g227
ag228
aa(lp3271
g230
ag231
aa(lp3272
g233
ag234
aa(lp3273
g236
ag237
aa(lp3274
g239
ag240
aa(lp3275
g242
ag243
aa(lp3276
g245
ag246
aa(lp3277
g248
ag249
aa(lp3278
g251
ag252
aa(lp3279
g254
ag255
aa(lp3280
g257
ag258
aa(lp3281
g260
ag261
aa(lp3282
g263
ag264
aatp3283
Rp3284
aa(lp3285
g268
ag168
((lp3286
(lp3287
g271
ag272
aatp3288
Rp3289
aatp3290
Rp3291
sg100
NsbS'outputspec.output_image'
p3292
tp3293
sS'output_means.@falff_to_standard_smooth_average'
p3294
(g5
(g18
g7
Ntp3295
Rp3296
(dp3297
g22
(dp3298
sg24
g5
(g291
g7
Ntp3299
Rp3300
(dp3301
g29
g30
(g295
tp3302
Rp3303
(dp3304
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p3305
sg632
S'falff_to_standard_smooth'
p3306
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp3307
g47
ag632
asg82
I1
sg307
(dp3308
g636
Nssg310
(lp3309
g636
asbsg83
Nsg74
S'falff_to_standard_smooth_mean_to_txt_0'
p3310
sg85
(dp3311
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3310
sg96
Nsg97
(lp3312
sg99
Nsg100
Nsbg636
tp3313
sS'falff_smooth'
p3314
(g5
(g18
g7
Ntp3315
Rp3316
(dp3317
g22
(dp3318
sg24
g5
(g801
g7
Ntp3319
Rp3320
(dp3321
g29
g30
(g805
tp3322
Rp3323
(dp3324
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp3325
g67
g68
stp3326
Rp3327
(dp3328
g72
S'environ_items'
p3329
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'falff_smooth_0'
p3330
sg85
(dp3331
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3330
sg96
Nsg97
(lp3332
sg99
Nsg100
Nsbg60
tp3333
sS'output_means.@dr_tempreg_maps_files_to_standard_smooth_average'
p3334
(g5
(g2365
g7
Ntp3335
Rp3336
(dp3337
g2369
I00
sg22
(dp3338
sg24
g5
(g291
g7
Ntp3339
Rp3340
(dp3341
g29
g30
(g295
tp3342
Rp3343
(dp3344
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p3345
sg632
S'dr_tempreg_maps_files_to_standard_smooth'
p3346
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp3347
g47
ag632
asg82
I1
sg307
(dp3348
g636
Nssg310
(lp3349
g636
asbsg83
Nsg2382
g30
(g110
tp3350
Rp3351
(dp3352
g50
I00
sg302
g3345
sg632
g3346
sg47
g39
sg35
g36
sbsg74
S'dr_tempreg_maps_files_to_standard_smooth_mean_to_txt_0'
p3353
sg85
(dp3354
sg2388
I00
sg87
g167
sg2389
(lp3355
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3353
sg96
Nsg97
(lp3356
sg99
Nsg100
Nsbg636
tp3357
sS'anatomical_reorient'
p3358
(g5
(g6
g7
Ntp3359
Rp3360
(dp3361
g11
g5
(g12
g7
Ntp3362
Rp3363
(dp3364
g16
(dp3365
g5
(g18
g7
Ntp3366
Rp3367
(dp3368
g22
(dp3369
sg24
g5
(g106
g7
Ntp3370
Rp3371
(dp3372
g119
I01
sg29
g30
(g110
tp3373
Rp3374
(dp3375
g35
g36
sS'anat'
p3376
g39
sbsg117
(lp3377
g3376
asg82
I1
sg78
I1
sbsg83
Nsg90
I00
sg85
(dp3378
sg92
Nsg89
Nsg99
Nsg74
g120
sg87
S'anat_preproc_0'
p3379
sg91
I00
sg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp3380
sg100
Nsb(dp3381
sg5
(g18
g7
Ntp3382
Rp3383
(dp3384
g22
(dp3385
sg24
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p3386
g7
Ntp3387
Rp3388
(dp3389
g29
g30
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p3390
tp3391
Rp3392
(dp3393
g50
I00
sg35
g36
sg60
g39
sg52
g39
sg1588
g1589
sg54
g55
sg63
g5
(g64
g65
(dp3394
tp3395
Rp3396
(dp3397
g72
S'environ_items'
p3398
sg74
g63
sbsg47
g39
sbsg82
I1
sg79
g55
sg78
I1
sg1597
g1589
sg81
Nsbsg83
Nsg90
I00
sg85
(dp3399
sg92
Nsg89
Nsg99
Nsg74
S'anat_skullstrip'
p3400
sg87
g3379
sg91
I00
sg93
Nsg94
I00
sg95
g3400
sg96
Nsg97
(lp3401
sg100
Nsb(dp3402
sg5
(g18
g7
Ntp3403
Rp3404
(dp3405
g22
(dp3406
sg24
g5
(g1681
g7
Ntp3407
Rp3408
(dp3409
g29
g30
(g1685
tp3410
Rp3411
(dp3412
g50
I00
sg1689
g39
sg1690
I01
sg1691
g39
sg52
g39
sg1692
g39
sg1693
g39
sg54
g55
sg63
g5
(g64
g65
(dp3413
tp3414
Rp3415
(dp3416
g72
S'environ_items'
p3417
sg74
g63
sbsg47
g39
sg1699
g39
sg1700
g39
sg35
g36
sg1701
g39
sbsg82
I1
sg79
g55
sg81
Nsg78
I1
sbsg83
Nsg90
I00
sg85
(dp3418
sg92
Nsg89
Nsg99
Nsg74
S'anat_deoblique'
p3419
sg87
g3379
sg91
I00
sg93
Nsg94
I00
sg95
g3419
sg96
Nsg97
(lp3420
sg100
Nsb(dp3421
sg5
(g18
g7
Ntp3422
Rp3423
(dp3424
g22
(dp3425
sg24
g5
(g106
g7
Ntp3426
Rp3427
(dp3428
g119
I01
sg29
g30
(g110
tp3429
Rp3430
(dp3431
g1876
g39
sg789
g39
sg1874
g39
sg35
g36
sg1875
g39
sbsg117
(lp3432
g1874
ag1876
ag1875
ag789
asg82
I1
sg78
I1
sbsg83
Nsg90
I00
sg85
(dp3433
sg92
Nsg89
Nsg99
Nsg74
g136
sg87
g3379
sg91
I00
sg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp3434
sg100
Nsb(dp3435
sg5
(g18
g7
Ntp3436
Rp3437
(dp3438
g22
(dp3439
sg24
g5
(g1636
g7
Ntp3440
Rp3441
(dp3442
g29
g30
(g1640
tp3443
Rp3444
(dp3445
g50
I00
sg35
g36
sg60
g39
sg52
g39
sg1588
g1589
sg1644
g39
sg1645
g39
sg54
g55
sg1646
g39
sg47
g39
sg63
g5
(g64
g65
(dp3446
tp3447
Rp3448
(dp3449
g72
S'environ_items'
p3450
sg74
g63
sbsg1652
g1653
sbsg82
I1
sg79
g55
sg78
I1
sg1597
g1589
sg81
Nsbsg83
Nsg90
I00
sg85
(dp3451
sg92
Nsg89
Nsg99
Nsg74
S'anat_reorient'
p3452
sg87
g3379
sg91
I00
sg93
Nsg94
I00
sg95
g3452
sg96
Nsg97
(lp3453
sg100
Nsb(dp3454
sg5
(g18
g7
Ntp3455
Rp3456
(dp3457
g22
(dp3458
sg24
g5
(g1754
g7
Ntp3459
Rp3460
(dp3461
g29
g30
(g1758
tp3462
Rp3463
(dp3464
g1762
g39
sg50
I00
sg35
g36
sg60
g39
sg1763
S'a*step(b)'
p3465
sg52
g39
sg1588
g1589
sg1765
g39
sg1766
g39
sg1767
g39
sg63
g5
(g64
g65
(dp3466
tp3467
Rp3468
(dp3469
g72
S'environ_items'
p3470
sg74
g63
sbsg1773
g39
sg1774
g39
sg1775
g39
sg54
g55
sbsg82
I1
sg79
g55
sg78
I1
sg1597
g1589
sg81
Nsbsg83
Nsg90
I00
sg85
(dp3471
sg92
Nsg89
Nsg99
Nsg74
S'anat_skullstrip_orig_vol'
p3472
sg87
g3379
sg91
I00
sg93
Nsg94
I00
sg95
g3472
sg96
Nsg97
(lp3473
sg100
Nsb(dp3474
ssg140
g65
sg141
g65
sg142
(dp3475
g3367
(dp3476
g3404
(dp3477
g146
(lp3478
(g3376
g47
tp3479
asssg3383
(dp3480
g3456
(dp3481
g146
(lp3482
(g60
g1765
tp3483
assg3423
(dp3484
g146
(lp3485
(g60
g1875
tp3486
asssg3404
(dp3487
g3437
(dp3488
g146
(lp3489
(g60
g47
tp3490
assg3423
(dp3491
g146
(lp3492
(g60
g1874
tp3493
asssg3423
(dp3494
sg3437
(dp3495
g3423
(dp3496
g146
(lp3497
(g60
g1876
tp3498
assg3456
(dp3499
g146
(lp3500
(g60
g1767
tp3501
assg3383
(dp3502
g146
(lp3503
(g60
g47
tp3504
asssg3456
(dp3505
g3423
(dp3506
g146
(lp3507
(g60
g789
tp3508
assssg157
g3475
sg158
(dp3509
sg160
g65
sg161
g3475
sg162
(dp3510
g3367
(dp3511
sg3383
(dp3512
g3437
g3502
ssg3404
(dp3513
g3367
g3477
ssg3423
(dp3514
g3456
g3506
sg3437
g3496
sg3404
g3491
sg3383
g3484
ssg3437
(dp3515
g3404
g3488
ssg3456
(dp3516
g3383
g3481
sg3437
g3499
sssbsg74
g3379
sg87
g167
sg95
g3379
sg96
g168
((lp3517
(lp3518
g171
ag168
((lp3519
(lp3520
g174
ag175
aa(lp3521
g177
ag178
aa(lp3522
g180
ag181
aa(lp3523
g183
ag184
aa(lp3524
g186
ag187
aa(lp3525
g189
ag190
aa(lp3526
g192
ag193
aatp3527
Rp3528
aa(lp3529
g197
ag168
((lp3530
(lp3531
g200
ag201
aa(lp3532
g203
ag204
aa(lp3533
g206
ag207
aa(lp3534
g209
ag210
aa(lp3535
g212
ag213
aa(lp3536
g215
ag216
aa(lp3537
g218
ag219
aa(lp3538
g221
ag222
aa(lp3539
g224
ag225
aa(lp3540
g227
ag228
aa(lp3541
g230
ag231
aa(lp3542
g233
ag234
aa(lp3543
g236
ag237
aa(lp3544
g239
ag240
aa(lp3545
g242
ag243
aa(lp3546
g245
ag246
aa(lp3547
g248
ag249
aa(lp3548
g251
ag252
aa(lp3549
g254
ag255
aa(lp3550
g257
ag258
aa(lp3551
g260
ag261
aa(lp3552
g263
ag264
aatp3553
Rp3554
aa(lp3555
g268
ag168
((lp3556
(lp3557
g271
ag272
aatp3558
Rp3559
aatp3560
Rp3561
sg100
NsbS'outputspec.reorient'
p3562
tp3563
sg3346
(g5
(g2365
g7
Ntp3564
Rp3565
(dp3566
g2369
I00
sg22
(dp3567
sg24
g5
(g801
g7
Ntp3568
Rp3569
(dp3570
g29
g30
(g805
tp3571
Rp3572
(dp3573
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp3574
g67
g68
stp3575
Rp3576
(dp3577
g72
S'environ_items'
p3578
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp3579
Rp3580
(dp3581
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp3582
g67
g68
stp3583
Rp3584
(dp3585
g72
S'environ_items'
p3586
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg74
S'dr_tempreg_maps_files_smooth_0'
p3587
sg85
(dp3588
sg2388
I00
sg87
g167
sg2389
(lp3589
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3587
sg96
Nsg97
(lp3590
sg99
Nsg100
Nsbg60
tp3591
sS'alff_to_standard_smooth'
p3592
(g5
(g18
g7
Ntp3593
Rp3594
(dp3595
g22
(dp3596
sg24
g5
(g801
g7
Ntp3597
Rp3598
(dp3599
g29
g30
(g805
tp3600
Rp3601
(dp3602
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp3603
g67
g68
stp3604
Rp3605
(dp3606
g72
S'environ_items'
p3607
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'alff_to_standard_smooth_0'
p3608
sg85
(dp3609
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3608
sg96
Nsg97
(lp3610
sg99
Nsg100
Nsbg60
tp3611
sS'output_means.@reho_to_standard_average'
p3612
(g5
(g18
g7
Ntp3613
Rp3614
(dp3615
g22
(dp3616
sg24
g5
(g291
g7
Ntp3617
Rp3618
(dp3619
g29
g30
(g295
tp3620
Rp3621
(dp3622
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p3623
sg632
S'reho_to_standard'
p3624
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp3625
g47
ag632
asg82
I1
sg307
(dp3626
g636
Nssg310
(lp3627
g636
asbsg83
Nsg74
S'reho_to_standard_mean_to_txt_0'
p3628
sg85
(dp3629
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3628
sg96
Nsg97
(lp3630
sg99
Nsg100
Nsbg636
tp3631
sS'dr_tempreg_maps_files_to_standard'
p3632
(g5
(g6
g7
Ntp3633
Rp3634
(dp3635
g11
g5
(g12
g7
Ntp3636
Rp3637
(dp3638
g16
(dp3639
g5
(g18
g7
Ntp3640
Rp3641
(dp3642
g22
(dp3643
sg24
g5
(g106
g7
Ntp3644
Rp3645
(dp3646
g29
g30
(g110
tp3647
Rp3648
(dp3649
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp3650
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp3651
sg87
S'dr_tempreg_maps_files_to_standard_0'
p3652
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp3653
sg99
Nsg100
Nsb(dp3654
sg5
(g2365
g7
Ntp3655
Rp3656
(dp3657
g2369
I00
sg22
(dp3658
sg24
g5
(g867
g7
Ntp3659
Rp3660
(dp3661
g29
g30
(g871
tp3662
Rp3663
(dp3664
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp3665
g883
S'1'
p3666
stp3667
Rp3668
(dp3669
g72
S'environ_items'
p3670
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg2382
g30
(g110
tp3671
Rp3672
(dp3673
g891
F0.0
sg50
I00
sg78
I1
sg876
g39
sg52
g39
sg877
g2286
sg879
g39
sg875
g39
sg880
g39
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp3674
g883
g3666
stp3675
Rp3676
(dp3677
g72
S'environ_items'
p3678
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg892
g39
sg474
g39
sg35
g36
sg900
g2271
sbsg74
S'apply_ants_warp_mapnode'
p3679
sg85
(dp3680
sg2388
I00
sg87
g3652
sg2389
(lp3681
g890
ag435
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3679
sg96
Nsg97
(lp3682
sg99
Nsg100
Nsb(dp3683
sg5
(g18
g7
Ntp3684
Rp3685
(dp3686
g22
(dp3687
sg24
g5
(g106
g7
Ntp3688
Rp3689
(dp3690
g29
g30
(g110
tp3691
Rp3692
(dp3693
g35
g36
sg876
g39
sbsg117
(lp3694
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp3695
sg87
g3652
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp3696
sg99
Nsg100
Nsb(dp3697
ssg140
g65
sg141
g65
sg142
(dp3698
g3641
(dp3699
g3656
(dp3700
g146
(lp3701
(g890
g890
tp3702
a(g889
g889
tp3703
a(g435
g435
tp3704
a(g474
g474
tp3705
a(g881
g881
tp3706
a(g900
g900
tp3707
asssg3656
(dp3708
g3685
(dp3709
g146
(lp3710
(g876
g876
tp3711
asssg3685
(dp3712
ssg157
g3698
sg158
(dp3713
sg160
g65
sg161
g3698
sg162
(dp3714
g3641
(dp3715
sg3656
(dp3716
g3641
g3700
ssg3685
(dp3717
g3656
g3709
sssbsg74
g3652
sg87
g167
sg95
g3652
sg96
g168
((lp3718
(lp3719
g171
ag168
((lp3720
(lp3721
g174
ag175
aa(lp3722
g177
ag178
aa(lp3723
g180
ag181
aa(lp3724
g183
ag184
aa(lp3725
g186
ag187
aa(lp3726
g189
ag190
aa(lp3727
g192
ag193
aatp3728
Rp3729
aa(lp3730
g197
ag168
((lp3731
(lp3732
g200
ag201
aa(lp3733
g203
ag204
aa(lp3734
g206
ag207
aa(lp3735
g209
ag210
aa(lp3736
g212
ag213
aa(lp3737
g215
ag216
aa(lp3738
g218
ag219
aa(lp3739
g221
ag222
aa(lp3740
g224
ag225
aa(lp3741
g227
ag228
aa(lp3742
g230
ag231
aa(lp3743
g233
ag234
aa(lp3744
g236
ag237
aa(lp3745
g239
ag240
aa(lp3746
g242
ag243
aa(lp3747
g245
ag246
aa(lp3748
g248
ag249
aa(lp3749
g251
ag252
aa(lp3750
g254
ag255
aa(lp3751
g257
ag258
aa(lp3752
g260
ag261
aa(lp3753
g263
ag264
aatp3754
Rp3755
aa(lp3756
g268
ag168
((lp3757
(lp3758
g271
ag272
aatp3759
Rp3760
aatp3761
Rp3762
sg100
Nsbg2362
tp3763
sS'centrality_outputs'
p3764
(g5
(g18
g7
Ntp3765
Rp3766
(dp3767
g22
(dp3768
sg24
g5
(g291
g7
Ntp3769
Rp3770
(dp3771
g29
g30
(g295
tp3772
Rp3773
(dp3774
g50
I00
sS'eig_list'
p3775
g39
sS'lfcd_list'
p3776
g39
sg302
S'def merge_lists(deg_list=[],eig_list=[],lfcd_list=[]):\n    merged_list = []\n    merged_list.extend(deg_list)\n    merged_list.extend(eig_list)\n    merged_list.extend(lfcd_list)\n\n    return merged_list\n'
p3777
sS'deg_list'
p3778
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp3779
g3778
ag3775
ag3776
asg82
I1
sg307
(dp3780
S'merged_list'
p3781
Nssg310
(lp3782
g3781
asbsg83
Nsg74
S'merge_node_0'
p3783
sg85
(dp3784
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3783
sg96
Nsg97
(lp3785
sg99
Nsg100
Nsbg3781
tp3786
sS'output_means.@falff_img_average'
p3787
(g5
(g18
g7
Ntp3788
Rp3789
(dp3790
g22
(dp3791
sg24
g5
(g291
g7
Ntp3792
Rp3793
(dp3794
g29
g30
(g295
tp3795
Rp3796
(dp3797
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p3798
sg632
S'falff_img'
p3799
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp3800
g47
ag632
asg82
I1
sg307
(dp3801
g636
Nssg310
(lp3802
g636
asbsg83
Nsg74
S'falff_img_mean_to_txt_0'
p3803
sg85
(dp3804
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3803
sg96
Nsg97
(lp3805
sg99
Nsg100
Nsbg636
tp3806
sS'functional_nuisance_residuals'
p3807
(g5
(g6
g7
Ntp3808
Rp3809
(dp3810
g11
g5
(g12
g7
Ntp3811
Rp3812
(dp3813
g16
(dp3814
g5
(g18
g7
Ntp3815
Rp3816
(dp3817
g22
(dp3818
sg24
g5
(g828
g7
Ntp3819
Rp3820
(dp3821
g832
I3
sg29
g30
(g833
tp3822
Rp3823
(dp3824
g50
I00
sg35
g36
sg837
I00
sS'in1'
p3825
g39
sS'in2'
p3826
g39
sS'in3'
p3827
g39
sg841
g842
sbsg82
I1
sg78
I1
sbsg83
Nsg74
S'ho_mni_to_2mm_ants_collect_linear_transforms'
p3828
sg85
(dp3829
sg87
S'nuisance_0'
p3830
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3828
sg96
Nsg97
(lp3831
sg99
Nsg100
Nsb(dp3832
sg5
(g18
g7
Ntp3833
Rp3834
(dp3835
g22
(dp3836
sg24
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p3837
g7
Ntp3838
Rp3839
(dp3840
g29
g30
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p3841
tp3842
Rp3843
(dp3844
S'rigid2D'
p3845
g39
sg35
g36
sS'in_matrix_file'
p3846
g39
sg1011
g39
sS'reference'
p3847
g39
sS'bgvalue'
p3848
g39
sS'padding_size'
p3849
g39
sS'sinc_window'
p3850
g39
sS'interp'
p3851
S'nearestneighbour'
p3852
sS'wmnorms'
p3853
g39
sS'cost'
p3854
g39
sS'no_resample'
p3855
g39
sS'sinc_width'
p3856
g39
sS'in_weight'
p3857
g39
sS'fieldmap'
p3858
g39
sS'echospacing'
p3859
g39
sS'ref_weight'
p3860
g39
sS'apply_isoxfm'
p3861
g39
sS'fieldmapmask'
p3862
g39
sg47
g39
sS'bbrtype'
p3863
g39
sS'no_clamp'
p3864
g39
sS'force_scaling'
p3865
g39
sS'pedir'
p3866
g39
sg50
I00
sS'display_init'
p3867
g39
sS'schedule'
p3868
g39
sg52
S'-applyisoxfm 2'
p3869
sS'uses_qform'
p3870
g39
sS'wmcoords'
p3871
g39
sg54
g55
sS'fine_search'
p3872
g39
sS'coarse_search'
p3873
g39
sS'angle_rep'
p3874
g39
sS'no_search'
p3875
g39
sS'apply_xfm'
p3876
g39
sS'wm_seg'
p3877
g39
sg60
g39
sS'bbrslope'
p3878
g39
sS'datatype'
p3879
g39
sS'save_log'
p3880
g39
sg62
g39
sS'out_matrix_file'
p3881
g39
sS'no_resample_blur'
p3882
g39
sS'min_sampling'
p3883
g39
sS'cost_func'
p3884
g39
sg63
g5
(g64
g65
(dp3885
g67
g68
stp3886
Rp3887
(dp3888
g72
S'environ_items'
p3889
sg74
g63
sbsS'searchr_x'
p3890
g39
sS'out_log'
p3891
g39
sg75
g68
sS'searchr_z'
p3892
g39
sS'bins'
p3893
g39
sS'searchr_y'
p3894
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'csf_anat_to_2mm_flirt_applyxfm'
p3895
sg85
(dp3896
sg87
g3830
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3895
sg96
Nsg97
(lp3897
sg99
Nsg100
Nsb(dp3898
sg5
(g18
g7
Ntp3899
Rp3900
(dp3901
g22
(dp3902
sg24
g5
(g106
g7
Ntp3903
Rp3904
(dp3905
g29
g30
(g110
tp3906
Rp3907
(dp3908
S'motion_components'
p3909
g39
sS'anat_to_mni_initial_xfm'
p3910
g39
sg1434
g39
sg1433
g39
sS'anat_to_mni_rigid_xfm'
p3911
g39
sS'compcor_ncomponents'
p3912
g39
sS'anat_to_mni_affine_xfm'
p3913
g39
sS'selector'
p3914
g39
sg1432
g39
sS'mni_to_anat_linear_xfm'
p3915
g39
sS'func_to_anat_linear_xfm'
p3916
g39
sS'template_brain'
p3917
g39
sS'lat_ventricles_mask'
p3918
S'/usr/share/fsl/5.0/data/atlases/HarvardOxford/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p3919
sg35
g36
sg2090
g39
sbsg117
(lp3920
g2090
ag1432
ag1434
ag1433
ag3915
ag3910
ag3911
ag3913
ag3916
ag3918
ag3909
ag3914
ag3912
ag3917
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp3921
sg87
g3830
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp3922
sg99
Nsg100
Nsb(dp3923
sg5
(g18
g7
Ntp3924
Rp3925
(dp3926
g22
(dp3927
sg24
g5
(g3837
g7
Ntp3928
Rp3929
(dp3930
g29
g30
(g3841
tp3931
Rp3932
(dp3933
g3845
g39
sg35
g36
sg3846
g39
sg1011
g39
sg3847
g39
sg3848
g39
sg3849
g39
sg3850
g39
sg3851
g39
sg3853
g39
sg3854
g39
sg3855
g39
sg3856
g39
sg3857
g39
sg3858
g39
sg3859
g39
sg3860
g39
sg3861
g39
sg3862
g39
sg47
g39
sg3863
g39
sg3864
g39
sg3865
g39
sg3866
g39
sg50
I00
sg3867
g39
sg3868
g39
sg52
g3869
sg3870
g39
sg3871
g39
sg54
g55
sg3872
g39
sg3873
g39
sg3874
g39
sg3875
g39
sg3876
g39
sg3877
g39
sg60
g39
sg3878
g39
sg3879
g39
sg3880
g39
sg62
g39
sg3881
g39
sg3882
g39
sg3883
g39
sg3884
g39
sg63
g5
(g64
g65
(dp3934
g67
g68
stp3935
Rp3936
(dp3937
g72
S'environ_items'
p3938
sg74
g63
sbsg3890
g39
sg3891
g39
sg75
g68
sg3892
g39
sg3893
g39
sg3894
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
F2.0
sbsg83
Nsg74
S'func_to_2mm_flirt_applyxfm'
p3939
sg85
(dp3940
sg87
g3830
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3939
sg96
Nsg97
(lp3941
sg99
Nsg100
Nsb(dp3942
sg5
(g18
g7
Ntp3943
Rp3944
(dp3945
g22
(dp3946
sg24
g5
(g867
g7
Ntp3947
Rp3948
(dp3949
g29
g30
(g871
tp3950
Rp3951
(dp3952
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g878
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp3953
g883
S'1'
p3954
stp3955
Rp3956
(dp3957
g72
S'environ_items'
p3958
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
I3
sg892
g5
(g893
g894
(lp3959
I01
aI01
aI01
atp3960
Rp3961
(dp3962
g72
S'invert_transform_flags_items'
p3963
sg74
g892
sbsg900
g901
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg902
I1
sbsg83
Nsg74
S'ho_mni_to_2mm_ants_applyxfm'
p3964
sg85
(dp3965
sg87
g3830
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3964
sg96
Nsg97
(lp3966
sg99
Nsg100
Nsb(dp3967
sg5
(g18
g7
Ntp3968
Rp3969
(dp3970
g22
(dp3971
sg24
g5
(g106
g7
Ntp3972
Rp3973
(dp3974
g29
g30
(g110
tp3975
Rp3976
(dp3977
g35
g36
sS'regressors'
p3978
g39
sg2090
g39
sbsg117
(lp3979
g2090
ag3978
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp3980
sg87
g3830
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp3981
sg99
Nsg100
Nsb(dp3982
sg5
(g18
g7
Ntp3983
Rp3984
(dp3985
g22
(dp3986
sg24
g5
(g291
g7
Ntp3987
Rp3988
(dp3989
g29
g30
(g295
tp3990
Rp3991
(dp3992
g50
I00
sg35
g36
sS'wm_sig_file'
p3993
g39
sg3912
g39
sg302
S'def calc_residuals(subject,\n                   selector,\n                   wm_sig_file = None,\n                   csf_sig_file = None,\n                   gm_sig_file = None,\n                   motion_file = None,\n                   compcor_ncomponents = 0):\n    """\n    Calculates residuals of nuisance regressors for every voxel for a subject.\n\n    Parameters\n    ----------\n    subject : string\n        Path of a subject\'s realigned nifti file.\n    selector : dictionary\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \n        are True/False.  See notes for an example.\n    wm_mask_file : string, optional\n        Path to subject\'s white matter mask (in the same space as the subject\'s functional file)\n    csf_mask_file : string, optional\n        Path to subject\'s cerebral spinal fluid mask (in the same space as the subject\'s functional file)\n    gm_mask_file : string, optional\n        Path to subject\'s grey matter mask (in the same space as the subject\'s functional file)\n    compcor_ncomponents : integer, optional\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\n\n    Returns\n    -------\n    residual_file : string\n        Path of residual file in nifti format\n    regressors_file : string\n        Path of csv file of regressors used.  Filename corresponds to the name of each\n        regressor in each column.\n\n    Notes\n    -----\n\n    Example of selector parameter:\n\n    >>> selector = {\'compcor\' : True,\n    >>> \'wm\' : True,\n    >>> \'csf\' : True,\n    >>> \'gm\' : True,\n    >>> \'global\' : True,\n    >>> \'pc1\' : True,\n    >>> \'motion\' : True,\n    >>> \'linear\' : True,\n    >>> \'quadratic\' : True}\n\n\n    """\n    import numpy as np\n    import nibabel as nb\n    import os\n    import scipy\n    from CPAC.nuisance import calc_compcor_components\n\n\n    nii = nb.load(subject)\n    data = nii.get_data().astype(np.float64)\n    global_mask = (data != 0).sum(-1) != 0\n\n\n    #Check and define regressors which are provided from files\n    if wm_sig_file is not None:\n        wm_sigs = np.load(wm_sig_file)\n        if wm_sigs.shape[1] != data.shape[3]:\n            raise ValueError(\'White matter signals length %d do not match data timepoints %d\' % (wm_sigs.shape[1], data.shape[3]))\n        if wm_sigs.size == 0:\n            raise ValueError(\'White matter signal file %s is empty\'%(wm_sig_file))\n    if csf_sig_file is not None:\n        csf_sigs = np.load(csf_sig_file)\n        if csf_sigs.shape[1] != data.shape[3]:\n            raise ValueError(\'CSF signals length %d do not match data timepoints %d\' % (csf_sigs.shape[1], data.shape[3]))\n        if csf_sigs.size == 0:\n            raise ValueError(\'CSF signal file %s is empty\'%(csf_sig_file))\n    if gm_sig_file is not None:\n        gm_sigs = np.load(gm_sig_file)\n        if gm_sigs.shape[1] != data.shape[3]:\n            raise ValueError(\'Grey matter signals length %d do not match data timepoints %d\' % (gm_sigs.shape[1], data.shape[3]))\n        if gm_sigs.size == 0:\n            raise ValueError(\'Grey matter signal file %s is empty\'%(gm_sig_file))\n    if motion_file is not None:\n        motion = np.genfromtxt(motion_file)\n        if motion.shape[0] != data.shape[3]:\n            raise ValueError(\'Motion parameters %d do not match data timepoints %d\' % (motion.shape[0], data.shape[3]) )\n        if motion.size == 0:\n            raise ValueError(\'Motion signal file %s is empty\'%(motion_file))\n\n    #Calculate regressors\n    regressor_map = {\'constant\' : np.ones((data.shape[3],1))}\n    if(selector[\'compcor\']):\n        print \'compcor_ncomponents \', compcor_ncomponents\n        regressor_map[\'compcor\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\n\n    if(selector[\'wm\']):\n        regressor_map[\'wm\'] = wm_sigs.mean(0)\n\n    if(selector[\'csf\']):\n        regressor_map[\'csf\'] = csf_sigs.mean(0)\n\n    if(selector[\'gm\']):\n        regressor_map[\'gm\'] = gm_sigs.mean(0)\n\n    if(selector[\'global\']):\n        regressor_map[\'global\'] = data[global_mask].mean(0)\n\n    if(selector[\'pc1\']):\n        bdata = data[global_mask].T\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\n        regressor_map[\'pc1\'] = U[:,0]\n\n    if(selector[\'motion\']):\n        regressor_map[\'motion\'] = motion\n\n    if(selector[\'linear\']):\n        regressor_map[\'linear\'] = np.arange(0, data.shape[3])\n\n    if(selector[\'quadratic\']):\n        regressor_map[\'quadratic\'] = np.arange(0, data.shape[3])**2\n\n    print \'Regressors include: \', regressor_map.keys()\n\n    X = np.zeros((data.shape[3], 1))\n    csv_filename = \'\'\n    for rname, rval in regressor_map.items():\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\n        csv_filename += \'_\' + rname\n    X = X[:,1:]\n\n    csv_filename = csv_filename[1:]\n    csv_filename += \'.csv\'\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\n    np.savetxt(csv_filename, X, delimiter=\'\\t\')\n\n    print \'Regressors dim: \', X.shape, \' starting regression\'\n\n    if np.isnan(X).any() or np.isnan(X).any():\n        raise ValueError(\'Regressor file contains NaN\')\n\n    Y = data[global_mask].T\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\n    Y_res = Y - X.dot(B)\n\n    data[global_mask] = Y_res.T\n\n    print \'Writing residual and regressors\'\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\n    residual_file = os.path.join(os.getcwd(), \'residual.nii.gz\')\n    img.to_filename(residual_file)\n\n    #Easier to read for debugging purposes\n    regressors_file = os.path.join(os.getcwd(), \'nuisance_regressors.mat\')\n\n    if scipy.__version__ == \'0.7.0\':\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\n    else:\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\'column\')   ### for scipy v0.12: OK\n\n    return residual_file, regressors_file\n'
p3994
sg3914
g39
sS'motion_file'
p3995
g39
sS'gm_sig_file'
p3996
g39
sS'csf_sig_file'
p3997
g39
sg2090
g39
sbsg78
I1
sg304
Nsg305
(lp3998
g2090
ag3914
ag3993
ag3997
ag3996
ag3995
ag3912
asg82
I1
sg307
(dp3999
S'regressors_file'
p4000
NsS'residual_file'
p4001
Nssg310
(lp4002
g4001
ag4000
asbsg83
Nsg74
S'residuals'
p4003
sg85
(dp4004
sg87
g3830
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
(lp4005
(g3914
(lp4006
(dp4007
S'motion'
p4008
I1
sS'pc1'
p4009
I0
sS'linear'
p4010
I1
sS'wm'
p4011
I0
sS'csf'
p4012
I1
sS'global'
p4013
I1
sS'quadratic'
p4014
I1
sS'gm'
p4015
I0
sS'compcor'
p4016
I1
sa(dp4017
S'motion'
p4018
I1
sS'pc1'
p4019
I0
sS'linear'
p4020
I1
sS'wm'
p4021
I0
sS'csf'
p4022
I1
sS'global'
p4023
I0
sS'quadratic'
p4024
I1
sS'gm'
p4025
I0
sS'compcor'
p4026
I1
satp4027
a(g3912
(lp4028
I5
atp4029
asg94
I00
sg95
g4003
sg96
Nsg97
(lp4030
sg99
Nsg100
Nsb(dp4031
sg5
(g18
g7
Ntp4032
Rp4033
(dp4034
g22
(dp4035
sg24
g5
(g3837
g7
Ntp4036
Rp4037
(dp4038
g29
g30
(g3841
tp4039
Rp4040
(dp4041
g3845
g39
sg35
g36
sg3846
g39
sg1011
g39
sg3847
g39
sg3848
g39
sg3849
g39
sg3850
g39
sg3851
g3852
sg3853
g39
sg3854
g39
sg3855
g39
sg3856
g39
sg3857
g39
sg3858
g39
sg3859
g39
sg3860
g39
sg3861
g39
sg3862
g39
sg47
g39
sg3863
g39
sg3864
g39
sg3865
g39
sg3866
g39
sg50
I00
sg3867
g39
sg3868
g39
sg52
g3869
sg3870
g39
sg3871
g39
sg54
g55
sg3872
g39
sg3873
g39
sg3874
g39
sg3875
g39
sg3876
g39
sg3877
g39
sg60
g39
sg3878
g39
sg3879
g39
sg3880
g39
sg62
g39
sg3881
g39
sg3882
g39
sg3883
g39
sg3884
g39
sg63
g5
(g64
g65
(dp4042
g67
g68
stp4043
Rp4044
(dp4045
g72
S'environ_items'
p4046
sg74
g63
sbsg3890
g39
sg3891
g39
sg75
g68
sg3892
g39
sg3893
g39
sg3894
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'wm_anat_to_2mm_flirt_applyxfm'
p4047
sg85
(dp4048
sg87
g3830
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g4047
sg96
Nsg97
(lp4049
sg99
Nsg100
Nsb(dp4050
sg5
(g18
g7
Ntp4051
Rp4052
(dp4053
g22
(dp4054
sg24
g5
(g3837
g7
Ntp4055
Rp4056
(dp4057
g29
g30
(g3841
tp4058
Rp4059
(dp4060
g3845
g39
sg35
g36
sg3846
g39
sg1011
g39
sg3847
g39
sg3848
g39
sg3849
g39
sg3850
g39
sg3851
g3852
sg3853
g39
sg3854
g39
sg3855
g39
sg3856
g39
sg3857
g39
sg3858
g39
sg3859
g39
sg3860
g39
sg3861
g39
sg3862
g39
sg47
g39
sg3863
g39
sg3864
g39
sg3865
g39
sg3866
g39
sg50
I00
sg3867
g39
sg3868
g39
sg52
g3869
sg3870
g39
sg3871
g39
sg54
g55
sg3872
g39
sg3873
g39
sg3874
g39
sg3875
g39
sg3876
g39
sg3877
g39
sg60
g39
sg3878
g39
sg3879
g39
sg3880
g39
sg62
g39
sg3881
g39
sg3882
g39
sg3883
g39
sg3884
g39
sg63
g5
(g64
g65
(dp4061
g67
g68
stp4062
Rp4063
(dp4064
g72
S'environ_items'
p4065
sg74
g63
sbsg3890
g39
sg3891
g39
sg75
g68
sg3892
g39
sg3893
g39
sg3894
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'gm_anat_to_2mm_flirt_applyxfm'
p4066
sg85
(dp4067
sg87
g3830
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g4066
sg96
Nsg97
(lp4068
sg99
Nsg100
Nsb(dp4069
sg5
(g18
g7
Ntp4070
Rp4071
(dp4072
g22
(dp4073
sg24
g5
(g291
g7
Ntp4074
Rp4075
(dp4076
g29
g30
(g295
tp4077
Rp4078
(dp4079
g50
I00
sg35
g36
sS'data_file'
p4080
g39
sg302
S"def extract_tissue_data(data_file,\n                        ventricles_mask_file,\n                        wm_seg_file, csf_seg_file, gm_seg_file):\n    import numpy as np\n    import nibabel as nb\n    import os    \n    from CPAC.nuisance import erode_mask\n    from CPAC.utils import safe_shape\n\n    try:\n        data = nb.load(data_file).get_data().astype('float64')\n    except:\n        raise MemoryError('Unable to load %s' % data_file)\n\n\n    try:\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype('float64')\n    except:\n        raise MemoryError('Unable to load %s' % lat_ventricles_mask)\n\n\n    if not safe_shape(data, lat_ventricles_mask):\n        raise ValueError('Spatial dimensions for data and the lateral ventricles mask do not match')\n\n    try:\n        wm_seg = nb.load(wm_seg_file).get_data().astype('float64')\n    except:\n        raise MemoryError('Unable to load %s' % wm_seg)\n\n\n    if not safe_shape(data, wm_seg):\n        raise ValueError('Spatial dimensions for data, white matter segment do not match')\n\n    wm_mask = erode_mask(wm_seg > 0)\n    wm_sigs = data[wm_mask]\n    file_wm = os.path.join(os.getcwd(), 'wm_signals.npy')\n    np.save(file_wm, wm_sigs)\n    del wm_sigs\n\n    try:\n        csf_seg = nb.load(csf_seg_file).get_data().astype('float64')\n    except:\n        raise MemoryError('Unable to load %s' % csf_seg)\n\n\n    if not safe_shape(data, csf_seg):\n        raise ValueError('Spatial dimensions for data, cerebral spinal fluid segment do not match')\n\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\n    # Oxford parcellation regions 4 and 43\n    csf_mask = (csf_seg > 0)*(lat_ventricles_mask==1)\n    csf_sigs = data[csf_mask]\n    file_csf = os.path.join(os.getcwd(), 'csf_signals.npy')\n    np.save(file_csf, csf_sigs)\n    del csf_sigs\n\n\n    try:\n        gm_seg = nb.load(gm_seg_file).get_data().astype('float64')\n    except:\n        raise MemoryError('Unable to load %s' % gm_seg)\n\n\n    if not safe_shape(data, gm_seg):\n        raise ValueError('Spatial dimensions for data, gray matter segment do not match')\n\n\n    gm_mask = erode_mask(gm_seg > 0)\n    gm_sigs = data[gm_mask]\n    file_gm = os.path.join(os.getcwd(), 'gm_signals.npy')\n    np.save(file_gm, gm_sigs)\n    del gm_sigs\n\n\n\n    nii = nb.load(wm_seg_file)\n    wm_mask_file = os.path.join(os.getcwd(), 'wm_mask.nii.gz')\n    csf_mask_file = os.path.join(os.getcwd(), 'csf_mask.nii.gz')\n    gm_mask_file = os.path.join(os.getcwd(), 'gm_mask.nii.gz')\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\n\n    return file_wm, file_csf, file_gm\n"
p4081
sS'gm_seg_file'
p4082
g39
sS'ventricles_mask_file'
p4083
g39
sS'csf_seg_file'
p4084
g39
sS'wm_seg_file'
p4085
g39
sbsg78
I1
sg304
Nsg305
(lp4086
g4080
ag4083
ag4085
ag4084
ag4082
asg82
F3.0
sg307
(dp4087
S'file_gm'
p4088
NsS'file_wm'
p4089
NsS'file_csf'
p4090
Nssg310
(lp4091
g4089
ag4090
ag4088
asbsg83
Nsg74
S'tissue_masks'
p4092
sg85
(dp4093
sg87
g3830
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g4092
sg96
Nsg97
(lp4094
sg99
Nsg100
Nsb(dp4095
ssg140
g65
sg141
g65
sg142
(dp4096
g3816
(dp4097
g3944
(dp4098
g146
(lp4099
(g931
g435
tp4100
asssg3834
(dp4101
g3944
(dp4102
g146
(lp4103
(g60
g889
tp4104
assg4071
(dp4105
g146
(lp4106
(g60
g4084
tp4107
asssg3900
(dp4108
g3816
(dp4109
g146
(lp4110
(g3910
g915
tp4111
a(g3911
g917
tp4112
a(g3913
g919
tp4113
assg3834
(dp4114
g146
(lp4115
(g1434
g47
tp4116
a(g1434
g3847
tp4117
assg4052
(dp4118
g146
(lp4119
(g1433
g47
tp4120
a(g1433
g3847
tp4121
assg3925
(dp4122
g146
(lp4123
(g2090
g47
tp4124
a(g1434
g3847
tp4125
a(g3916
g3846
tp4126
assg3944
(dp4127
g146
(lp4128
(g3918
g890
tp4129
assg3984
(dp4130
g146
(lp4131
(g2090
g2090
tp4132
a(g3909
g3995
tp4133
a(g3914
g3914
tp4134
a(g3912
g3912
tp4135
assg4033
(dp4136
g146
(lp4137
(g1432
g47
tp4138
a(g1432
g3847
tp4139
asssg3925
(dp4140
g4071
(dp4141
g146
(lp4142
(g60
g4080
tp4143
asssg3944
(dp4144
g4071
(dp4145
g146
(lp4146
(g876
g4083
tp4147
asssg3969
(dp4148
sg3984
(dp4149
g3969
(dp4150
g146
(lp4151
(g4001
g2090
tp4152
a(g4000
g3978
tp4153
asssg4033
(dp4154
g4071
(dp4155
g146
(lp4156
(g60
g4085
tp4157
asssg4052
(dp4158
g4071
(dp4159
g146
(lp4160
(g60
g4082
tp4161
asssg4071
(dp4162
g3984
(dp4163
g146
(lp4164
(g4089
g3993
tp4165
a(g4090
g3997
tp4166
a(g4088
g3996
tp4167
assssg157
g4096
sg158
(dp4168
sg160
g65
sg161
g4096
sg162
(dp4169
g3816
(dp4170
g3900
g4109
ssg3834
(dp4171
g3900
g4114
ssg3900
(dp4172
sg3925
(dp4173
g3900
g4122
ssg3944
(dp4174
g3816
g4098
sg3834
g4102
sg3900
g4127
ssg3969
(dp4175
g3984
g4150
ssg3984
(dp4176
g3900
g4130
sg4071
g4163
ssg4033
(dp4177
g3900
g4136
ssg4052
(dp4178
g3900
g4118
ssg4071
(dp4179
g3925
g4141
sg3944
g4145
sg3834
g4105
sg4052
g4159
sg4033
g4155
sssbsg74
g3830
sg87
g167
sg95
g3830
sg96
g168
((lp4180
(lp4181
g171
ag168
((lp4182
(lp4183
g174
ag175
aa(lp4184
g177
ag178
aa(lp4185
g180
ag181
aa(lp4186
g183
ag184
aa(lp4187
g186
ag187
aa(lp4188
g189
ag190
aa(lp4189
g192
ag193
aatp4190
Rp4191
aa(lp4192
g197
ag168
((lp4193
(lp4194
g200
ag201
aa(lp4195
g203
ag204
aa(lp4196
g206
ag207
aa(lp4197
g209
ag210
aa(lp4198
g212
ag213
aa(lp4199
g215
ag216
aa(lp4200
g218
ag219
aa(lp4201
g221
ag222
aa(lp4202
g224
ag225
aa(lp4203
g227
ag228
aa(lp4204
g230
ag231
aa(lp4205
g233
ag234
aa(lp4206
g236
ag237
aa(lp4207
g239
ag240
aa(lp4208
g242
ag243
aa(lp4209
g245
ag246
aa(lp4210
g248
ag249
aa(lp4211
g251
ag252
aa(lp4212
g254
ag255
aa(lp4213
g257
ag258
aa(lp4214
g260
ag261
aa(lp4215
g263
ag264
aatp4216
Rp4217
aa(lp4218
g268
ag168
((lp4219
(lp4220
g271
ag272
aatp4221
Rp4222
aatp4223
Rp4224
sg100
NsbS'outputspec.subject'
p4225
tp4226
sS'mean_functional_to_standard'
p4227
(g5
(g6
g7
Ntp4228
Rp4229
(dp4230
g11
g5
(g12
g7
Ntp4231
Rp4232
(dp4233
g16
(dp4234
g5
(g18
g7
Ntp4235
Rp4236
(dp4237
g22
(dp4238
sg24
g5
(g106
g7
Ntp4239
Rp4240
(dp4241
g29
g30
(g110
tp4242
Rp4243
(dp4244
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp4245
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp4246
sg87
S'apply_ants_warp_mean_functional_to_standard_0'
p4247
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp4248
sg99
Nsg100
Nsb(dp4249
sg5
(g18
g7
Ntp4250
Rp4251
(dp4252
g22
(dp4253
sg24
g5
(g867
g7
Ntp4254
Rp4255
(dp4256
g29
g30
(g871
tp4257
Rp4258
(dp4259
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp4260
g883
S'1'
p4261
stp4262
Rp4263
(dp4264
g72
S'environ_items'
p4265
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp4266
sg87
g4247
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp4267
sg99
Nsg100
Nsb(dp4268
sg5
(g18
g7
Ntp4269
Rp4270
(dp4271
g22
(dp4272
sg24
g5
(g106
g7
Ntp4273
Rp4274
(dp4275
g29
g30
(g110
tp4276
Rp4277
(dp4278
g35
g36
sg876
g39
sbsg117
(lp4279
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp4280
sg87
g4247
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp4281
sg99
Nsg100
Nsb(dp4282
ssg140
g65
sg141
g65
sg142
(dp4283
g4236
(dp4284
g4251
(dp4285
g146
(lp4286
(g890
g890
tp4287
a(g889
g889
tp4288
a(g435
g435
tp4289
a(g474
g474
tp4290
a(g881
g881
tp4291
a(g900
g900
tp4292
asssg4251
(dp4293
g4270
(dp4294
g146
(lp4295
(g876
g876
tp4296
asssg4270
(dp4297
ssg157
g4283
sg158
(dp4298
sg160
g65
sg161
g4283
sg162
(dp4299
g4236
(dp4300
sg4251
(dp4301
g4236
g4285
ssg4270
(dp4302
g4251
g4294
sssbsg74
g4247
sg87
g167
sg95
g4247
sg96
g168
((lp4303
(lp4304
g171
ag168
((lp4305
(lp4306
g174
ag175
aa(lp4307
g177
ag178
aa(lp4308
g180
ag181
aa(lp4309
g183
ag184
aa(lp4310
g186
ag187
aa(lp4311
g189
ag190
aa(lp4312
g192
ag193
aatp4313
Rp4314
aa(lp4315
g197
ag168
((lp4316
(lp4317
g200
ag201
aa(lp4318
g203
ag204
aa(lp4319
g206
ag207
aa(lp4320
g209
ag210
aa(lp4321
g212
ag213
aa(lp4322
g215
ag216
aa(lp4323
g218
ag219
aa(lp4324
g221
ag222
aa(lp4325
g224
ag225
aa(lp4326
g227
ag228
aa(lp4327
g230
ag231
aa(lp4328
g233
ag234
aa(lp4329
g236
ag237
aa(lp4330
g239
ag240
aa(lp4331
g242
ag243
aa(lp4332
g245
ag246
aa(lp4333
g248
ag249
aa(lp4334
g251
ag252
aa(lp4335
g254
ag255
aa(lp4336
g257
ag258
aa(lp4337
g260
ag261
aa(lp4338
g263
ag264
aatp4339
Rp4340
aa(lp4341
g268
ag168
((lp4342
(lp4343
g271
ag272
aatp4344
Rp4345
aatp4346
Rp4347
sg100
Nsbg3292
tp4348
sS'seg_mixeltype'
p4349
(g763
S'outputspec.mixeltype'
p4350
tp4351
sS'motion_correct_to_standard'
p4352
(g5
(g6
g7
Ntp4353
Rp4354
(dp4355
g11
g5
(g12
g7
Ntp4356
Rp4357
(dp4358
g16
(dp4359
g5
(g18
g7
Ntp4360
Rp4361
(dp4362
g22
(dp4363
sg24
g5
(g106
g7
Ntp4364
Rp4365
(dp4366
g29
g30
(g110
tp4367
Rp4368
(dp4369
g35
g36
sg881
I3
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp4370
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp4371
sg87
S'apply_ants_warp_motion_correct_to_standard_0'
p4372
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp4373
sg99
Nsg100
Nsb(dp4374
sg5
(g18
g7
Ntp4375
Rp4376
(dp4377
g22
(dp4378
sg24
g5
(g867
g7
Ntp4379
Rp4380
(dp4381
g29
g30
(g871
tp4382
Rp4383
(dp4384
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp4385
g883
S'1'
p4386
stp4387
Rp4388
(dp4389
g72
S'environ_items'
p4390
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp4391
sg87
g4372
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp4392
sg99
Nsg100
Nsb(dp4393
sg5
(g18
g7
Ntp4394
Rp4395
(dp4396
g22
(dp4397
sg24
g5
(g106
g7
Ntp4398
Rp4399
(dp4400
g29
g30
(g110
tp4401
Rp4402
(dp4403
g35
g36
sg876
g39
sbsg117
(lp4404
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp4405
sg87
g4372
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp4406
sg99
Nsg100
Nsb(dp4407
ssg140
g65
sg141
g65
sg142
(dp4408
g4361
(dp4409
g4376
(dp4410
g146
(lp4411
(g890
g890
tp4412
a(g889
g889
tp4413
a(g435
g435
tp4414
a(g474
g474
tp4415
a(g881
g881
tp4416
a(g900
g900
tp4417
asssg4376
(dp4418
g4395
(dp4419
g146
(lp4420
(g876
g876
tp4421
asssg4395
(dp4422
ssg157
g4408
sg158
(dp4423
sg160
g65
sg161
g4408
sg162
(dp4424
g4361
(dp4425
sg4376
(dp4426
g4361
g4410
ssg4395
(dp4427
g4376
g4419
sssbsg74
g4372
sg87
g167
sg95
g4372
sg96
g168
((lp4428
(lp4429
g171
ag168
((lp4430
(lp4431
g174
ag175
aa(lp4432
g177
ag178
aa(lp4433
g180
ag181
aa(lp4434
g183
ag184
aa(lp4435
g186
ag187
aa(lp4436
g189
ag190
aa(lp4437
g192
ag193
aatp4438
Rp4439
aa(lp4440
g197
ag168
((lp4441
(lp4442
g200
ag201
aa(lp4443
g203
ag204
aa(lp4444
g206
ag207
aa(lp4445
g209
ag210
aa(lp4446
g212
ag213
aa(lp4447
g215
ag216
aa(lp4448
g218
ag219
aa(lp4449
g221
ag222
aa(lp4450
g224
ag225
aa(lp4451
g227
ag228
aa(lp4452
g230
ag231
aa(lp4453
g233
ag234
aa(lp4454
g236
ag237
aa(lp4455
g239
ag240
aa(lp4456
g242
ag243
aa(lp4457
g245
ag246
aa(lp4458
g248
ag249
aa(lp4459
g251
ag252
aa(lp4460
g254
ag255
aa(lp4461
g257
ag258
aa(lp4462
g260
ag261
aa(lp4463
g263
ag264
aatp4464
Rp4465
aa(lp4466
g268
ag168
((lp4467
(lp4468
g271
ag272
aatp4469
Rp4470
aatp4471
Rp4472
sg100
Nsbg3292
tp4473
sg2438
(g1570
S'outputspec.example_func'
p4474
tp4475
sS'functional_preprocessed_mask'
p4476
(g1570
S'outputspec.preprocessed_mask'
p4477
tp4478
sS'ants_symmetric_initial_xfm'
p4479
(g5
(g6
g7
Ntp4480
Rp4481
(dp4482
g11
g5
(g12
g7
Ntp4483
Rp4484
(dp4485
g16
(dp4486
g5
(g18
g7
Ntp4487
Rp4488
(dp4489
g22
(dp4490
sg24
g5
(g106
g7
Ntp4491
Rp4492
(dp4493
g29
g30
(g110
tp4494
Rp4495
(dp4496
g35
g36
sg428
(lp4497
I10
aI10
aI15
asg430
F0.01
sg431
(lp4498
g433
ag433
ag434
asg329
g39
sg435
(lp4499
g351
ag301
ag437
asg438
g39
sg439
(lp4500
I1
aI1
aI1
asg327
g39
sg441
(lp4501
F1e-08
aF1e-08
aF1e-09
asg443
(lp4502
g445
ag445
aNasg446
(lp4503
(lp4504
I8
aI4
aI2
aI1
aa(lp4505
I8
aI4
aI2
aI1
aa(lp4506
I6
aI4
aI2
aI1
aasg451
F0.99
sg331
S'/usr/share/fsl/5.0/data/standard/MNI152_T1_2mm_brain_symmetric.nii.gz'
p4507
sg453
(lp4508
(lp4509
I3
aI2
aI1
aI0
aa(lp4510
I3
aI2
aI1
aI0
aa(lp4511
I3
aI2
aI1
aI0
aasg458
(lp4512
(lp4513
I1000
aI500
aI250
aI100
aa(lp4514
I1000
aI500
aI250
aI100
aa(lp4515
I100
aI100
aI70
aI20
aasg463
(lp4516
I32
aI32
aI4
asg330
S'/usr/share/fsl/5.0/data/standard/MNI152_T1_2mm_symmetric.nii.gz'
p4517
sg466
(lp4518
F0.25
aF0.25
aNasg468
I01
sg469
(lp4519
(lp4520
F0.1
aa(lp4521
F0.1
aa(lp4522
F0.1
aI3
aI0
aasg474
I3
sbsg117
(lp4523
g329
ag331
ag474
ag468
ag430
ag451
ag431
ag439
ag463
ag443
ag466
ag458
ag441
ag428
ag435
ag469
ag446
ag453
ag438
ag327
ag330
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp4524
sg87
S'anat_symmetric_mni_ants_register_0'
p4525
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp4526
sg99
Nsg100
Nsb(dp4527
sg5
(g18
g7
Ntp4528
Rp4529
(dp4530
g22
(dp4531
sg24
g5
(g291
g7
Ntp4532
Rp4533
(dp4534
g29
g30
(g295
tp4535
Rp4536
(dp4537
g299
g39
sg50
I00
sg300
g351
sg302
S'def seperate_warps_list(warp_list, selection):\n\n    for warp in warp_list:\n\n        if selection in warp:\n\n            selected_warp = warp\n\n    return selected_warp\n'
p4538
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp4539
g299
ag300
asg82
I1
sg307
(dp4540
g309
Nssg310
(lp4541
g309
asbsg83
Nsg74
g356
sg85
(dp4542
sg87
g4525
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g356
sg96
Nsg97
(lp4543
sg99
Nsg100
Nsb(dp4544
sg5
(g18
g7
Ntp4545
Rp4546
(dp4547
g22
(dp4548
sg24
g5
(g291
g7
Ntp4549
Rp4550
(dp4551
g29
g30
(g295
tp4552
Rp4553
(dp4554
g299
g39
sg50
I00
sg300
g489
sg302
S'def seperate_warps_list(warp_list, selection):\n\n    for warp in warp_list:\n\n        if selection in warp:\n\n            selected_warp = warp\n\n    return selected_warp\n'
p4555
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp4556
g299
ag300
asg82
I1
sg307
(dp4557
g309
Nssg310
(lp4558
g309
asbsg83
Nsg74
g494
sg85
(dp4559
sg87
g4525
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g494
sg96
Nsg97
(lp4560
sg99
Nsg100
Nsb(dp4561
sg5
(g18
g7
Ntp4562
Rp4563
(dp4564
g22
(dp4565
sg24
g5
(g291
g7
Ntp4566
Rp4567
(dp4568
g29
g30
(g295
tp4569
Rp4570
(dp4571
g299
g39
sg50
I00
sg300
g409
sg302
S'def seperate_warps_list(warp_list, selection):\n\n    for warp in warp_list:\n\n        if selection in warp:\n\n            selected_warp = warp\n\n    return selected_warp\n'
p4572
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp4573
g299
ag300
asg82
I1
sg307
(dp4574
g309
Nssg310
(lp4575
g309
asbsg83
Nsg74
g414
sg85
(dp4576
sg87
g4525
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g414
sg96
Nsg97
(lp4577
sg99
Nsg100
Nsb(dp4578
sg5
(g18
g7
Ntp4579
Rp4580
(dp4581
g22
(dp4582
sg24
g5
(g291
g7
Ntp4583
Rp4584
(dp4585
g29
g30
(g295
tp4586
Rp4587
(dp4588
g50
I00
sg35
g36
sg327
g39
sg302
S'def hardcoded_reg(anatomical_brain, reference_brain, anatomical_skull, reference_skull): #, wait=""):\n\n    import os\n\n    os.system("antsRegistration --collapse-output-transforms 0 --dimensionality 3 --initial-moving-transform [ %s, %s, 0 ] --interpolation Linear --output [ transform, transform_Warped.nii.gz ] --transform Rigid[ 0.1 ] --metric MI[ %s, %s, 1, 32, Regular, 0.25 ] --convergence [ 1000x500x250x100, 1e-08, 10 ] --smoothing-sigmas 3.0x2.0x1.0x0.0 --shrink-factors 8x4x2x1 --use-histogram-matching 1 --transform Affine[ 0.1 ] --metric MI[ %s, %s, 1, 32, Regular, 0.25 ] --convergence [ 1000x500x250x100, 1e-08, 10 ] --smoothing-sigmas 3.0x2.0x1.0x0.0 --shrink-factors 8x4x2x1 --use-histogram-matching 1 --transform SyN[ 0.1, 3.0, 0.0 ] --metric CC[ %s, %s, 1, 4 ] --convergence [ 100x100x70x20, 1e-09, 15 ] --smoothing-sigmas 3.0x2.0x1.0x0.0 --shrink-factors 6x4x2x1 --use-histogram-matching 1 --winsorize-image-intensities [ 0.01, 0.99 ]" % (reference_brain, anatomical_brain, reference_brain, anatomical_brain, reference_brain, anatomical_brain, reference_skull, anatomical_skull))\n\n    warp_list = []\n\n    files = [f for f in os.listdir(\'.\') if os.path.isfile(f)]\n\n    for f in files:\n\n        if ("transform" in f) and ("Warped" not in f):\n            warp_list.append(os.getcwd() + "/" + f)\n\n        if "Warped" in f:\n            warped_image = os.getcwd() + "/" + f\n\n    #print wait\n\n    return warp_list, warped_image\n'
p4589
sg329
g39
sg330
g39
sg331
g39
sg332
g39
sbsg78
I1
sg304
Nsg305
(lp4590
g329
ag331
ag327
ag330
ag332
asg82
I1
sg307
(dp4591
g299
Nsg335
Nssg310
(lp4592
g299
ag335
asbsg83
Nsg74
g337
sg85
(dp4593
sg87
g4525
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g337
sg96
Nsg97
(lp4594
sg99
Nsg100
Nsb(dp4595
sg5
(g18
g7
Ntp4596
Rp4597
(dp4598
g22
(dp4599
sg24
g5
(g106
g7
Ntp4600
Rp4601
(dp4602
g29
g30
(g110
tp4603
Rp4604
(dp4605
g35
g36
sg370
g39
sg279
g39
sg371
g39
sg372
g39
sg373
g39
sg374
g39
sg375
g39
sg332
g39
sbsg117
(lp4606
g279
ag371
ag372
ag375
ag373
ag374
ag332
ag370
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp4607
sg87
g4525
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp4608
sg99
Nsg100
Nsb(dp4609
sg5
(g18
g7
Ntp4610
Rp4611
(dp4612
g22
(dp4613
sg24
g5
(g291
g7
Ntp4614
Rp4615
(dp4616
g29
g30
(g295
tp4617
Rp4618
(dp4619
g299
g39
sg50
I00
sg300
g390
sg302
S'def seperate_warps_list(warp_list, selection):\n\n    for warp in warp_list:\n\n        if selection in warp:\n\n            selected_warp = warp\n\n    return selected_warp\n'
p4620
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp4621
g299
ag300
asg82
I1
sg307
(dp4622
g309
Nssg310
(lp4623
g309
asbsg83
Nsg74
g395
sg85
(dp4624
sg87
g4525
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g395
sg96
Nsg97
(lp4625
sg99
Nsg100
Nsb(dp4626
sg5
(g18
g7
Ntp4627
Rp4628
(dp4629
g22
(dp4630
sg24
g5
(g291
g7
Ntp4631
Rp4632
(dp4633
g29
g30
(g295
tp4634
Rp4635
(dp4636
g299
g39
sg50
I00
sg300
g301
sg302
S'def seperate_warps_list(warp_list, selection):\n\n    for warp in warp_list:\n\n        if selection in warp:\n\n            selected_warp = warp\n\n    return selected_warp\n'
p4637
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp4638
g299
ag300
asg82
I1
sg307
(dp4639
g309
Nssg310
(lp4640
g309
asbsg83
Nsg74
g312
sg85
(dp4641
sg87
g4525
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g312
sg96
Nsg97
(lp4642
sg99
Nsg100
Nsb(dp4643
ssg140
g65
sg141
g65
sg142
(dp4644
g4488
(dp4645
g4580
(dp4646
g146
(lp4647
(g329
g329
tp4648
a(g327
g327
tp4649
a(g331
g331
tp4650
a(g330
g330
tp4651
a(g474
g474
tp4652
a(g468
g468
tp4653
a(g430
g430
tp4654
a(g451
g451
tp4655
a(g431
g431
tp4656
a(g439
g439
tp4657
a(g463
g463
tp4658
a(g443
g443
tp4659
a(g466
g466
tp4660
a(g458
g458
tp4661
a(g441
g441
tp4662
a(g428
g428
tp4663
a(g435
g435
tp4664
a(g469
g469
tp4665
a(g446
g446
tp4666
a(g453
g453
tp4667
a(g438
g438
tp4668
asssg4529
(dp4669
g4597
(dp4670
g146
(lp4671
(g309
g371
tp4672
asssg4546
(dp4673
g4597
(dp4674
g146
(lp4675
(g309
g375
tp4676
asssg4563
(dp4677
g4597
(dp4678
g146
(lp4679
(g309
g279
tp4680
asssg4580
(dp4681
g4529
(dp4682
g146
(lp4683
(g299
g299
tp4684
assg4563
(dp4685
g146
(lp4686
(g299
g299
tp4687
assg4546
(dp4688
g146
(lp4689
(g299
g299
tp4690
assg4597
(dp4691
g146
(lp4692
(g335
g370
tp4693
assg4611
(dp4694
g146
(lp4695
(g299
g299
tp4696
assg4628
(dp4697
g146
(lp4698
(g299
g299
tp4699
asssg4597
(dp4700
sg4611
(dp4701
g4597
(dp4702
g146
(lp4703
(g309
g373
tp4704
asssg4628
(dp4705
g4597
(dp4706
g146
(lp4707
(g309
g372
tp4708
assssg157
g4644
sg158
(dp4709
sg160
g65
sg161
g4644
sg162
(dp4710
g4488
(dp4711
sg4529
(dp4712
g4580
g4682
ssg4546
(dp4713
g4580
g4688
ssg4563
(dp4714
g4580
g4685
ssg4580
(dp4715
g4488
g4646
ssg4597
(dp4716
g4529
g4670
sg4563
g4678
sg4546
g4674
sg4580
g4691
sg4611
g4702
sg4628
g4706
ssg4611
(dp4717
g4580
g4694
ssg4628
(dp4718
g4580
g4697
sssbsg74
g4525
sg87
g167
sg95
g4525
sg96
g168
((lp4719
(lp4720
g171
ag168
((lp4721
(lp4722
g174
ag175
aa(lp4723
g177
ag178
aa(lp4724
g180
ag181
aa(lp4725
g183
ag184
aa(lp4726
g186
ag187
aa(lp4727
g189
ag190
aa(lp4728
g192
ag193
aatp4729
Rp4730
aa(lp4731
g197
ag168
((lp4732
(lp4733
g200
ag201
aa(lp4734
g203
ag204
aa(lp4735
g206
ag207
aa(lp4736
g209
ag210
aa(lp4737
g212
ag213
aa(lp4738
g215
ag216
aa(lp4739
g218
ag219
aa(lp4740
g221
ag222
aa(lp4741
g224
ag225
aa(lp4742
g227
ag228
aa(lp4743
g230
ag231
aa(lp4744
g233
ag234
aa(lp4745
g236
ag237
aa(lp4746
g239
ag240
aa(lp4747
g242
ag243
aa(lp4748
g245
ag246
aa(lp4749
g248
ag249
aa(lp4750
g251
ag252
aa(lp4751
g254
ag255
aa(lp4752
g257
ag258
aa(lp4753
g260
ag261
aa(lp4754
g263
ag264
aatp4755
Rp4756
aa(lp4757
g268
ag168
((lp4758
(lp4759
g271
ag272
aatp4760
Rp4761
aatp4762
Rp4763
sg100
Nsbg618
tp4764
sS'centrality_outputs_smoothed_zstd'
p4765
(g5
(g2365
g7
Ntp4766
Rp4767
(dp4768
g2369
I00
sg22
(dp4769
sg24
g5
(g801
g7
Ntp4770
Rp4771
(dp4772
g29
g30
(g805
tp4773
Rp4774
(dp4775
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp4776
g67
g68
stp4777
Rp4778
(dp4779
g72
S'environ_items'
p4780
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g5
(g893
g894
(lp4781
S'/cpac_resources/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz'
p4782
atp4783
Rp4784
(dp4785
g72
S'operand_files_items'
p4786
sg74
g819
sbsbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp4787
Rp4788
(dp4789
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp4790
g67
g68
stp4791
Rp4792
(dp4793
g72
S'environ_items'
p4794
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g5
(g893
g894
(lp4795
g4782
atp4796
Rp4797
(dp4798
g72
S'operand_files_items'
p4799
sg74
g819
sbsbsg74
S'network_centrality_zstd_smooth_0'
p4800
sg85
(dp4801
sg2388
I00
sg87
g167
sg2389
(lp4802
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g4800
sg96
Nsg97
(lp4803
sg99
Nsg100
Nsbg60
tp4804
sS'dr_tempreg_maps_stack_to_standard'
p4805
(g5
(g6
g7
Ntp4806
Rp4807
(dp4808
g11
g5
(g12
g7
Ntp4809
Rp4810
(dp4811
g16
(dp4812
g5
(g18
g7
Ntp4813
Rp4814
(dp4815
g22
(dp4816
sg24
g5
(g106
g7
Ntp4817
Rp4818
(dp4819
g29
g30
(g110
tp4820
Rp4821
(dp4822
g35
g36
sg881
I3
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp4823
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp4824
sg87
S'dr_tempreg_maps_stack_to_standard_0'
p4825
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp4826
sg99
Nsg100
Nsb(dp4827
sg5
(g18
g7
Ntp4828
Rp4829
(dp4830
g22
(dp4831
sg24
g5
(g106
g7
Ntp4832
Rp4833
(dp4834
g29
g30
(g110
tp4835
Rp4836
(dp4837
g35
g36
sg876
g39
sbsg117
(lp4838
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp4839
sg87
g4825
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp4840
sg99
Nsg100
Nsb(dp4841
sg5
(g18
g7
Ntp4842
Rp4843
(dp4844
g22
(dp4845
sg24
g5
(g867
g7
Ntp4846
Rp4847
(dp4848
g29
g30
(g871
tp4849
Rp4850
(dp4851
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp4852
g883
S'1'
p4853
stp4854
Rp4855
(dp4856
g72
S'environ_items'
p4857
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp4858
sg87
g4825
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp4859
sg99
Nsg100
Nsb(dp4860
ssg140
g65
sg141
g65
sg142
(dp4861
g4814
(dp4862
g4843
(dp4863
g146
(lp4864
(g890
g890
tp4865
a(g889
g889
tp4866
a(g435
g435
tp4867
a(g474
g474
tp4868
a(g881
g881
tp4869
a(g900
g900
tp4870
asssg4829
(dp4871
sg4843
(dp4872
g4829
(dp4873
g146
(lp4874
(g876
g876
tp4875
assssg157
g4861
sg158
(dp4876
sg160
g65
sg161
g4861
sg162
(dp4877
g4814
(dp4878
sg4829
(dp4879
g4843
g4873
ssg4843
(dp4880
g4814
g4863
sssbsg74
g4825
sg87
g167
sg95
g4825
sg96
g168
((lp4881
(lp4882
g171
ag168
((lp4883
(lp4884
g174
ag175
aa(lp4885
g177
ag178
aa(lp4886
g180
ag181
aa(lp4887
g183
ag184
aa(lp4888
g186
ag187
aa(lp4889
g189
ag190
aa(lp4890
g192
ag193
aatp4891
Rp4892
aa(lp4893
g197
ag168
((lp4894
(lp4895
g200
ag201
aa(lp4896
g203
ag204
aa(lp4897
g206
ag207
aa(lp4898
g209
ag210
aa(lp4899
g212
ag213
aa(lp4900
g215
ag216
aa(lp4901
g218
ag219
aa(lp4902
g221
ag222
aa(lp4903
g224
ag225
aa(lp4904
g227
ag228
aa(lp4905
g230
ag231
aa(lp4906
g233
ag234
aa(lp4907
g236
ag237
aa(lp4908
g239
ag240
aa(lp4909
g242
ag243
aa(lp4910
g245
ag246
aa(lp4911
g248
ag249
aa(lp4912
g251
ag252
aa(lp4913
g254
ag255
aa(lp4914
g257
ag258
aa(lp4915
g260
ag261
aa(lp4916
g263
ag264
aatp4917
Rp4918
aa(lp4919
g268
ag168
((lp4920
(lp4921
g271
ag272
aatp4922
Rp4923
aatp4924
Rp4925
sg100
Nsbg2362
tp4926
sS'raw_reho_map'
p4927
(g5
(g6
g7
Ntp4928
Rp4929
(dp4930
g11
g5
(g12
g7
Ntp4931
Rp4932
(dp4933
g16
(dp4934
g5
(g18
g7
Ntp4935
Rp4936
(dp4937
g22
(dp4938
sg24
g5
(g106
g7
Ntp4939
Rp4940
(dp4941
g119
I01
sg29
g30
(g110
tp4942
Rp4943
(dp4944
g35
g36
sS'rest_res_filt'
p4945
g39
sg2440
g39
sS'cluster_size'
p4946
I27
sbsg117
(lp4947
g4946
ag4945
ag2440
asg82
I1
sg78
I1
sbsg83
Nsg90
I00
sg85
(dp4948
sg92
Nsg89
Nsg99
Nsg74
g120
sg87
S'reho_0'
p4949
sg91
I00
sg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp4950
sg100
Nsb(dp4951
sg5
(g18
g7
Ntp4952
Rp4953
(dp4954
g22
(dp4955
sg24
g5
(g106
g7
Ntp4956
Rp4957
(dp4958
g119
I01
sg29
g30
(g110
tp4959
Rp4960
(dp4961
g35
g36
sg4927
g39
sbsg117
(lp4962
g4927
asg82
I1
sg78
I1
sbsg83
Nsg90
I00
sg85
(dp4963
sg92
Nsg89
Nsg99
Nsg74
g136
sg87
g4949
sg91
I00
sg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp4964
sg100
Nsb(dp4965
sg5
(g18
g7
Ntp4966
Rp4967
(dp4968
g22
(dp4969
sg24
g5
(g291
g7
Ntp4970
Rp4971
(dp4972
g305
(lp4973
g47
aS'mask_file'
p4974
ag4946
asg29
g30
(g295
tp4975
Rp4976
(dp4977
g50
I00
sg35
g36
sg302
S'def compute_reho(in_file, mask_file, cluster_size):\n\n    """\n    Computes the ReHo Map, by computing tied ranks of the timepoints,\n    followed by computing Kendall\'s coefficient concordance(KCC) of a timeseries with its neighbours\n\n    Parameters\n    ----------\n\n    in_file : nifti file\n        4D EPI File \n\n    mask_file : nifti file\n        Mask of the EPI File(Only Compute ReHo of voxels in the mask)\n\n    cluster_size : integer\n        for a brain voxel the number of neighbouring brain voxels to use for KCC.\n\n\n    Returns\n    -------\n\n    out_file : nifti file\n        ReHo map of the input EPI image\n\n    """\n\n    import nibabel as nb\n    import numpy as np\n    import os\n    import sys\n    from CPAC.reho.utils import f_kendall\n\n    out_file = None\n\n    res_fname = (in_file)\n    res_mask_fname = (mask_file)\n    CUTNUMBER = 10\n\n#    nvoxel = 27\n\n    if not (cluster_size == 27 or cluster_size == 19 or cluster_size == 7):\n        cluster_size = 27\n\n    nvoxel = cluster_size\n\n    res_img = nb.load(res_fname)\n    res_mask_img = nb.load(res_mask_fname)\n\n\n    res_data = res_img.get_data()\n    res_mask_data = res_mask_img.get_data()\n\n    print res_data.shape\n    (n_x, n_y, n_z, n_t) = res_data.shape\n\n    res_data = np.reshape(res_data, (n_x*n_y*n_z, n_t), order=\'F\').T\n\n    Ranks_res_data = np.tile((np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1])\n    #Ranks_res_data = np.tile(np.uint16(np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1])\n\n    segment_length = np.ceil(float((res_data.shape)[1])/float(CUTNUMBER))\n\n    for icut in range(0, CUTNUMBER):\n\n        segment = None\n\n        if not (icut == (CUTNUMBER - 1)):\n\n            segment = np.array(np.arange(icut * segment_length, (icut+1) * segment_length))\n\n        else:\n\n            segment = np.array(np.arange(icut * segment_length, ((res_data.shape)[1])))\n\n        segment = np.int64(segment[np.newaxis])\n\n        res_data_piece = res_data[:, segment[0]]\n        nvoxels_piece = (res_data_piece.shape)[1]\n\n        res_data_sorted = np.sort(res_data_piece, 0, kind=\'mergesort\')\n        sort_index = np.argsort(res_data_piece, axis=0, kind=\'mergesort\')\n\n        db = np.diff(res_data_sorted, 1, 0)\n\n        db = db == 0\n\n        sumdb = np.sum(db, 0)\n\n        temp_array = np.array(np.arange(0, n_t))\n        temp_array = temp_array[:, np.newaxis]\n\n        sorted_ranks = np.tile(temp_array, [1, nvoxels_piece])\n\n        if np.any(sumdb[:]):\n\n            tie_adjust_index = np.flatnonzero(sumdb)\n\n            for i in range(0, len(tie_adjust_index)):\n\n                ranks = sorted_ranks[:, tie_adjust_index[i]]\n\n                ties = db[:, tie_adjust_index[i]]\n\n                tieloc = np.append(np.flatnonzero(ties), n_t + 2)\n                maxties = len(tieloc)\n                tiecount = 0\n\n                while(tiecount < maxties -1):\n                    tiestart = tieloc[tiecount]\n                    ntied = 2\n                    while(tieloc[tiecount + 1] == (tieloc[tiecount] + 1)):\n                        tiecount += 1\n                        ntied += 1\n\n                    ranks[tiestart:tiestart + ntied ] = np.ceil(np.float32(np.sum(ranks[tiestart:tiestart + ntied ]))/np.float32(ntied))\n                    tiecount += 1\n\n                sorted_ranks[:, tie_adjust_index[i]] = ranks\n\n        del db, sumdb\n        sort_index_base = np.tile(np.multiply(np.arange(0, nvoxels_piece), n_t), [n_t, 1])\n        sort_index += sort_index_base\n        del sort_index_base\n\n        ranks_piece = np.zeros((n_t, nvoxels_piece))\n\n        ranks_piece = ranks_piece.flatten(order=\'F\')\n        sort_index = sort_index.flatten(order=\'F\')\n        sorted_ranks = sorted_ranks.flatten(order=\'F\')\n\n        ranks_piece[sort_index] = np.array(sorted_ranks)\n\n        ranks_piece = np.reshape(ranks_piece, (n_t, nvoxels_piece), order=\'F\')\n\n#        ranks_piece = np.uint16(ranks_piece)\n\n        del sort_index, sorted_ranks\n\n        Ranks_res_data[:, segment[0]] = ranks_piece\n\n        sys.stdout.write(\'.\')\n\n\n    Ranks_res_data = np.reshape(Ranks_res_data, (n_t, n_x, n_y, n_z), order=\'F\')\n\n\n    K = np.zeros((n_x, n_y, n_z))\n\n    mask_cluster = np.ones((3, 3, 3))\n\n    if nvoxel == 19:\n        mask_cluster[0, 0, 0] = 0\n        mask_cluster[0, 2, 0] = 0\n        mask_cluster[2, 0, 0] = 0\n        mask_cluster[2, 2, 0] = 0\n        mask_cluster[0, 0, 2] = 0\n        mask_cluster[0, 2, 2] = 0\n        mask_cluster[2, 0, 2] = 0\n        mask_cluster[2, 2, 2] = 0\n\n    elif nvoxel == 7:\n\n        mask_cluster[0, 0, 0] = 0\n        mask_cluster[0, 1, 0] = 0\n        mask_cluster[0, 2, 0] = 0\n        mask_cluster[0, 0, 1] = 0\n        mask_cluster[0, 2, 1] = 0\n        mask_cluster[0, 0, 2] = 0\n        mask_cluster[0, 1, 2] = 0\n        mask_cluster[0, 2, 2] = 0\n        mask_cluster[1, 0, 0] = 0\n        mask_cluster[1, 2, 0] = 0\n        mask_cluster[1, 0, 2] = 0\n        mask_cluster[1, 2, 2] = 0\n        mask_cluster[2, 0, 0] = 0\n        mask_cluster[2, 1, 0] = 0\n        mask_cluster[2, 2, 0] = 0\n        mask_cluster[2, 0, 1] = 0\n        mask_cluster[2, 2, 1] = 0\n        mask_cluster[2, 0, 2] = 0\n        mask_cluster[2, 1, 2] = 0\n        mask_cluster[2, 2, 2] = 0\n\n\n    for i in range(1, n_x - 1):\n\n        for j in range(1, n_y -1):\n\n            for k in range(1, n_z -1):\n\n\n\n                block = Ranks_res_data[:, i-1:i+2, j-1:j+2, k-1:k+2]\n                mask_block = res_mask_data[i-1:i+2, j-1:j+2, k-1:k+2]\n\n\n                if not(int(mask_block[1, 1, 1]) == 0):\n\n\n                    if nvoxel == 19 or nvoxel == 7:\n\n                        mask_block = np.multiply(mask_block, mask_cluster)\n\n                    R_block = np.reshape(block, (block.shape[0], 27), order=\'F\')\n                    mask_R_block = R_block[:, np.argwhere(np.reshape(mask_block, (1, 27), order=\'F\') > 0)[:, 1]]\n\n                    K[i, j, k] = f_kendall(mask_R_block)\n\n\n    img = nb.Nifti1Image(K, header=res_img.get_header(), affine=res_img.get_affine())\n\n    reho_file = os.path.join(os.getcwd(), \'ReHo.nii.gz\')\n\n    img.to_filename(reho_file)\n\n    out_file = reho_file\n\n    return out_file\n'
p4978
sg47
g39
sg4946
g39
sg4974
g39
sbsg82
I1
sg78
I1
sg307
(dp4979
g60
Nssg304
Nsg310
(lp4980
g60
asbsg83
Nsg90
I00
sg85
(dp4981
sg92
Nsg89
Nsg99
Nsg74
S'reho_map'
p4982
sg87
g4949
sg91
I00
sg93
Nsg94
I00
sg95
g4982
sg96
Nsg97
(lp4983
sg100
Nsb(dp4984
ssg140
g65
sg141
g65
sg142
(dp4985
g4936
(dp4986
g4967
(dp4987
g146
(lp4988
(g4945
g47
tp4989
a(g2440
g4974
tp4990
a(g4946
g4946
tp4991
asssg4953
(dp4992
sg4967
(dp4993
g4953
(dp4994
g146
(lp4995
(g60
g4927
tp4996
assssg157
g4985
sg158
(dp4997
sg160
g65
sg161
g4985
sg162
(dp4998
g4936
(dp4999
sg4953
(dp5000
g4967
g4994
ssg4967
(dp5001
g4936
g4987
sssbsg74
g4949
sg87
g167
sg95
g4949
sg96
g168
((lp5002
(lp5003
g171
ag168
((lp5004
(lp5005
g174
ag175
aa(lp5006
g177
ag178
aa(lp5007
g180
ag181
aa(lp5008
g183
ag184
aa(lp5009
g186
ag187
aa(lp5010
g189
ag190
aa(lp5011
g192
ag193
aatp5012
Rp5013
aa(lp5014
g197
ag168
((lp5015
(lp5016
g200
ag201
aa(lp5017
g203
ag204
aa(lp5018
g206
ag207
aa(lp5019
g209
ag210
aa(lp5020
g212
ag213
aa(lp5021
g215
ag216
aa(lp5022
g218
ag219
aa(lp5023
g221
ag222
aa(lp5024
g224
ag225
aa(lp5025
g227
ag228
aa(lp5026
g230
ag231
aa(lp5027
g233
ag234
aa(lp5028
g236
ag237
aa(lp5029
g239
ag240
aa(lp5030
g242
ag243
aa(lp5031
g245
ag246
aa(lp5032
g248
ag249
aa(lp5033
g251
ag252
aa(lp5034
g254
ag255
aa(lp5035
g257
ag258
aa(lp5036
g260
ag261
aa(lp5037
g263
ag264
aatp5038
Rp5039
aa(lp5040
g268
ag168
((lp5041
(lp5042
g271
ag272
aatp5043
Rp5044
aatp5045
Rp5046
sg100
NsbS'outputspec.raw_reho_map'
p5047
tp5048
sg371
(g281
S'outputspec.ants_rigid_xfm'
p5049
tp5050
sS'anatomical_csf_mask'
p5051
(g763
S'outputspec.csf_mask'
p5052
tp5053
sS'alff_to_standard'
p5054
(g5
(g6
g7
Ntp5055
Rp5056
(dp5057
g11
g5
(g12
g7
Ntp5058
Rp5059
(dp5060
g16
(dp5061
g5
(g18
g7
Ntp5062
Rp5063
(dp5064
g22
(dp5065
sg24
g5
(g867
g7
Ntp5066
Rp5067
(dp5068
g29
g30
(g871
tp5069
Rp5070
(dp5071
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp5072
g883
S'1'
p5073
stp5074
Rp5075
(dp5076
g72
S'environ_items'
p5077
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp5078
sg87
S'alff_to_standard_0'
p5079
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp5080
sg99
Nsg100
Nsb(dp5081
sg5
(g18
g7
Ntp5082
Rp5083
(dp5084
g22
(dp5085
sg24
g5
(g106
g7
Ntp5086
Rp5087
(dp5088
g29
g30
(g110
tp5089
Rp5090
(dp5091
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp5092
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp5093
sg87
g5079
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp5094
sg99
Nsg100
Nsb(dp5095
sg5
(g18
g7
Ntp5096
Rp5097
(dp5098
g22
(dp5099
sg24
g5
(g106
g7
Ntp5100
Rp5101
(dp5102
g29
g30
(g110
tp5103
Rp5104
(dp5105
g35
g36
sg876
g39
sbsg117
(lp5106
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp5107
sg87
g5079
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp5108
sg99
Nsg100
Nsb(dp5109
ssg140
g65
sg141
g65
sg142
(dp5110
g5063
(dp5111
g5097
(dp5112
g146
(lp5113
(g876
g876
tp5114
asssg5083
(dp5115
g5063
(dp5116
g146
(lp5117
(g890
g890
tp5118
a(g889
g889
tp5119
a(g435
g435
tp5120
a(g474
g474
tp5121
a(g881
g881
tp5122
a(g900
g900
tp5123
asssg5097
(dp5124
ssg157
g5110
sg158
(dp5125
sg160
g65
sg161
g5110
sg162
(dp5126
g5063
(dp5127
g5083
g5116
ssg5083
(dp5128
sg5097
(dp5129
g5063
g5112
sssbsg74
g5079
sg87
g167
sg95
g5079
sg96
g168
((lp5130
(lp5131
g171
ag168
((lp5132
(lp5133
g174
ag175
aa(lp5134
g177
ag178
aa(lp5135
g180
ag181
aa(lp5136
g183
ag184
aa(lp5137
g186
ag187
aa(lp5138
g189
ag190
aa(lp5139
g192
ag193
aatp5140
Rp5141
aa(lp5142
g197
ag168
((lp5143
(lp5144
g200
ag201
aa(lp5145
g203
ag204
aa(lp5146
g206
ag207
aa(lp5147
g209
ag210
aa(lp5148
g212
ag213
aa(lp5149
g215
ag216
aa(lp5150
g218
ag219
aa(lp5151
g221
ag222
aa(lp5152
g224
ag225
aa(lp5153
g227
ag228
aa(lp5154
g230
ag231
aa(lp5155
g233
ag234
aa(lp5156
g236
ag237
aa(lp5157
g239
ag240
aa(lp5158
g242
ag243
aa(lp5159
g245
ag246
aa(lp5160
g248
ag249
aa(lp5161
g251
ag252
aa(lp5162
g254
ag255
aa(lp5163
g257
ag258
aa(lp5164
g260
ag261
aa(lp5165
g263
ag264
aatp5166
Rp5167
aa(lp5168
g268
ag168
((lp5169
(lp5170
g271
ag272
aatp5171
Rp5172
aatp5173
Rp5174
sg100
Nsbg2362
tp5175
sS'mean_functional_in_anat'
p5176
(g5
(g6
g7
Ntp5177
Rp5178
(dp5179
g11
g5
(g12
g7
Ntp5180
Rp5181
(dp5182
g16
(dp5183
g5
(g18
g7
Ntp5184
Rp5185
(dp5186
g22
(dp5187
sg24
g5
(g106
g7
Ntp5188
Rp5189
(dp5190
g29
g30
(g110
tp5191
Rp5192
(dp5193
g3916
g39
sg35
g36
sS'anat_func'
p5194
g39
sbsg117
(lp5195
g3916
ag5194
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp5196
sg87
S'func_to_anat_bbreg_0'
p5197
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp5198
sg99
Nsg100
Nsb(dp5199
sg5
(g18
g7
Ntp5200
Rp5201
(dp5202
g22
(dp5203
sg24
g5
(g3837
g7
Ntp5204
Rp5205
(dp5206
g29
g30
(g3841
tp5207
Rp5208
(dp5209
g3845
g39
sg35
g36
sg3846
g39
sg1011
g39
sg3847
g39
sg3848
g39
sg3849
g39
sg3850
g39
sg3851
g39
sg3853
g39
sg3854
g39
sg3855
g39
sg3856
g39
sg3857
g39
sg3858
g39
sg3859
g39
sg3860
g39
sg3861
g39
sg3862
g39
sg47
g39
sg3863
g39
sg3864
g39
sg3865
g39
sg3866
g39
sg50
I00
sg3867
g39
sg3868
g39
sg52
g39
sg3870
g39
sg3871
g39
sg54
g55
sg3872
g39
sg3873
g39
sg3874
g39
sg3875
g39
sg3876
g39
sg3877
g39
sg60
g39
sg3878
g39
sg3879
g39
sg3880
g39
sg62
I6
sg3881
g39
sg3882
g39
sg3883
g39
sg3884
g39
sg63
g5
(g64
g65
(dp5210
g67
g68
stp5211
Rp5212
(dp5213
g72
S'environ_items'
p5214
sg74
g63
sbsg3890
g39
sg3891
g39
sg75
g68
sg3892
g39
sg3893
g39
sg3894
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'bbreg_func_to_anat'
p5215
sg85
(dp5216
sg87
g5197
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5215
sg96
Nsg97
(lp5217
sg99
Nsg100
Nsb(dp5218
sg5
(g18
g7
Ntp5219
Rp5220
(dp5221
g22
(dp5222
sg24
g5
(g106
g7
Ntp5223
Rp5224
(dp5225
g29
g30
(g110
tp5226
Rp5227
(dp5228
g35
g36
sS'linear_reg_matrix'
p5229
g39
sS'bbr_schedule'
p5230
S'/usr/share/fsl/5.0/etc/flirtsch/bbr.sch'
p5231
sS'anat_skull'
p5232
g39
sS'anat_wm_segmentation'
p5233
g39
sg1810
g39
sbsg117
(lp5234
g1810
ag5232
ag5229
ag5233
ag5230
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp5235
sg87
g5197
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp5236
sg99
Nsg100
Nsb(dp5237
sg5
(g18
g7
Ntp5238
Rp5239
(dp5240
g22
(dp5241
sg24
g5
(g1710
g7
Ntp5242
Rp5243
(dp5244
g29
g30
(g1714
tp5245
Rp5246
(dp5247
g50
I00
sg35
g36
sg810
S'-thr 0.5 -bin'
p5248
sg1719
g39
sg60
g39
sg52
g39
sg1720
g39
sg54
g55
sg63
g5
(g64
g65
(dp5249
g67
g68
stp5250
Rp5251
(dp5252
g72
S'environ_items'
p5253
sg74
g63
sbsg47
g39
sg75
g68
sg1726
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'wm_bb_mask'
p5254
sg85
(dp5255
sg87
g5197
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5254
sg96
Nsg97
(lp5256
sg99
Nsg100
Nsb(dp5257
ssg140
g65
sg141
g65
sg142
(dp5258
g5185
(dp5259
sg5201
(dp5260
g5185
(dp5261
g146
(lp5262
(g3881
g3916
tp5263
a(g60
g5194
tp5264
asssg5220
(dp5265
g5239
(dp5266
g146
(lp5267
(g5233
g47
tp5268
assg5201
(dp5269
g146
(lp5270
(g5230
g3868
tp5271
a(g1810
g47
tp5272
a(g5232
g3847
tp5273
a(g5229
g3846
tp5274
asssg5239
(dp5275
g5201
(dp5276
g146
(lp5277
((g60
S"def bbreg_args(bbreg_target):\n    return '-cost bbr -wmseg ' + bbreg_target\n"
p5278
(ttp5279
g52
tp5280
assssg157
g5258
sg158
(dp5281
sg160
g65
sg161
g5258
sg162
(dp5282
g5185
(dp5283
g5201
g5261
ssg5201
(dp5284
g5220
g5269
sg5239
g5276
ssg5220
(dp5285
sg5239
(dp5286
g5220
g5266
sssbsg74
g5197
sg87
g167
sg95
g5197
sg96
g168
((lp5287
(lp5288
g171
ag168
((lp5289
(lp5290
g174
ag175
aa(lp5291
g177
ag178
aa(lp5292
g180
ag181
aa(lp5293
g183
ag184
aa(lp5294
g186
ag187
aa(lp5295
g189
ag190
aa(lp5296
g192
ag193
aatp5297
Rp5298
aa(lp5299
g197
ag168
((lp5300
(lp5301
g200
ag201
aa(lp5302
g203
ag204
aa(lp5303
g206
ag207
aa(lp5304
g209
ag210
aa(lp5305
g212
ag213
aa(lp5306
g215
ag216
aa(lp5307
g218
ag219
aa(lp5308
g221
ag222
aa(lp5309
g224
ag225
aa(lp5310
g227
ag228
aa(lp5311
g230
ag231
aa(lp5312
g233
ag234
aa(lp5313
g236
ag237
aa(lp5314
g239
ag240
aa(lp5315
g242
ag243
aa(lp5316
g245
ag246
aa(lp5317
g248
ag249
aa(lp5318
g251
ag252
aa(lp5319
g254
ag255
aa(lp5320
g257
ag258
aa(lp5321
g260
ag261
aa(lp5322
g263
ag264
aatp5323
Rp5324
aa(lp5325
g268
ag168
((lp5326
(lp5327
g271
ag272
aatp5328
Rp5329
aatp5330
Rp5331
sg100
NsbS'outputspec.anat_func'
p5332
tp5333
sS'ants_symmetric_affine_xfm'
p5334
(g4481
S'outputspec.ants_affine_xfm'
p5335
tp5336
sg2378
(g5
(g6
g7
Ntp5337
Rp5338
(dp5339
g11
g5
(g12
g7
Ntp5340
Rp5341
(dp5342
g16
(dp5343
g5
(g18
g7
Ntp5344
Rp5345
(dp5346
g22
(dp5347
sg24
g5
(cnipype.interfaces.fsl.utils
Split
p5348
g7
Ntp5349
Rp5350
(dp5351
g29
g30
(cnipype.interfaces.fsl.utils
SplitInputSpec
p5352
tp5353
Rp5354
(dp5355
g50
I00
sg35
g36
sg52
g39
sS'out_base_name'
p5356
S'temp_reg_map_z_'
p5357
sg54
g55
sg63
g5
(g64
g65
(dp5358
g67
g68
stp5359
Rp5360
(dp5361
g72
S'environ_items'
p5362
sg74
g63
sbsg47
g39
sg75
g68
sg474
S't'
p5363
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'split_zstat_volumes'
p5364
sg85
(dp5365
sg87
S'temporal_dual_regression_0'
p5366
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5364
sg96
Nsg97
(lp5367
sg99
Nsg100
Nsb(dp5368
sg5
(g18
g7
Ntp5369
Rp5370
(dp5371
g22
(dp5372
sg24
g5
(g5348
g7
Ntp5373
Rp5374
(dp5375
g29
g30
(g5352
tp5376
Rp5377
(dp5378
g50
I00
sg35
g36
sg52
g39
sg5356
S'temp_reg_map_'
p5379
sg54
g55
sg63
g5
(g64
g65
(dp5380
g67
g68
stp5381
Rp5382
(dp5383
g72
S'environ_items'
p5384
sg74
g63
sbsg47
g39
sg75
g68
sg474
g5363
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'split_raw_volumes'
p5385
sg85
(dp5386
sg87
g5366
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5385
sg96
Nsg97
(lp5387
sg99
Nsg100
Nsb(dp5388
sg5
(g18
g7
Ntp5389
Rp5390
(dp5391
g22
(dp5392
sg24
g5
(g106
g7
Ntp5393
Rp5394
(dp5395
g29
g30
(g110
tp5396
Rp5397
(dp5398
S'normalize'
p5399
I01
sg115
g39
sg134
g39
sg116
g39
sg48
I01
sg35
g36
sbsg117
(lp5400
g115
ag134
ag116
ag48
ag5399
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp5401
sg87
g5366
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp5402
sg99
Nsg100
Nsb(dp5403
sg5
(g18
g7
Ntp5404
Rp5405
(dp5406
g22
(dp5407
sg24
g5
(g291
g7
Ntp5408
Rp5409
(dp5410
g29
g30
(g295
tp5411
Rp5412
(dp5413
g50
I00
sg35
g36
sg302
S"def check_ts(in_file):\n    import numpy as np\n    try:\n        timepoints, rois = np.loadtxt(in_file).shape\n    except ValueError:\n        timepoints = np.loadtxt(in_file).shape[0]\n        rois = 1\t\n    if rois > timepoints:\n        message = ('\\n\\n\\n****The number of timepoints (' + str(timepoints)\n                   + ') is smaller than the number of ROIs to run ('\n                   + str(rois) + ') - therefore the GLM is'\n                   + ' underspecified and can\\'t run.****\\n\\n\\n')\n        print(message)\n        raise Exception(message)\n    else:\n        return in_file\n"
p5414
sg47
g39
sbsg78
I1
sg304
Nsg305
(lp5415
g47
asg82
I1
sg307
(dp5416
g60
Nssg310
(lp5417
g60
asbsg83
Nsg74
S'check_timeseries'
p5418
sg85
(dp5419
sg87
g5366
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5418
sg96
Nsg97
(lp5420
sg99
Nsg100
Nsb(dp5421
sg5
(g18
g7
Ntp5422
Rp5423
(dp5424
g22
(dp5425
sg24
g5
(g25
g7
Ntp5426
Rp5427
(dp5428
g29
g30
(g31
tp5429
Rp5430
(dp5431
g35
g36
sg37
g39
sg40
g39
sg41
g39
sg42
g39
sg43
g39
sg44
g39
sg45
g39
sg46
g39
sg47
g39
sg48
g39
sg49
g39
sg50
I00
sg51
g39
sg52
g39
sg53
S'temp_reg_map_z.nii.gz'
p5432
sg54
g55
sg56
g39
sg57
g39
sg58
g39
sg59
g39
sg60
S'temp_reg_map.nii.gz'
p5433
sg62
g39
sg63
g5
(g64
g65
(dp5434
g67
g68
stp5435
Rp5436
(dp5437
g72
S'environ_items'
p5438
sg74
g63
sbsg75
g68
sg76
g39
sg77
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'temporal_regression'
p5439
sg85
(dp5440
sg87
g5366
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5439
sg96
Nsg97
(lp5441
sg99
Nsg100
Nsb(dp5442
sg5
(g18
g7
Ntp5443
Rp5444
(dp5445
g22
(dp5446
sg24
g5
(g106
g7
Ntp5447
Rp5448
(dp5449
g29
g30
(g110
tp5450
Rp5451
(dp5452
g35
g36
sS'temp_reg_map_files'
p5453
g39
sS'temp_reg_map_z_files'
p5454
g39
sS'temp_reg_map'
p5455
g39
sS'temp_reg_map_z'
p5456
g39
sbsg117
(lp5457
g5455
ag5453
ag5456
ag5454
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp5458
sg87
g5366
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp5459
sg99
Nsg100
Nsb(dp5460
ssg140
g65
sg141
g65
sg142
(dp5461
g5345
(dp5462
g5444
(dp5463
g146
(lp5464
(S'out_files'
p5465
g5454
tp5466
asssg5370
(dp5467
g5444
(dp5468
g146
(lp5469
(g5465
g5453
tp5470
asssg5390
(dp5471
g5405
(dp5472
g146
(lp5473
(g134
g47
tp5474
assg5423
(dp5475
g146
(lp5476
(g115
g47
tp5477
a(g48
g48
tp5478
a(g5399
g76
tp5479
a(g116
g41
tp5480
asssg5405
(dp5481
g5423
(dp5482
g146
(lp5483
(g60
g45
tp5484
asssg5423
(dp5485
g5444
(dp5486
g146
(lp5487
(g60
g5455
tp5488
a(S'out_z'
p5489
g5456
tp5490
assg5370
(dp5491
g146
(lp5492
(g60
g47
tp5493
assg5345
(dp5494
g146
(lp5495
(g5489
g47
tp5496
asssg5444
(dp5497
ssg157
g5461
sg158
(dp5498
sg160
g65
sg161
g5461
sg162
(dp5499
g5345
(dp5500
g5423
g5494
ssg5370
(dp5501
g5423
g5491
ssg5390
(dp5502
sg5405
(dp5503
g5390
g5472
ssg5423
(dp5504
g5405
g5482
sg5390
g5475
ssg5444
(dp5505
g5423
g5486
sg5370
g5468
sg5345
g5463
sssbsg74
g5366
sg87
g167
sg95
g5366
sg96
g168
((lp5506
(lp5507
g171
ag168
((lp5508
(lp5509
g174
ag175
aa(lp5510
g177
ag178
aa(lp5511
g180
ag181
aa(lp5512
g183
ag184
aa(lp5513
g186
ag187
aa(lp5514
g189
ag190
aa(lp5515
g192
ag193
aatp5516
Rp5517
aa(lp5518
g197
ag168
((lp5519
(lp5520
g200
ag201
aa(lp5521
g203
ag204
aa(lp5522
g206
ag207
aa(lp5523
g209
ag210
aa(lp5524
g212
ag213
aa(lp5525
g215
ag216
aa(lp5526
g218
ag219
aa(lp5527
g221
ag222
aa(lp5528
g224
ag225
aa(lp5529
g227
ag228
aa(lp5530
g230
ag231
aa(lp5531
g233
ag234
aa(lp5532
g236
ag237
aa(lp5533
g239
ag240
aa(lp5534
g242
ag243
aa(lp5535
g245
ag246
aa(lp5536
g248
ag249
aa(lp5537
g251
ag252
aa(lp5538
g254
ag255
aa(lp5539
g257
ag258
aa(lp5540
g260
ag261
aa(lp5541
g263
ag264
aatp5542
Rp5543
aa(lp5544
g268
ag168
((lp5545
(lp5546
g271
ag272
aatp5547
Rp5548
aatp5549
Rp5550
sg100
NsbS'outputspec.temp_reg_map_files'
p5551
tp5552
sS'dr_tempreg_maps_stack_to_standard_smooth'
p5553
(g5
(g18
g7
Ntp5554
Rp5555
(dp5556
g22
(dp5557
sg24
g5
(g801
g7
Ntp5558
Rp5559
(dp5560
g29
g30
(g805
tp5561
Rp5562
(dp5563
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp5564
g67
g68
stp5565
Rp5566
(dp5567
g72
S'environ_items'
p5568
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'dr_tempreg_maps_stack_smooth_0'
p5569
sg85
(dp5570
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5569
sg96
Nsg97
(lp5571
sg99
Nsg100
Nsbg60
tp5572
sS'dr_tempreg_maps_zstat_stack'
p5573
(g5338
S'outputspec.temp_reg_map_z'
p5574
tp5575
sS'anatomical_gm_mask'
p5576
(g763
S'outputspec.gm_mask'
p5577
tp5578
sg3799
(g5
(g6
g7
Ntp5579
Rp5580
(dp5581
g11
g5
(g12
g7
Ntp5582
Rp5583
(dp5584
g16
(dp5585
g5
(g18
g7
Ntp5586
Rp5587
(dp5588
g22
(dp5589
sg24
g5
(g1754
g7
Ntp5590
Rp5591
(dp5592
g29
g30
(g1758
tp5593
Rp5594
(dp5595
g1762
g39
sg50
I00
sg35
g36
sg60
g39
sg1763
S'(1.0*bool(a))*((1.0*b)/(1.0*c))'
p5596
sg52
S'-float'
p5597
sg1588
g1589
sg1765
g39
sg1766
g39
sg1767
g39
sg63
g5
(g64
g65
(dp5598
tp5599
Rp5600
(dp5601
g72
S'environ_items'
p5602
sg74
g63
sbsg1773
g39
sg1774
g39
sg1775
g39
sg54
g55
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'falff'
p5603
sg85
(dp5604
sg87
S'alff_falff_0'
p5605
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5603
sg96
Nsg97
(lp5606
sg99
Nsg100
Nsb(dp5607
sg5
(g18
g7
Ntp5608
Rp5609
(dp5610
g22
(dp5611
sg24
g5
(g106
g7
Ntp5612
Rp5613
(dp5614
g29
g30
(g110
tp5615
Rp5616
(dp5617
g35
g36
sS'lp'
p5618
(lp5619
F0.1
asbsg117
(lp5620
g5618
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
S'lp_input'
p5621
sg85
(dp5622
sg87
g5605
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
(g5618
(lp5623
F0.1
atp5624
sg94
I00
sg95
g5621
sg96
Nsg97
(lp5625
sg99
Nsg100
Nsb(dp5626
sg5
(g18
g7
Ntp5627
Rp5628
(dp5629
g22
(dp5630
sg24
g5
(g106
g7
Ntp5631
Rp5632
(dp5633
g29
g30
(g110
tp5634
Rp5635
(dp5636
g35
g36
sg2434
g39
sg2440
g39
sbsg117
(lp5637
g2434
ag2440
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp5638
sg87
g5605
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp5639
sg99
Nsg100
Nsb(dp5640
sg5
(g18
g7
Ntp5641
Rp5642
(dp5643
g22
(dp5644
sg24
g5
(g291
g7
Ntp5645
Rp5646
(dp5647
g29
g30
(g295
tp5648
Rp5649
(dp5650
g50
I00
sg302
S'def get_opt_string(mask):\n    """\n    Method to return option string for 3dTstat\n\n    Parameters\n    ----------\n    mask : string (file)\n\n    Returns\n    -------\n    opt_str : string\n\n    """\n    opt_str = " -stdev -mask %s" %mask\n    return opt_str\n'
p5651
sg41
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp5652
g41
asg82
I1
sg307
(dp5653
S'option_string'
p5654
Nssg310
(lp5655
g5654
asbsg83
Nsg74
S'get_option_string'
p5656
sg85
(dp5657
sg87
g5605
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5656
sg96
Nsg97
(lp5658
sg99
Nsg100
Nsb(dp5659
sg5
(g18
g7
Ntp5660
Rp5661
(dp5662
g22
(dp5663
sg24
g5
(g106
g7
Ntp5664
Rp5665
(dp5666
g29
g30
(g110
tp5667
Rp5668
(dp5669
g35
g36
sS'hp'
p5670
(lp5671
F0.01
asbsg117
(lp5672
g5670
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
S'hp_input'
p5673
sg85
(dp5674
sg87
g5605
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
(g5670
(lp5675
F0.01
atp5676
sg94
I00
sg95
g5673
sg96
Nsg97
(lp5677
sg99
Nsg100
Nsb(dp5678
sg5
(g18
g7
Ntp5679
Rp5680
(dp5681
g22
(dp5682
sg24
g5
(g106
g7
Ntp5683
Rp5684
(dp5685
g29
g30
(g110
tp5686
Rp5687
(dp5688
g35
g36
sg3799
g39
sS'alff_img'
p5689
g39
sbsg117
(lp5690
g5689
ag3799
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp5691
sg87
g5605
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp5692
sg99
Nsg100
Nsb(dp5693
sg5
(g18
g7
Ntp5694
Rp5695
(dp5696
g22
(dp5697
sg24
g5
(g1580
g7
Ntp5698
Rp5699
(dp5700
g29
g30
(g1584
tp5701
Rp5702
(dp5703
g50
I00
sg35
g36
sg60
S'./residual_3dT.nii.gz'
p5704
sg52
g39
sg41
g39
sg1588
g1589
sg54
g55
sg63
g5
(g64
g65
(dp5705
tp5706
Rp5707
(dp5708
g72
S'environ_items'
p5709
sg74
g63
sbsg47
g39
sg1595
g39
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'stddev_unfltrd'
p5710
sg85
(dp5711
sg87
g5605
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5710
sg96
Nsg97
(lp5712
sg99
Nsg100
Nsb(dp5713
sg5
(g18
g7
Ntp5714
Rp5715
(dp5716
g22
(dp5717
sg24
g5
(cnipype.interfaces.afni.preprocess
Bandpass
p5718
g7
Ntp5719
Rp5720
(dp5721
g29
g30
(cnipype.interfaces.afni.preprocess
BandpassInputSpec
p5722
tp5723
Rp5724
(dp5725
g35
g36
sS'nfft'
p5726
g39
sS'tr'
p5727
g39
sS'lowpass'
p5728
g39
sS'localPV'
p5729
g39
sS'no_detrend'
p5730
g39
sS'orthogonalize_dset'
p5731
g39
sg47
g39
sS'blur'
p5732
g39
sg50
I00
sg5399
g39
sS'automask'
p5733
g39
sS'despike'
p5734
g39
sg52
g39
sS'highpass'
p5735
g39
sg54
g55
sS'notrans'
p5736
g39
sS'orthogonalize_file'
p5737
g39
sg60
S'./residual_filtered.nii.gz'
p5738
sg41
g39
sg1588
g1589
sg63
g5
(g64
g65
(dp5739
tp5740
Rp5741
(dp5742
g72
S'environ_items'
p5743
sg74
g63
sbsbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'bandpass_filtering'
p5744
sg85
(dp5745
sg87
g5605
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5744
sg96
Nsg97
(lp5746
sg99
Nsg100
Nsb(dp5747
sg5
(g18
g7
Ntp5748
Rp5749
(dp5750
g22
(dp5751
sg24
g5
(g1580
g7
Ntp5752
Rp5753
(dp5754
g29
g30
(g1584
tp5755
Rp5756
(dp5757
g50
I00
sg35
g36
sg60
S'./residual_filtered_3dT.nii.gz'
p5758
sg52
g39
sg41
g39
sg1588
g1589
sg54
g55
sg63
g5
(g64
g65
(dp5759
tp5760
Rp5761
(dp5762
g72
S'environ_items'
p5763
sg74
g63
sbsg47
g39
sg1595
g39
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'stddev_fltrd'
p5764
sg85
(dp5765
sg87
g5605
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5764
sg96
Nsg97
(lp5766
sg99
Nsg100
Nsb(dp5767
ssg140
g65
sg141
g65
sg142
(dp5768
g5587
(dp5769
g5680
(dp5770
g146
(lp5771
(g60
g3799
tp5772
asssg5609
(dp5773
g5715
(dp5774
g146
(lp5775
(g5618
g5728
tp5776
asssg5628
(dp5777
g5587
(dp5778
g146
(lp5779
(g2440
g1767
tp5780
assg5695
(dp5781
g146
(lp5782
(g2434
g47
tp5783
assg5715
(dp5784
g146
(lp5785
(g2434
g47
tp5786
assg5642
(dp5787
g146
(lp5788
(g2440
g41
tp5789
asssg5642
(dp5790
g5749
(dp5791
g146
(lp5792
(g5654
g1595
tp5793
assg5695
(dp5794
g146
(lp5795
(g5654
g1595
tp5796
asssg5661
(dp5797
g5715
(dp5798
g146
(lp5799
(g5670
g5735
tp5800
asssg5680
(dp5801
sg5695
(dp5802
g5587
(dp5803
g146
(lp5804
(g60
g1766
tp5805
asssg5715
(dp5806
g5749
(dp5807
g146
(lp5808
(g60
g47
tp5809
asssg5749
(dp5810
g5680
(dp5811
g146
(lp5812
(g60
g5689
tp5813
assg5587
(dp5814
g146
(lp5815
(g60
g1765
tp5816
assssg157
g5768
sg158
(dp5817
sg160
g65
sg161
g5768
sg162
(dp5818
g5587
(dp5819
g5628
g5778
sg5749
g5814
sg5695
g5803
ssg5609
(dp5820
sg5628
(dp5821
sg5642
(dp5822
g5628
g5787
ssg5661
(dp5823
sg5680
(dp5824
g5749
g5811
sg5587
g5770
ssg5695
(dp5825
g5628
g5781
sg5642
g5794
ssg5715
(dp5826
g5628
g5784
sg5661
g5798
sg5609
g5774
ssg5749
(dp5827
g5715
g5807
sg5642
g5791
sssbsg74
g5605
sg87
g167
sg95
g5605
sg96
g168
((lp5828
(lp5829
g171
ag168
((lp5830
(lp5831
g174
ag175
aa(lp5832
g177
ag178
aa(lp5833
g180
ag181
aa(lp5834
g183
ag184
aa(lp5835
g186
ag187
aa(lp5836
g189
ag190
aa(lp5837
g192
ag193
aatp5838
Rp5839
aa(lp5840
g197
ag168
((lp5841
(lp5842
g200
ag201
aa(lp5843
g203
ag204
aa(lp5844
g206
ag207
aa(lp5845
g209
ag210
aa(lp5846
g212
ag213
aa(lp5847
g215
ag216
aa(lp5848
g218
ag219
aa(lp5849
g221
ag222
aa(lp5850
g224
ag225
aa(lp5851
g227
ag228
aa(lp5852
g230
ag231
aa(lp5853
g233
ag234
aa(lp5854
g236
ag237
aa(lp5855
g239
ag240
aa(lp5856
g242
ag243
aa(lp5857
g245
ag246
aa(lp5858
g248
ag249
aa(lp5859
g251
ag252
aa(lp5860
g254
ag255
aa(lp5861
g257
ag258
aa(lp5862
g260
ag261
aa(lp5863
g263
ag264
aatp5864
Rp5865
aa(lp5866
g268
ag168
((lp5867
(lp5868
g271
ag272
aatp5869
Rp5870
aatp5871
Rp5872
sg100
NsbS'outputspec.falff_img'
p5873
tp5874
sg372
(g281
g5335
tp5875
sS'functional_nuisance_regressors'
p5876
(g3809
S'outputspec.regressors'
p5877
tp5878
sS'motion_correct_smooth'
p5879
(g5
(g18
g7
Ntp5880
Rp5881
(dp5882
g22
(dp5883
sg24
g5
(g801
g7
Ntp5884
Rp5885
(dp5886
g29
g30
(g805
tp5887
Rp5888
(dp5889
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp5890
g67
g68
stp5891
Rp5892
(dp5893
g72
S'environ_items'
p5894
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'motion_correct_smooth_0'
p5895
sg85
(dp5896
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5895
sg96
Nsg97
(lp5897
sg99
Nsg100
Nsbg60
tp5898
sS'falff_to_standard_smooth'
p5899
(g5
(g18
g7
Ntp5900
Rp5901
(dp5902
g22
(dp5903
sg24
g5
(g801
g7
Ntp5904
Rp5905
(dp5906
g29
g30
(g805
tp5907
Rp5908
(dp5909
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp5910
g67
g68
stp5911
Rp5912
(dp5913
g72
S'environ_items'
p5914
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'falff_to_standard_smooth_0'
p5915
sg85
(dp5916
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5915
sg96
Nsg97
(lp5917
sg99
Nsg100
Nsbg60
tp5918
sS'reho_smooth'
p5919
(g5
(g18
g7
Ntp5920
Rp5921
(dp5922
g22
(dp5923
sg24
g5
(g801
g7
Ntp5924
Rp5925
(dp5926
g29
g30
(g805
tp5927
Rp5928
(dp5929
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp5930
g67
g68
stp5931
Rp5932
(dp5933
g72
S'environ_items'
p5934
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'reho_smooth_0'
p5935
sg85
(dp5936
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5935
sg96
Nsg97
(lp5937
sg99
Nsg100
Nsbg60
tp5938
sS'centrality_outputs_zstd'
p5939
(g5
(g6
g7
Ntp5940
Rp5941
(dp5942
g11
g5
(g12
g7
Ntp5943
Rp5944
(dp5945
g16
(dp5946
g5
(g18
g7
Ntp5947
Rp5948
(dp5949
g22
(dp5950
sg24
g5
(g106
g7
Ntp5951
Rp5952
(dp5953
g29
g30
(g110
tp5954
Rp5955
(dp5956
g4974
g4782
sg35
g36
sS'input_file'
p5957
g39
sbsg117
(lp5958
g5957
ag4974
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp5959
sg87
S'centrality_zscore_0'
p5960
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp5961
sg99
Nsg100
Nsb(dp5962
sg5
(g2365
g7
Ntp5963
Rp5964
(dp5965
g2369
I00
sg22
(dp5966
sg24
g5
(cnipype.interfaces.fsl.utils
ImageStats
p5967
g7
Ntp5968
Rp5969
(dp5970
g29
g30
(cnipype.interfaces.fsl.utils
ImageStatsInputSpec
p5971
tp5972
Rp5973
(dp5974
g50
I00
sg35
g36
sg810
S'-k %s -s'
p5975
sS'split_4d'
p5976
g39
sg52
g39
sg54
g55
sg63
g5
(g64
g65
(dp5977
g67
g68
stp5978
Rp5979
(dp5980
g72
S'environ_items'
p5981
sg74
g63
sbsg47
g39
sg4974
g39
sg75
g68
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp5982
Rp5983
(dp5984
g50
I00
sg35
g36
sg810
g5975
sg5976
g39
sg52
g39
sg54
g55
sg63
g5
(g64
g65
(dp5985
g67
g68
stp5986
Rp5987
(dp5988
g72
S'environ_items'
p5989
sg74
g63
sbsg47
g39
sg4974
g39
sg75
g68
sbsg74
S'standard_deviation'
p5990
sg85
(dp5991
sg2388
I00
sg87
g5960
sg2389
(lp5992
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5990
sg96
Nsg97
(lp5993
sg99
Nsg100
Nsb(dp5994
sg5
(g18
g7
Ntp5995
Rp5996
(dp5997
g22
(dp5998
sg24
g5
(g106
g7
Ntp5999
Rp6000
(dp6001
g29
g30
(g110
tp6002
Rp6003
(dp6004
g35
g36
sS'z_score_img'
p6005
g39
sbsg117
(lp6006
g6005
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp6007
sg87
g5960
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp6008
sg99
Nsg100
Nsb(dp6009
sg5
(g2365
g7
Ntp6010
Rp6011
(dp6012
g2369
I00
sg22
(dp6013
sg24
g5
(g5967
g7
Ntp6014
Rp6015
(dp6016
g29
g30
(g5971
tp6017
Rp6018
(dp6019
g50
I00
sg35
g36
sg810
S'-k %s -m'
p6020
sg5976
g39
sg52
g39
sg54
g55
sg63
g5
(g64
g65
(dp6021
g67
g68
stp6022
Rp6023
(dp6024
g72
S'environ_items'
p6025
sg74
g63
sbsg47
g39
sg4974
g39
sg75
g68
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp6026
Rp6027
(dp6028
g50
I00
sg35
g36
sg810
g6020
sg5976
g39
sg52
g39
sg54
g55
sg63
g5
(g64
g65
(dp6029
g67
g68
stp6030
Rp6031
(dp6032
g72
S'environ_items'
p6033
sg74
g63
sbsg47
g39
sg4974
g39
sg75
g68
sbsg74
S'mean'
p6034
sg85
(dp6035
sg2388
I00
sg87
g5960
sg2389
(lp6036
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6034
sg96
Nsg97
(lp6037
sg99
Nsg100
Nsb(dp6038
sg5
(g2365
g7
Ntp6039
Rp6040
(dp6041
g2369
I00
sg22
(dp6042
sg24
g5
(g291
g7
Ntp6043
Rp6044
(dp6045
g29
g30
(g295
tp6046
Rp6047
(dp6048
g50
I00
sg302
S'def get_operand_string(mean, std_dev):\n    """\n    Method to get operand string for Fsl Maths\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    ------\n    op_string : string\n        operand string\n    """\n\n    str1 = "-sub %f -div %f" % (float(mean), float(std_dev))\n    op_string = str1 + " -mas %s"\n    return op_string\n'
p6049
sS'std_dev'
p6050
g39
sg35
g36
sg6034
g39
sbsg78
I1
sg304
Nsg305
(lp6051
g6034
ag6050
asg82
I1
sg307
(dp6052
g810
Nssg310
(lp6053
g810
asbsg83
Nsg2382
g30
(g110
tp6054
Rp6055
(dp6056
g50
I00
sg302
g6049
sg6050
g39
sg35
g36
sg6034
g39
sbsg74
g810
sg85
(dp6057
sg2388
I00
sg87
g5960
sg2389
(lp6058
g6034
ag6050
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g810
sg96
Nsg97
(lp6059
sg99
Nsg100
Nsb(dp6060
sg5
(g2365
g7
Ntp6061
Rp6062
(dp6063
g2369
I00
sg22
(dp6064
sg24
g5
(g801
g7
Ntp6065
Rp6066
(dp6067
g29
g30
(g805
tp6068
Rp6069
(dp6070
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp6071
g67
g68
stp6072
Rp6073
(dp6074
g72
S'environ_items'
p6075
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp6076
Rp6077
(dp6078
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp6079
g67
g68
stp6080
Rp6081
(dp6082
g72
S'environ_items'
p6083
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg74
S'z_score'
p6084
sg85
(dp6085
sg2388
I00
sg87
g5960
sg2389
(lp6086
g47
ag810
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6084
sg96
Nsg97
(lp6087
sg99
Nsg100
Nsb(dp6088
ssg140
g65
sg141
g65
sg142
(dp6089
g5948
(dp6090
g6011
(dp6091
g146
(lp6092
(g5957
g47
tp6093
a(g4974
g4974
tp6094
assg6062
(dp6095
g146
(lp6096
(g5957
g47
tp6097
a(g4974
g819
tp6098
assg5964
(dp6099
g146
(lp6100
(g5957
g47
tp6101
a(g4974
g4974
tp6102
asssg5964
(dp6103
g6040
(dp6104
g146
(lp6105
(S'out_stat'
p6106
g6050
tp6107
asssg5996
(dp6108
sg6011
(dp6109
g6040
(dp6110
g146
(lp6111
(g6106
g6034
tp6112
asssg6040
(dp6113
g6062
(dp6114
g146
(lp6115
(g810
g810
tp6116
asssg6062
(dp6117
g5996
(dp6118
g146
(lp6119
(g60
g6005
tp6120
assssg157
g6089
sg158
(dp6121
sg160
g65
sg161
g6089
sg162
(dp6122
g5948
(dp6123
sg5964
(dp6124
g5948
g6099
ssg5996
(dp6125
g6062
g6118
ssg6011
(dp6126
g5948
g6091
ssg6040
(dp6127
g6011
g6110
sg5964
g6104
ssg6062
(dp6128
g6040
g6114
sg5948
g6095
sssbsg74
g5960
sg87
g167
sg95
g5960
sg96
g168
((lp6129
(lp6130
g171
ag168
((lp6131
(lp6132
g174
ag175
aa(lp6133
g177
ag178
aa(lp6134
g180
ag181
aa(lp6135
g183
ag184
aa(lp6136
g186
ag187
aa(lp6137
g189
ag190
aa(lp6138
g192
ag193
aatp6139
Rp6140
aa(lp6141
g197
ag168
((lp6142
(lp6143
g200
ag201
aa(lp6144
g203
ag204
aa(lp6145
g206
ag207
aa(lp6146
g209
ag210
aa(lp6147
g212
ag213
aa(lp6148
g215
ag216
aa(lp6149
g218
ag219
aa(lp6150
g221
ag222
aa(lp6151
g224
ag225
aa(lp6152
g227
ag228
aa(lp6153
g230
ag231
aa(lp6154
g233
ag234
aa(lp6155
g236
ag237
aa(lp6156
g239
ag240
aa(lp6157
g242
ag243
aa(lp6158
g245
ag246
aa(lp6159
g248
ag249
aa(lp6160
g251
ag252
aa(lp6161
g254
ag255
aa(lp6162
g257
ag258
aa(lp6163
g260
ag261
aa(lp6164
g263
ag264
aatp6165
Rp6166
aa(lp6167
g268
ag168
((lp6168
(lp6169
g271
ag272
aatp6170
Rp6171
aatp6172
Rp6173
sg100
NsbS'outputspec.z_score_img'
p6174
tp6175
sS'dr_tempreg_maps_zstat_files_to_standard'
p6176
(g5
(g6
g7
Ntp6177
Rp6178
(dp6179
g11
g5
(g12
g7
Ntp6180
Rp6181
(dp6182
g16
(dp6183
g5
(g2365
g7
Ntp6184
Rp6185
(dp6186
g2369
I00
sg22
(dp6187
sg24
g5
(g867
g7
Ntp6188
Rp6189
(dp6190
g29
g30
(g871
tp6191
Rp6192
(dp6193
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp6194
g883
S'1'
p6195
stp6196
Rp6197
(dp6198
g72
S'environ_items'
p6199
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg2382
g30
(g110
tp6200
Rp6201
(dp6202
g891
F0.0
sg50
I00
sg78
I1
sg876
g39
sg52
g39
sg877
g2286
sg879
g39
sg875
g39
sg880
g39
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp6203
g883
g6195
stp6204
Rp6205
(dp6206
g72
S'environ_items'
p6207
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg892
g39
sg474
g39
sg35
g36
sg900
g2271
sbsg74
g3679
sg85
(dp6208
sg2388
I00
sg87
S'dr_tempreg_maps_zstat_files_to_standard_0'
p6209
sg2389
(lp6210
g890
ag435
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3679
sg96
Nsg97
(lp6211
sg99
Nsg100
Nsb(dp6212
sg5
(g18
g7
Ntp6213
Rp6214
(dp6215
g22
(dp6216
sg24
g5
(g106
g7
Ntp6217
Rp6218
(dp6219
g29
g30
(g110
tp6220
Rp6221
(dp6222
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp6223
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp6224
sg87
g6209
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp6225
sg99
Nsg100
Nsb(dp6226
sg5
(g18
g7
Ntp6227
Rp6228
(dp6229
g22
(dp6230
sg24
g5
(g106
g7
Ntp6231
Rp6232
(dp6233
g29
g30
(g110
tp6234
Rp6235
(dp6236
g35
g36
sg876
g39
sbsg117
(lp6237
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp6238
sg87
g6209
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp6239
sg99
Nsg100
Nsb(dp6240
ssg140
g65
sg141
g65
sg142
(dp6241
g6185
(dp6242
g6228
(dp6243
g146
(lp6244
(g876
g876
tp6245
asssg6214
(dp6246
g6185
(dp6247
g146
(lp6248
(g890
g890
tp6249
a(g889
g889
tp6250
a(g435
g435
tp6251
a(g474
g474
tp6252
a(g881
g881
tp6253
a(g900
g900
tp6254
asssg6228
(dp6255
ssg157
g6241
sg158
(dp6256
sg160
g65
sg161
g6241
sg162
(dp6257
g6185
(dp6258
g6214
g6247
ssg6214
(dp6259
sg6228
(dp6260
g6185
g6243
sssbsg74
g6209
sg87
g167
sg95
g6209
sg96
g168
((lp6261
(lp6262
g171
ag168
((lp6263
(lp6264
g174
ag175
aa(lp6265
g177
ag178
aa(lp6266
g180
ag181
aa(lp6267
g183
ag184
aa(lp6268
g186
ag187
aa(lp6269
g189
ag190
aa(lp6270
g192
ag193
aatp6271
Rp6272
aa(lp6273
g197
ag168
((lp6274
(lp6275
g200
ag201
aa(lp6276
g203
ag204
aa(lp6277
g206
ag207
aa(lp6278
g209
ag210
aa(lp6279
g212
ag213
aa(lp6280
g215
ag216
aa(lp6281
g218
ag219
aa(lp6282
g221
ag222
aa(lp6283
g224
ag225
aa(lp6284
g227
ag228
aa(lp6285
g230
ag231
aa(lp6286
g233
ag234
aa(lp6287
g236
ag237
aa(lp6288
g239
ag240
aa(lp6289
g242
ag243
aa(lp6290
g245
ag246
aa(lp6291
g248
ag249
aa(lp6292
g251
ag252
aa(lp6293
g254
ag255
aa(lp6294
g257
ag258
aa(lp6295
g260
ag261
aa(lp6296
g263
ag264
aatp6297
Rp6298
aa(lp6299
g268
ag168
((lp6300
(lp6301
g271
ag272
aatp6302
Rp6303
aatp6304
Rp6305
sg100
Nsbg2362
tp6306
sS'vmhc_raw_score'
p6307
(g2398
S'outputspec.VMHC_FWHM_img'
p6308
tp6309
sg5689
(g5580
S'outputspec.alff_img'
p6310
tp6311
sS'output_means.@falff_smooth_average'
p6312
(g5
(g18
g7
Ntp6313
Rp6314
(dp6315
g22
(dp6316
sg24
g5
(g291
g7
Ntp6317
Rp6318
(dp6319
g29
g30
(g295
tp6320
Rp6321
(dp6322
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p6323
sg632
S'falff_smooth'
p6324
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp6325
g47
ag632
asg82
I1
sg307
(dp6326
g636
Nssg310
(lp6327
g636
asbsg83
Nsg74
S'falff_smooth_mean_to_txt_0'
p6328
sg85
(dp6329
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6328
sg96
Nsg97
(lp6330
sg99
Nsg100
Nsbg636
tp6331
sS'dr_tempreg_maps_zstat_files_to_standard_smooth'
p6332
(g5
(g2365
g7
Ntp6333
Rp6334
(dp6335
g2369
I00
sg22
(dp6336
sg24
g5
(g801
g7
Ntp6337
Rp6338
(dp6339
g29
g30
(g805
tp6340
Rp6341
(dp6342
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp6343
g67
g68
stp6344
Rp6345
(dp6346
g72
S'environ_items'
p6347
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp6348
Rp6349
(dp6350
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp6351
g67
g68
stp6352
Rp6353
(dp6354
g72
S'environ_items'
p6355
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg74
S'dr_tempreg_maps_zstat_files_smooth_0'
p6356
sg85
(dp6357
sg2388
I00
sg87
g167
sg2389
(lp6358
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6356
sg96
Nsg97
(lp6359
sg99
Nsg100
Nsbg60
tp6360
sS'dr_tempreg_maps_stack'
p6361
(g5338
S'outputspec.temp_reg_map'
p6362
tp6363
sS'output_means.@reho_smooth_average'
p6364
(g5
(g18
g7
Ntp6365
Rp6366
(dp6367
g22
(dp6368
sg24
g5
(g291
g7
Ntp6369
Rp6370
(dp6371
g29
g30
(g295
tp6372
Rp6373
(dp6374
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p6375
sg632
S'reho_smooth'
p6376
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp6377
g47
ag632
asg82
I1
sg307
(dp6378
g636
Nssg310
(lp6379
g636
asbsg83
Nsg74
S'reho_smooth_mean_to_txt_0'
p6380
sg85
(dp6381
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6380
sg96
Nsg97
(lp6382
sg99
Nsg100
Nsbg636
tp6383
sS'anatomical_to_symmetric_mni_nonlinear_xfm'
p6384
(g4481
S'outputspec.warp_field'
p6385
tp6386
sg1880
(g1570
S'outputspec.motion_correct'
p6387
tp6388
sS'output_means.@alff_img_average'
p6389
(g5
(g18
g7
Ntp6390
Rp6391
(dp6392
g22
(dp6393
sg24
g5
(g291
g7
Ntp6394
Rp6395
(dp6396
g29
g30
(g295
tp6397
Rp6398
(dp6399
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p6400
sg632
g5689
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp6401
g47
ag632
asg82
I1
sg307
(dp6402
g636
Nssg310
(lp6403
g636
asbsg83
Nsg74
S'alff_img_mean_to_txt_0'
p6404
sg85
(dp6405
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6404
sg96
Nsg97
(lp6406
sg99
Nsg100
Nsbg636
tp6407
sS'symmetric_mni_normalized_anatomical'
p6408
(g4481
S'outputspec.normalized_output_brain'
p6409
tp6410
sS'functional_brain_mask'
p6411
(g1570
S'outputspec.mask'
p6412
tp6413
sg1877
(g1570
S'outputspec.preprocessed'
p6414
tp6415
sS'output_means.@alff_to_standard_average'
p6416
(g5
(g18
g7
Ntp6417
Rp6418
(dp6419
g22
(dp6420
sg24
g5
(g291
g7
Ntp6421
Rp6422
(dp6423
g29
g30
(g295
tp6424
Rp6425
(dp6426
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p6427
sg632
S'alff_to_standard'
p6428
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp6429
g47
ag632
asg82
I1
sg307
(dp6430
g636
Nssg310
(lp6431
g636
asbsg83
Nsg74
S'alff_to_standard_mean_to_txt_0'
p6432
sg85
(dp6433
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6432
sg96
Nsg97
(lp6434
sg99
Nsg100
Nsbg636
tp6435
sS'roi_timeseries'
p6436
(g5
(g6
g7
Ntp6437
Rp6438
(dp6439
g11
g5
(g12
g7
Ntp6440
Rp6441
(dp6442
g16
(dp6443
g5
(g18
g7
Ntp6444
Rp6445
(dp6446
g22
(dp6447
sg24
g5
(g106
g7
Ntp6448
Rp6449
(dp6450
g29
g30
(g110
tp6451
Rp6452
(dp6453
g35
g36
sS'roi_outputs'
p6454
g39
sbsg117
(lp6455
g6454
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp6456
sg87
S'roi_timeseries_0'
p6457
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp6458
sg99
Nsg100
Nsb(dp6459
sg5
(g18
g7
Ntp6460
Rp6461
(dp6462
g22
(dp6463
sg24
g5
(cnipype.interfaces.afni.preprocess
ROIStats
p6464
g7
Ntp6465
Rp6466
(dp6467
g29
g30
(cnipype.interfaces.afni.preprocess
ROIStatsInputSpec
p6468
tp6469
Rp6470
(dp6471
g50
I00
sg35
g36
sg52
S'-1Dformat'
p6472
sg41
g39
sS'quiet'
p6473
I00
sg54
S'allatonce'
p6474
sg63
g5
(g64
g65
(dp6475
tp6476
Rp6477
(dp6478
g72
S'environ_items'
p6479
sg74
g63
sbsg47
g39
sS'mask_f2short'
p6480
g39
sbsg82
I1
sg79
g6474
sg81
Nsg78
I1
sbsg83
Nsg74
S'3dROIstats'
p6481
sg85
(dp6482
sg87
g6457
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6481
sg96
Nsg97
(lp6483
sg99
Nsg100
Nsb(dp6484
sg5
(g18
g7
Ntp6485
Rp6486
(dp6487
g22
(dp6488
sg24
g5
(g106
g7
Ntp6489
Rp6490
(dp6491
g29
g30
(g110
tp6492
Rp6493
(dp6494
g35
g36
sg75
g39
sg2115
g39
sbsg117
(lp6495
g2115
ag75
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp6496
sg87
g6457
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp6497
sg99
Nsg100
Nsb(dp6498
sg5
(g18
g7
Ntp6499
Rp6500
(dp6501
g22
(dp6502
sg24
g5
(g106
g7
Ntp6503
Rp6504
(dp6505
g29
g30
(g110
tp6506
Rp6507
(dp6508
g35
g36
sS'roi'
p6509
g39
sbsg117
(lp6510
g6509
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
S'input_roi'
p6511
sg85
(dp6512
sg87
g6457
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6511
sg96
Nsg97
(lp6513
sg99
Nsg100
Nsb(dp6514
ssg140
g65
sg141
g65
sg142
(dp6515
g6445
(dp6516
sg6461
(dp6517
g6445
(dp6518
g146
(lp6519
(S'stats'
p6520
g6454
tp6521
asssg6486
(dp6522
g6461
(dp6523
g146
(lp6524
(g2115
g47
tp6525
asssg6500
(dp6526
g6461
(dp6527
g146
(lp6528
(g6509
g41
tp6529
assssg157
g6515
sg158
(dp6530
sg160
g65
sg161
g6515
sg162
(dp6531
g6445
(dp6532
g6461
g6518
ssg6461
(dp6533
g6486
g6523
sg6500
g6527
ssg6486
(dp6534
sg6500
(dp6535
ssbsg74
g6457
sg87
g167
sg95
g6457
sg96
g168
((lp6536
(lp6537
g171
ag168
((lp6538
(lp6539
g174
ag175
aa(lp6540
g177
ag178
aa(lp6541
g180
ag181
aa(lp6542
g183
ag184
aa(lp6543
g186
ag187
aa(lp6544
g189
ag190
aa(lp6545
g192
ag193
aatp6546
Rp6547
aa(lp6548
g197
ag168
((lp6549
(lp6550
g200
ag201
aa(lp6551
g203
ag204
aa(lp6552
g206
ag207
aa(lp6553
g209
ag210
aa(lp6554
g212
ag213
aa(lp6555
g215
ag216
aa(lp6556
g218
ag219
aa(lp6557
g221
ag222
aa(lp6558
g224
ag225
aa(lp6559
g227
ag228
aa(lp6560
g230
ag231
aa(lp6561
g233
ag234
aa(lp6562
g236
ag237
aa(lp6563
g239
ag240
aa(lp6564
g242
ag243
aa(lp6565
g245
ag246
aa(lp6566
g248
ag249
aa(lp6567
g251
ag252
aa(lp6568
g254
ag255
aa(lp6569
g257
ag258
aa(lp6570
g260
ag261
aa(lp6571
g263
ag264
aatp6572
Rp6573
aa(lp6574
g268
ag168
((lp6575
(lp6576
g271
ag272
aatp6577
Rp6578
aatp6579
Rp6580
sg100
NsbS'outputspec.roi_outputs'
p6581
tp6582
sS'power_params'
p6583
(g5
(g6
g7
Ntp6584
Rp6585
(dp6586
g11
g5
(g12
g7
Ntp6587
Rp6588
(dp6589
g16
(dp6590
g5
(g18
g7
Ntp6591
Rp6592
(dp6593
g22
(dp6594
sg24
g5
(g106
g7
Ntp6595
Rp6596
(dp6597
g29
g30
(g110
tp6598
Rp6599
(dp6600
S'threshold'
p6601
(lp6602
F0.2
asg35
g36
sS'remove_frames_before'
p6603
I1
sS'remove_frames_after'
p6604
I2
sbsg117
(lp6605
g6601
ag6603
ag6604
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
S'scrubbing_input'
p6606
sg85
(dp6607
sg87
S'gen_motion_stats_0'
p6608
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
(g6601
(lp6609
F0.2
atp6610
sg94
I00
sg95
g6606
sg96
Nsg97
(lp6611
sg99
Nsg100
Nsb(dp6612
sg5
(g18
g7
Ntp6613
Rp6614
(dp6615
g22
(dp6616
sg24
g5
(g291
g7
Ntp6617
Rp6618
(dp6619
g29
g30
(g295
tp6620
Rp6621
(dp6622
g50
I00
sg35
g36
sg302
S'def calculate_FD_J(in_file):\n\n    \'\'\'\n    @ Krsna\n    May 2013\n    compute \n    1) Jenkinson FD from 3dvolreg\'s *.affmat12.1D file from -1Dmatrix_save option\n\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\n    output: FD_J.1D file\n    Assumptions:    1) subject is available in BASE_DIR\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\'lfo_mc_affmat.1D\'\n\n    \'\'\'\n\n    import numpy as np\n    import os\n    import sys\n    import math\n\n    """\n    Method to calculate Framewise Displacement (FD) calculations\n    (Jenkinson et al., 2002)\n\n    Parameters; in_file : string\n    Returns; out_file : string\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\n\n    """\n\n    out_file = os.path.join(os.getcwd(), \'FD_J.1D\')\n\n    f = open(out_file, \'w\')\n    #print in_file\n    pm_ = np.genfromtxt(in_file)\n\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\n    pm[:,:12]=pm_\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\n\n    flag = 0\n\n    #The default radius (as in FSL) of a sphere represents the brain\n    rmax = 80.0\n\n    #rigid body transformation matrix \n    T_rb_prev = np.matrix(np.eye(4))\n\n    for i in range(0, pm.shape[0]):\n\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\n\n\tif flag == 0:\n            flag = 1\n            # first timepoint\n            print >> f, 0 \n        else:\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\n            A = M[0:3, 0:3]\n            b = M[0:3, 3]\n\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\n            print >> f, \'%.8f\'%FD_J\n\n        T_rb_prev = T_rb\n\n    f.close()\n\n    return out_file\n\n\n\n\n    """\n    Method to calculate Framewise Displacement (FD) calculations\n    (Jenkinson et al., 2002)\n\n    Parameters\n    ----------\n    in_file : string\n        movement parameters vector file path\n\n    Returns\n    -------\n    out_file : string\n        Frame -wise displalcement mat \n        file path\n\n    """\n\n    \'\'\'\n    import os\n    import numpy as np\n    import math\n\n    out_file = os.path.join(os.getcwd(), \'FD_jenkinson.1D\')\n\n    f = open(out_file, \'w\')\n\n    pm = np.loadtxt(in_file)\n\n    flag = 0\n\n    #The default radius (as in FSL) of a sphere represents the brain\n    rmax = 80.0\n\n    #rigid body transformation matrix \n    T_rb_prev = np.matrix(np.eye(4))\n\n    for i in range(0, pm.shape[0]):\n\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\n\n        if flag == 0:\n            flag = 1\n            # first timepoint\n            print >> f, 0 \n        else:\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\n            A = M[0:3, 0:3]\n            b = M[0:3, 3]\n\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\n            print >> f, \'%.4f\'%FD_J\n\n        T_rb_prev = T_rb\n\n    f.close()\n\n    return out_file\n    \'\'\'\n'
p6623
sg47
g39
sbsg78
I1
sg304
Nsg305
(lp6624
g47
asg82
I1
sg307
(dp6625
g60
Nssg310
(lp6626
g60
asbsg83
Nsg74
S'calculate_FDJ'
p6627
sg85
(dp6628
sg87
g6608
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6627
sg96
Nsg97
(lp6629
sg99
Nsg100
Nsb(dp6630
sg5
(g18
g7
Ntp6631
Rp6632
(dp6633
g22
(dp6634
sg24
g5
(g291
g7
Ntp6635
Rp6636
(dp6637
g29
g30
(g295
tp6638
Rp6639
(dp6640
g50
I00
sg35
g36
sg302
S'def calculate_FD_P(in_file):\n    """\n    Method to calculate Framewise Displacement (FD) calculations\n    (Power et al., 2012)\n\n    Parameters\n    ----------\n    in_file : string\n        movement parameters vector file path\n\n    Returns\n    -------\n    out_file : string\n        Frame-wise displacement mat \n        file path\n\n    """\n\n    import os\n    import numpy as np\n\n    out_file = os.path.join(os.getcwd(), \'FD.1D\') \n\n    lines = open(in_file, \'r\').readlines()\n    rows = [[float(x) for x in line.split()] for line in lines]\n    cols = np.array([list(col) for col in zip(*rows)])\n\n    translations = np.transpose(np.abs(np.diff(cols[3:6, :])))\n    rotations = np.transpose(np.abs(np.diff(cols[0:3, :])))\n\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\n\n    #FD is zero for the first time point\n    FD_power = np.insert(FD_power, 0, 0)\n\n    np.savetxt(out_file, FD_power)\n\n    return out_file\n'
p6641
sg47
g39
sbsg78
I1
sg304
Nsg305
(lp6642
g47
asg82
I1
sg307
(dp6643
g60
Nssg310
(lp6644
g60
asbsg83
Nsg74
S'calculate_FD'
p6645
sg85
(dp6646
sg87
g6608
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6645
sg96
Nsg97
(lp6647
sg99
Nsg100
Nsb(dp6648
sg5
(g18
g7
Ntp6649
Rp6650
(dp6651
g22
(dp6652
sg24
g5
(g291
g7
Ntp6653
Rp6654
(dp6655
g29
g30
(g295
tp6656
Rp6657
(dp6658
g50
I00
sS'frames_after'
p6659
g39
sg302
S'def set_frames_ex(in_file, threshold, \n                  frames_before=1, frames_after=2):\n    """\n    Method to calculate Number of frames that would be censored \n    ("scrubbed") by removing the offending time frames \n    (i.e., those exceeding FD threshold), the preceding frame, \n    and the two subsequent frames\n\n    Parameters\n    ----------\n    in_file : a string \n        framewise displacement(FD) file path\n    threshold : a float\n         scrubbing threshold value set in configuration file\n    frames_before : an integer\n        number of frames preceding the offending time frame\n        by default value is 1\n    frames_after : an integer\n        number of frames following the offending time frame\n        by default value is 2\n\n    Returns\n    -------\n    out_file : string\n        path to file containing offending time frames\n    """\n\n    import os\n    import numpy as np\n    from numpy import loadtxt\n\n    out_file = os.path.join(os.getcwd(), \'frames_ex.1D\')\n    data = loadtxt(in_file)\n    #masking zeroth timepoint value as 0, since the mean displacment value for\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\n    data[0] = 0\n\n    extra_indices = []\n\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\n    #print "initial indices-->", indices\n\n    for i in indices:\n\n        #remove preceding frames\n        if i > 0 :\n            count = 1\n            while count <= frames_before:\n                extra_indices.append(i-count)\n                count+=1\n\n        #remove following frames\n        count = 1\n        while count <= frames_after:\n            extra_indices.append(i+count)\n            count+=1\n\n    indices = list(set(indices) | set(extra_indices))\n    indices.sort()\n\n    f = open(out_file, \'a\')\n\n    #print "indices preceding and following -->", \\\n    #      set(extra_indices)\n    #print "final indices -->", indices\n    for idx in indices:\n        f.write(\'%s,\' % int(idx))\n\n    f.close()\n\n    return out_file\n'
p6660
sg47
g39
sg6601
g39
sg35
g36
sS'frames_before'
p6661
g39
sbsg78
I1
sg304
Nsg305
(lp6662
g47
ag6601
ag6661
ag6659
asg82
I1
sg307
(dp6663
g60
Nssg310
(lp6664
g60
asbsg83
Nsg74
S'exclude_frames'
p6665
sg85
(dp6666
sg87
g6608
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6665
sg96
Nsg97
(lp6667
sg99
Nsg100
Nsb(dp6668
sg5
(g18
g7
Ntp6669
Rp6670
(dp6671
g22
(dp6672
sg24
g5
(g291
g7
Ntp6673
Rp6674
(dp6675
g29
g30
(g295
tp6676
Rp6677
(dp6678
g50
I00
sg35
g36
sS'scan_id'
p6679
g39
sS'subject_id'
p6680
g39
sS'DVARS'
p6681
g39
sg302
S'def gen_power_parameters(subject_id, scan_id, FDP_1D, FDJ_1D, DVARS, \\\n                             threshold = 1.0):\n\n    """\n    Method to generate Power parameters for scrubbing\n\n    Parameters\n    ----------\n    subject_id : string\n        subject name or id\n    scan_id : string\n        scan name or id\n    FD_ID: string \n        framewise displacement(FD as per power et al., 2012) file path\n    FDJ_ID: string \n        framewise displacement(FD as per jenkinson et al., 2002) file path\n    threshold : float\n        scrubbing threshold set in the configuration\n        by default the value is set to 1.0\n    DVARS : string \n        path to numpy file containing DVARS\n\n    Returns\n    -------\n    out_file : string (csv file)\n        path to csv file containing all the pow parameters \n    """\n\n    import os\n    import numpy as np\n    from numpy import loadtxt\n\n    powersFD_data = loadtxt(FDP_1D)\n    jenkFD_data = loadtxt(FDJ_1D)\n\n    #Mean (across time/frames) of the absolute values \n    #for Framewise Displacement (FD)\n    meanFD_Power  = np.mean(powersFD_data)\n\n    #Mean FD Jenkinson\n    meanFD_Jenkinson = np.mean(jenkFD_data)\n\n    #Number of frames (time points) where movement \n    #(FD) exceeded threshold\n    numFD = float(jenkFD_data[jenkFD_data > threshold].size)\n\n    #Root mean square (RMS; across time/frames) \n    #of the absolute values for FD\n    rmsFD = np.sqrt(np.mean(jenkFD_data))\n\n    #Mean of the top quartile of FD is $FDquartile\n    quat=int(len(jenkFD_data)/4)\n    FDquartile=np.mean(np.sort(jenkFD_data)[::-1][:quat])\n\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\n    count = np.float(jenkFD_data[jenkFD_data>threshold].size)\n    percentFD = (count*100/(len(jenkFD_data)+1))\n\n    #Mean DVARS \n    meanDVARS = np.mean(np.load(DVARS))\n\n\n    out_file = os.path.join(os.getcwd(), \'pow_params.txt\')\n\n    with open(out_file,\'w\') as f:\n\n        print >>f, "Subject,Scan,MeanFD_Power,MeanFD_Jenkinson," \\\n        "NumFD_greater_than_%.2f,rootMeanSquareFD,FDquartile(top1/4thFD)," \\\n        "PercentFD_greater_than_%.2f,MeanDVARS" % (threshold,threshold)\n\n        f.write("%s," % subject_id)\n        f.write("%s," % scan_id)\n\n        f.write(\'%.4f,\' % meanFD_Power)\n\n        f.write(\'%.4f,\' % meanFD_Jenkinson)\n\n        f.write(\'%.4f,\' % numFD)\n\n        f.write(\'%.4f,\' % rmsFD)\n\n        f.write(\'%.4f,\' % FDquartile)\n\n        f.write(\'%.4f,\' % percentFD)\n\n        f.write(\'%.4f\' % meanDVARS)\n\n\n    return out_file\n'
p6682
sS'FDJ_1D'
p6683
g39
sg6601
g39
sS'FDP_1D'
p6684
g39
sbsg78
I1
sg304
Nsg305
(lp6685
g6680
ag6679
ag6684
ag6683
ag6601
ag6681
asg82
I1
sg307
(dp6686
g60
Nssg310
(lp6687
g60
asbsg83
Nsg74
S'calc_power_parameters'
p6688
sg85
(dp6689
sg87
g6608
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6688
sg96
Nsg97
(lp6690
sg99
Nsg100
Nsb(dp6691
sg5
(g18
g7
Ntp6692
Rp6693
(dp6694
g22
(dp6695
sg24
g5
(g291
g7
Ntp6696
Rp6697
(dp6698
g29
g30
(g295
tp6699
Rp6700
(dp6701
g50
I00
sg41
g39
sg35
g36
sg302
S'def calculate_DVARS(rest, mask):\n    """\n    Method to calculate DVARS as per\n    power\'s method\n\n    Parameters\n    ----------\n    rest : string (nifti file)\n        path to motion correct functional data\n    mask : string (nifti file)\n        path to brain only mask for functional data\n\n    Returns\n    -------\n    out_file : string (numpy mat file)\n        path to file containing  array of DVARS \n        calculation for each voxel\n    """\n\n    import numpy as np\n    import nibabel as nib\n    import os\n\n    out_file = os.path.join(os.getcwd(), \'DVARS.npy\')\n\n    rest_data = nib.load(rest).get_data().astype(np.float32)\n    mask_data = nib.load(mask).get_data().astype(\'bool\')\n\n    #square of relative intensity value for each voxel across\n    #every timepoint \n    data = np.square(np.diff(rest_data, axis = 3))\n    #applying mask, getting the data in the brain only\n    data = data[mask_data]\n    #square root and mean across all timepoints inside mask\n    DVARS = np.sqrt(np.mean(data, axis=0))\n\n\n    np.save(out_file, DVARS)\n\n    return out_file\n'
p6702
sg2115
g39
sbsg78
I1
sg304
Nsg305
(lp6703
g2115
ag41
asg82
I1
sg307
(dp6704
g60
Nssg310
(lp6705
g60
asbsg83
Nsg74
S'cal_DVARS'
p6706
sg85
(dp6707
sg87
g6608
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6706
sg96
Nsg97
(lp6708
sg99
Nsg100
Nsb(dp6709
sg5
(g18
g7
Ntp6710
Rp6711
(dp6712
g22
(dp6713
sg24
g5
(g291
g7
Ntp6714
Rp6715
(dp6716
g29
g30
(g295
tp6717
Rp6718
(dp6719
g50
I00
sg1568
g39
sg6679
g39
sg6680
g39
sg302
S'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\n    """\n    Method to calculate all the movement parameters\n\n    Parameters\n    ----------\n    subject_id : string\n        subject name or id\n    scan_id : string\n        scan name or id\n    max_displacement : string \n        path of file with maximum displacement (in mm) for brain voxels in each volume    \n    movement_parameters : string \n        path of 1D file containing six movement/motion parameters(3 Translation, \n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\n\n    Returns \n    -------\n    out_file : string \n        path to csv file contianing various motion parameters\n\n    """\n\n    import os\n    import numpy as np\n    import re\n\n    out_file = os.path.join(os.getcwd(), \'motion_parameters.txt\')\n\n    f = open(out_file, \'w\')\n    #f.write(str(os.getcwd()))   ### work\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\n\n\n    f.write("%s," % (subject_id))\n    f.write("%s," % (scan_id))\n\n    arr = np.genfromtxt(movement_parameters)\n    arr = arr.T\n\n    ##Relative RMS of translation\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\n    diff = np.diff(rms)\n    MEANrms = np.mean(abs(diff))\n    f.write("%.3f," % (MEANrms))\n\n    #Max Relative RMS Displacement\n    MAXrms = np.max(abs(diff))\n    f.write("%.3f," % (MAXrms))\n\n    ##NUMBER OF relative RMS movements >0.1mm\n    NUMmove = np.sum(abs(diff) > 0.1)\n    f.write("%.3f," % (NUMmove))\n\n    ##Mean of mean relative rotation (params 1-3)\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\n    f.write("%.3f," % (MEANrot))\n\n    file = open(max_displacement, \'r\')\n    lines = file.readlines()\n    file.close()\n    list1 = []\n\n    #remove any other information aother than matrix from\n    #max displacement file. afni adds infomration to the file\n    for l in lines:\n        if re.match("^\\d+?\\.\\d+?$", l.strip()):\n            list1.append(float(l.strip()))\n\n    arr2 = np.array(list1, dtype=\'float\')\n\n    #Mean Relative Maxdisp\n    mean = np.mean(np.diff(arr2))\n    f.write("%.3f," % (mean))\n\n    #Max Relative Maxdisp\n    relMAX = np.max(abs(np.diff(arr2)))\n    f.write("%.3f," % (relMAX))\n\n    #Max Abs Maxdisp\n    MAX= np.max(arr2)\n    f.write("%.3f," %(MAX))\n\n    #Max Relative Roll,Max Relative Pitch,\n    #Max Relative Yaw,Max Relative dS-I,\n    #Max Relative dL-R,Max Relative dP-A\n    for i in range(6):\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\n\n    #Mean Relative Roll,Mean Relative Pitch,\n    #Mean Relative Yaw,Mean Relative dS-I,\n    #Mean Relative dL-R,Mean Relative dP-A\n    for i in range(6):\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\n\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\n    for i in range(6):\n        f.write("%.6f," %(np.max(abs(arr[i]))))\n\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \n    for i in range(6):\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\n\n    f.close()\n    return out_file\n'
p6720
sg1879
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp6721
g6680
ag6679
ag1879
ag1568
asg82
I1
sg307
(dp6722
g60
Nssg310
(lp6723
g60
asbsg83
Nsg74
S'calc_motion_parameters'
p6724
sg85
(dp6725
sg87
g6608
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6724
sg96
Nsg97
(lp6726
sg99
Nsg100
Nsb(dp6727
sg5
(g18
g7
Ntp6728
Rp6729
(dp6730
g22
(dp6731
sg24
g5
(g106
g7
Ntp6732
Rp6733
(dp6734
g29
g30
(g110
tp6735
Rp6736
(dp6737
g35
g36
sS'frames_ex_1D'
p6738
g39
sg6683
g39
sS'FD_1D'
p6739
g39
sS'frames_in_1D'
p6740
g39
sS'motion_params'
p6741
g39
sg6583
g39
sbsg117
(lp6742
g6739
ag6683
ag6738
ag6740
ag6583
ag6741
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp6743
sg87
g6608
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp6744
sg99
Nsg100
Nsb(dp6745
sg5
(g18
g7
Ntp6746
Rp6747
(dp6748
g22
(dp6749
sg24
g5
(g291
g7
Ntp6750
Rp6751
(dp6752
g29
g30
(g295
tp6753
Rp6754
(dp6755
g50
I00
sS'exclude_list'
p6756
g39
sg302
S'def set_frames_in(in_file, threshold, exclude_list):\n\n    """\n     Method to Calculate  the frames that are left\n     after censoring for scrubbing.\n\n     Parameters\n     ----------\n     in_file : string\n        framewise displacement(FD) file path\n     threshold : float\n        scrubbing thereshold set in configuration file\n     exclude_list : string\n        path of file containing sensored timepoints\n\n     Returns\n     -------\n     out_file : string \n        path of file containing remaining uncensored timepoints \n    """\n\n    import os\n    import numpy as np\n    from numpy import loadtxt\n\n    out_file = os.path.join(os.getcwd(), \'frames_in.1D\')\n\n    data = loadtxt(in_file)\n    #masking zeroth timepoint value as 0, since the mean displacment value for\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\n    data[0] = 0\n\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\n\n    indx = []\n    f = open(exclude_list, \'r\')\n    line = f.readline()\n    if line:\n        line = line.strip(\',\')\n        indx = map(int, line.split(","))\n    f.close()\n    print indx\n\n    if indx:\n        indices = list(set(indices) - set(indx))\n\n    f = open(out_file, \'a\')\n\n    for idx in indices:\n        f.write(\'%s,\' % int(idx))\n\n    f.close()\n\n    return out_file\n'
p6757
sg47
g39
sg6601
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp6758
g47
ag6601
ag6756
asg82
I1
sg307
(dp6759
g60
Nssg310
(lp6760
g60
asbsg83
Nsg74
S'include_frames'
p6761
sg85
(dp6762
sg87
g6608
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6761
sg96
Nsg97
(lp6763
sg99
Nsg100
Nsb(dp6764
sg5
(g18
g7
Ntp6765
Rp6766
(dp6767
g22
(dp6768
sg24
g5
(g106
g7
Ntp6769
Rp6770
(dp6771
g29
g30
(g110
tp6772
Rp6773
(dp6774
g1568
g39
sg35
g36
sg6679
g39
sg6680
g39
sg41
g39
sg1879
g39
sg1627
g39
sg1880
g39
sbsg117
(lp6775
g6680
ag6679
ag1879
ag1568
ag1880
ag41
ag1627
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp6776
sg87
g6608
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp6777
sg99
Nsg100
Nsb(dp6778
ssg140
g65
sg141
g65
sg142
(dp6779
g6592
(dp6780
g6670
(dp6781
g146
(lp6782
(g6601
g6601
tp6783
assg6650
(dp6784
g146
(lp6785
(g6601
g6601
tp6786
a(g6603
g6661
tp6787
a(g6604
g6659
tp6788
assg6747
(dp6789
g146
(lp6790
(g6601
g6601
tp6791
asssg6614
(dp6792
g6670
(dp6793
g146
(lp6794
(g60
g6683
tp6795
assg6729
(dp6796
g146
(lp6797
(g60
g6683
tp6798
asssg6632
(dp6799
g6670
(dp6800
g146
(lp6801
(g60
g6684
tp6802
assg6729
(dp6803
g146
(lp6804
(g60
g6739
tp6805
assg6747
(dp6806
g146
(lp6807
(g60
g47
tp6808
assg6650
(dp6809
g146
(lp6810
(g60
g47
tp6811
asssg6650
(dp6812
g6729
(dp6813
g146
(lp6814
(g60
g6738
tp6815
assg6747
(dp6816
g146
(lp6817
(g60
g6756
tp6818
asssg6670
(dp6819
g6729
(dp6820
g146
(lp6821
(g60
g6583
tp6822
asssg6693
(dp6823
g6670
(dp6824
g146
(lp6825
(g60
g6681
tp6826
asssg6711
(dp6827
g6729
(dp6828
g146
(lp6829
(g60
g6741
tp6830
asssg6729
(dp6831
sg6747
(dp6832
g6729
(dp6833
g146
(lp6834
(g60
g6740
tp6835
asssg6766
(dp6836
g6670
(dp6837
g146
(lp6838
(g6680
g6680
tp6839
a(g6679
g6679
tp6840
assg6632
(dp6841
g146
(lp6842
(g1879
g47
tp6843
assg6711
(dp6844
g146
(lp6845
(g6680
g6680
tp6846
a(g6679
g6679
tp6847
a(g1879
g1879
tp6848
a(g1568
g1568
tp6849
assg6693
(dp6850
g146
(lp6851
(g1880
g2115
tp6852
a(g41
g41
tp6853
assg6614
(dp6854
g146
(lp6855
(g1627
g47
tp6856
assssg157
g6779
sg158
(dp6857
sg160
g65
sg161
g6779
sg162
(dp6858
g6592
(dp6859
sg6614
(dp6860
g6766
g6854
ssg6632
(dp6861
g6766
g6841
ssg6650
(dp6862
g6632
g6809
sg6592
g6784
ssg6670
(dp6863
g6632
g6800
sg6592
g6781
sg6614
g6793
sg6766
g6837
sg6693
g6824
ssg6693
(dp6864
g6766
g6850
ssg6711
(dp6865
g6766
g6844
ssg6729
(dp6866
g6614
g6796
sg6632
g6803
sg6650
g6813
sg6711
g6828
sg6670
g6820
sg6747
g6833
ssg6747
(dp6867
g6632
g6806
sg6650
g6816
sg6592
g6789
ssg6766
(dp6868
ssbsg74
g6608
sg87
g167
sg95
g6608
sg96
g168
((lp6869
(lp6870
g171
ag168
((lp6871
(lp6872
g174
ag175
aa(lp6873
g177
ag178
aa(lp6874
g180
ag181
aa(lp6875
g183
ag184
aa(lp6876
g186
ag187
aa(lp6877
g189
ag190
aa(lp6878
g192
ag193
aatp6879
Rp6880
aa(lp6881
g197
ag168
((lp6882
(lp6883
g200
ag201
aa(lp6884
g203
ag204
aa(lp6885
g206
ag207
aa(lp6886
g209
ag210
aa(lp6887
g212
ag213
aa(lp6888
g215
ag216
aa(lp6889
g218
ag219
aa(lp6890
g221
ag222
aa(lp6891
g224
ag225
aa(lp6892
g227
ag228
aa(lp6893
g230
ag231
aa(lp6894
g233
ag234
aa(lp6895
g236
ag237
aa(lp6896
g239
ag240
aa(lp6897
g242
ag243
aa(lp6898
g245
ag246
aa(lp6899
g248
ag249
aa(lp6900
g251
ag252
aa(lp6901
g254
ag255
aa(lp6902
g257
ag258
aa(lp6903
g260
ag261
aa(lp6904
g263
ag264
aatp6905
Rp6906
aa(lp6907
g268
ag168
((lp6908
(lp6909
g271
ag272
aatp6910
Rp6911
aatp6912
Rp6913
sg100
NsbS'outputspec.power_params'
p6914
tp6915
sS'mni_normalized_anatomical'
p6916
(g281
g6409
tp6917
sS'output_means.@falff_to_standard_average'
p6918
(g5
(g18
g7
Ntp6919
Rp6920
(dp6921
g22
(dp6922
sg24
g5
(g291
g7
Ntp6923
Rp6924
(dp6925
g29
g30
(g295
tp6926
Rp6927
(dp6928
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p6929
sg632
S'falff_to_standard'
p6930
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp6931
g47
ag632
asg82
I1
sg307
(dp6932
g636
Nssg310
(lp6933
g636
asbsg83
Nsg74
S'falff_to_standard_mean_to_txt_0'
p6934
sg85
(dp6935
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6934
sg96
Nsg97
(lp6936
sg99
Nsg100
Nsbg636
tp6937
sS'scrubbing_frames_included'
p6938
(g6585
S'outputspec.frames_in_1D'
p6939
tp6940
sS'anatomical_wm_mask'
p6941
(g763
S'outputspec.wm_mask'
p6942
tp6943
sS'motion_correct_to_standard_smooth'
p6944
(g5
(g18
g7
Ntp6945
Rp6946
(dp6947
g22
(dp6948
sg24
g5
(g801
g7
Ntp6949
Rp6950
(dp6951
g29
g30
(g805
tp6952
Rp6953
(dp6954
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp6955
g67
g68
stp6956
Rp6957
(dp6958
g72
S'environ_items'
p6959
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'motion_correct_to_standard_smooth_0'
p6960
sg85
(dp6961
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6960
sg96
Nsg97
(lp6962
sg99
Nsg100
Nsbg60
tp6963
sg329
(g3360
S'outputspec.brain'
p6964
tp6965
sS'centrality_outputs_smoothed'
p6966
(g5
(g2365
g7
Ntp6967
Rp6968
(dp6969
g2369
I00
sg22
(dp6970
sg24
g5
(g801
g7
Ntp6971
Rp6972
(dp6973
g29
g30
(g805
tp6974
Rp6975
(dp6976
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp6977
g67
g68
stp6978
Rp6979
(dp6980
g72
S'environ_items'
p6981
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g5
(g893
g894
(lp6982
g4782
atp6983
Rp6984
(dp6985
g72
S'operand_files_items'
p6986
sg74
g819
sbsbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp6987
Rp6988
(dp6989
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp6990
g67
g68
stp6991
Rp6992
(dp6993
g72
S'environ_items'
p6994
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g5
(g893
g894
(lp6995
g4782
atp6996
Rp6997
(dp6998
g72
S'operand_files_items'
p6999
sg74
g819
sbsbsg74
S'network_centrality_smooth_0'
p7000
sg85
(dp7001
sg2388
I00
sg87
g167
sg2389
(lp7002
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g7000
sg96
Nsg97
(lp7003
sg99
Nsg100
Nsbg60
tp7004
sS'falff_to_standard'
p7005
(g5
(g6
g7
Ntp7006
Rp7007
(dp7008
g11
g5
(g12
g7
Ntp7009
Rp7010
(dp7011
g16
(dp7012
g5
(g18
g7
Ntp7013
Rp7014
(dp7015
g22
(dp7016
sg24
g5
(g106
g7
Ntp7017
Rp7018
(dp7019
g29
g30
(g110
tp7020
Rp7021
(dp7022
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp7023
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp7024
sg87
S'falff_to_standard_0'
p7025
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp7026
sg99
Nsg100
Nsb(dp7027
sg5
(g18
g7
Ntp7028
Rp7029
(dp7030
g22
(dp7031
sg24
g5
(g106
g7
Ntp7032
Rp7033
(dp7034
g29
g30
(g110
tp7035
Rp7036
(dp7037
g35
g36
sg876
g39
sbsg117
(lp7038
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp7039
sg87
g7025
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp7040
sg99
Nsg100
Nsb(dp7041
sg5
(g18
g7
Ntp7042
Rp7043
(dp7044
g22
(dp7045
sg24
g5
(g867
g7
Ntp7046
Rp7047
(dp7048
g29
g30
(g871
tp7049
Rp7050
(dp7051
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp7052
g883
S'1'
p7053
stp7054
Rp7055
(dp7056
g72
S'environ_items'
p7057
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp7058
sg87
g7025
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp7059
sg99
Nsg100
Nsb(dp7060
ssg140
g65
sg141
g65
sg142
(dp7061
g7014
(dp7062
g7043
(dp7063
g146
(lp7064
(g890
g890
tp7065
a(g889
g889
tp7066
a(g435
g435
tp7067
a(g474
g474
tp7068
a(g881
g881
tp7069
a(g900
g900
tp7070
asssg7029
(dp7071
sg7043
(dp7072
g7029
(dp7073
g146
(lp7074
(g876
g876
tp7075
assssg157
g7061
sg158
(dp7076
sg160
g65
sg161
g7061
sg162
(dp7077
g7014
(dp7078
sg7029
(dp7079
g7043
g7073
ssg7043
(dp7080
g7014
g7063
sssbsg74
g7025
sg87
g167
sg95
g7025
sg96
g168
((lp7081
(lp7082
g171
ag168
((lp7083
(lp7084
g174
ag175
aa(lp7085
g177
ag178
aa(lp7086
g180
ag181
aa(lp7087
g183
ag184
aa(lp7088
g186
ag187
aa(lp7089
g189
ag190
aa(lp7090
g192
ag193
aatp7091
Rp7092
aa(lp7093
g197
ag168
((lp7094
(lp7095
g200
ag201
aa(lp7096
g203
ag204
aa(lp7097
g206
ag207
aa(lp7098
g209
ag210
aa(lp7099
g212
ag213
aa(lp7100
g215
ag216
aa(lp7101
g218
ag219
aa(lp7102
g221
ag222
aa(lp7103
g224
ag225
aa(lp7104
g227
ag228
aa(lp7105
g230
ag231
aa(lp7106
g233
ag234
aa(lp7107
g236
ag237
aa(lp7108
g239
ag240
aa(lp7109
g242
ag243
aa(lp7110
g245
ag246
aa(lp7111
g248
ag249
aa(lp7112
g251
ag252
aa(lp7113
g254
ag255
aa(lp7114
g257
ag258
aa(lp7115
g260
ag261
aa(lp7116
g263
ag264
aatp7117
Rp7118
aa(lp7119
g268
ag168
((lp7120
(lp7121
g271
ag272
aatp7122
Rp7123
aatp7124
Rp7125
sg100
Nsbg2362
tp7126
sg1879
(g5
(g6
g7
Ntp7127
Rp7128
(dp7129
g11
g5
(g12
g7
Ntp7130
Rp7131
(dp7132
g16
(dp7133
g5
(g18
g7
Ntp7134
Rp7135
(dp7136
g22
(dp7137
sg24
g5
(g106
g7
Ntp7138
Rp7139
(dp7140
g29
g30
(g110
tp7141
Rp7142
(dp7143
g35
g36
sS'movement_file'
p7144
g39
sbsg117
(lp7145
g7144
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp7146
sg87
S'fristons_parameter_model_0'
p7147
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp7148
sg99
Nsg100
Nsb(dp7149
sg5
(g18
g7
Ntp7150
Rp7151
(dp7152
g22
(dp7153
sg24
g5
(g106
g7
Ntp7154
Rp7155
(dp7156
g29
g30
(g110
tp7157
Rp7158
(dp7159
g35
g36
sg7144
g39
sbsg117
(lp7160
g7144
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp7161
sg87
g7147
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp7162
sg99
Nsg100
Nsb(dp7163
sg5
(g18
g7
Ntp7164
Rp7165
(dp7166
g22
(dp7167
sg24
g5
(g291
g7
Ntp7168
Rp7169
(dp7170
g29
g30
(g295
tp7171
Rp7172
(dp7173
g50
I00
sg35
g36
sg302
S'def calc_friston_twenty_four(in_file):\n    """\n    Method to calculate friston twenty four parameters\n\n    Parameters\n    ----------\n    in_file: string\n        input movement parameters file from motion correction\n\n    Returns\n    -------\n    new_file: string\n        output 1D file containing 24 parameter values\n\n    """\n\n    import numpy as np\n    import os\n\n    new_data = None\n\n    data = np.genfromtxt(in_file)\n\n    data_squared = data ** 2\n\n    new_data = np.concatenate((data, data_squared), axis=1)\n\n    data_roll = np.roll(data, 1, axis=0)\n\n    data_roll[0] = 0\n\n    new_data = np.concatenate((new_data, data_roll), axis=1)\n\n    data_roll_squared = data_roll ** 2\n\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\n\n    new_file = os.path.join(os.getcwd(), \'fristons_twenty_four.1D\')\n    np.savetxt(new_file, new_data, fmt=\'%0.8f\', delimiter=\' \')\n\n    return new_file\n'
p7174
sg47
g39
sbsg78
I1
sg304
Nsg305
(lp7175
g47
asg82
I1
sg307
(dp7176
g60
Nssg310
(lp7177
g60
asbsg83
Nsg74
S'calc_friston'
p7178
sg85
(dp7179
sg87
g7147
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g7178
sg96
Nsg97
(lp7180
sg99
Nsg100
Nsb(dp7181
ssg140
g65
sg141
g65
sg142
(dp7182
g7135
(dp7183
sg7151
(dp7184
g7165
(dp7185
g146
(lp7186
(g7144
g47
tp7187
asssg7165
(dp7188
g7135
(dp7189
g146
(lp7190
(g60
g7144
tp7191
assssg157
g7182
sg158
(dp7192
sg160
g65
sg161
g7182
sg162
(dp7193
g7135
(dp7194
g7165
g7189
ssg7151
(dp7195
sg7165
(dp7196
g7151
g7185
sssbsg74
g7147
sg87
g167
sg95
g7147
sg96
g168
((lp7197
(lp7198
g171
ag168
((lp7199
(lp7200
g174
ag175
aa(lp7201
g177
ag178
aa(lp7202
g180
ag181
aa(lp7203
g183
ag184
aa(lp7204
g186
ag187
aa(lp7205
g189
ag190
aa(lp7206
g192
ag193
aatp7207
Rp7208
aa(lp7209
g197
ag168
((lp7210
(lp7211
g200
ag201
aa(lp7212
g203
ag204
aa(lp7213
g206
ag207
aa(lp7214
g209
ag210
aa(lp7215
g212
ag213
aa(lp7216
g215
ag216
aa(lp7217
g218
ag219
aa(lp7218
g221
ag222
aa(lp7219
g224
ag225
aa(lp7220
g227
ag228
aa(lp7221
g230
ag231
aa(lp7222
g233
ag234
aa(lp7223
g236
ag237
aa(lp7224
g239
ag240
aa(lp7225
g242
ag243
aa(lp7226
g245
ag246
aa(lp7227
g248
ag249
aa(lp7228
g251
ag252
aa(lp7229
g254
ag255
aa(lp7230
g257
ag258
aa(lp7231
g260
ag261
aa(lp7232
g263
ag264
aatp7233
Rp7234
aa(lp7235
g268
ag168
((lp7236
(lp7237
g271
ag272
aatp7238
Rp7239
aatp7240
Rp7241
sg100
NsbS'outputspec.movement_file'
p7242
tp7243
sS'dr_tempreg_maps_zstat_stack_to_standard_smooth'
p7244
(g5
(g18
g7
Ntp7245
Rp7246
(dp7247
g22
(dp7248
sg24
g5
(g801
g7
Ntp7249
Rp7250
(dp7251
g29
g30
(g805
tp7252
Rp7253
(dp7254
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp7255
g67
g68
stp7256
Rp7257
(dp7258
g72
S'environ_items'
p7259
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'dr_tempreg_maps_zstat_stack_smooth_0'
p7260
sg85
(dp7261
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g7260
sg96
Nsg97
(lp7262
sg99
Nsg100
Nsbg60
tp7263
sS'symmetric_mni_to_anatomical_nonlinear_xfm'
p7264
(g4481
S'outputspec.inverse_warp_field'
p7265
tp7266
sS'functional_to_standard'
p7267
(g5
(g6
g7
Ntp7268
Rp7269
(dp7270
g11
g5
(g12
g7
Ntp7271
Rp7272
(dp7273
g16
(dp7274
g5
(g18
g7
Ntp7275
Rp7276
(dp7277
g22
(dp7278
sg24
g5
(g106
g7
Ntp7279
Rp7280
(dp7281
g29
g30
(g110
tp7282
Rp7283
(dp7284
g35
g36
sg881
I3
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp7285
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp7286
sg87
S'apply_ants_warp_functional_to_standard_0'
p7287
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp7288
sg99
Nsg100
Nsb(dp7289
sg5
(g18
g7
Ntp7290
Rp7291
(dp7292
g22
(dp7293
sg24
g5
(g106
g7
Ntp7294
Rp7295
(dp7296
g29
g30
(g110
tp7297
Rp7298
(dp7299
g35
g36
sg876
g39
sbsg117
(lp7300
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp7301
sg87
g7287
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp7302
sg99
Nsg100
Nsb(dp7303
sg5
(g18
g7
Ntp7304
Rp7305
(dp7306
g22
(dp7307
sg24
g5
(g867
g7
Ntp7308
Rp7309
(dp7310
g29
g30
(g871
tp7311
Rp7312
(dp7313
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp7314
g883
S'1'
p7315
stp7316
Rp7317
(dp7318
g72
S'environ_items'
p7319
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp7320
sg87
g7287
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp7321
sg99
Nsg100
Nsb(dp7322
ssg140
g65
sg141
g65
sg142
(dp7323
g7276
(dp7324
g7305
(dp7325
g146
(lp7326
(g890
g890
tp7327
a(g889
g889
tp7328
a(g435
g435
tp7329
a(g474
g474
tp7330
a(g881
g881
tp7331
a(g900
g900
tp7332
asssg7291
(dp7333
sg7305
(dp7334
g7291
(dp7335
g146
(lp7336
(g876
g876
tp7337
assssg157
g7323
sg158
(dp7338
sg160
g65
sg161
g7323
sg162
(dp7339
g7276
(dp7340
sg7291
(dp7341
g7305
g7335
ssg7305
(dp7342
g7276
g7325
sssbsg74
g7287
sg87
g167
sg95
g7287
sg96
g168
((lp7343
(lp7344
g171
ag168
((lp7345
(lp7346
g174
ag175
aa(lp7347
g177
ag178
aa(lp7348
g180
ag181
aa(lp7349
g183
ag184
aa(lp7350
g186
ag187
aa(lp7351
g189
ag190
aa(lp7352
g192
ag193
aatp7353
Rp7354
aa(lp7355
g197
ag168
((lp7356
(lp7357
g200
ag201
aa(lp7358
g203
ag204
aa(lp7359
g206
ag207
aa(lp7360
g209
ag210
aa(lp7361
g212
ag213
aa(lp7362
g215
ag216
aa(lp7363
g218
ag219
aa(lp7364
g221
ag222
aa(lp7365
g224
ag225
aa(lp7366
g227
ag228
aa(lp7367
g230
ag231
aa(lp7368
g233
ag234
aa(lp7369
g236
ag237
aa(lp7370
g239
ag240
aa(lp7371
g242
ag243
aa(lp7372
g245
ag246
aa(lp7373
g248
ag249
aa(lp7374
g251
ag252
aa(lp7375
g254
ag255
aa(lp7376
g257
ag258
aa(lp7377
g260
ag261
aa(lp7378
g263
ag264
aatp7379
Rp7380
aa(lp7381
g268
ag168
((lp7382
(lp7383
g271
ag272
aatp7384
Rp7385
aatp7386
Rp7387
sg100
Nsbg3292
tp7388
sS'mni_to_anatomical_nonlinear_xfm'
p7389
(g281
g7265
tp7390
sS'functional_to_anat_linear_xfm'
p7391
(g5178
S'outputspec.func_to_anat_linear_xfm'
p7392
tp7393
sS'seg_partial_volume_files'
p7394
(g763
S'outputspec.partial_volume_files'
p7395
tp7396
sS'output_means.@raw_reho_map_average'
p7397
(g5
(g18
g7
Ntp7398
Rp7399
(dp7400
g22
(dp7401
sg24
g5
(g291
g7
Ntp7402
Rp7403
(dp7404
g29
g30
(g295
tp7405
Rp7406
(dp7407
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p7408
sg632
g4927
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp7409
g47
ag632
asg82
I1
sg307
(dp7410
g636
Nssg310
(lp7411
g636
asbsg83
Nsg74
S'raw_reho_map_mean_to_txt_0'
p7412
sg85
(dp7413
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g7412
sg96
Nsg97
(lp7414
sg99
Nsg100
Nsbg636
tp7415
sS'dr_tempreg_maps_zstat_stack_to_standard'
p7416
(g5
(g6
g7
Ntp7417
Rp7418
(dp7419
g11
g5
(g12
g7
Ntp7420
Rp7421
(dp7422
g16
(dp7423
g5
(g18
g7
Ntp7424
Rp7425
(dp7426
g22
(dp7427
sg24
g5
(g867
g7
Ntp7428
Rp7429
(dp7430
g29
g30
(g871
tp7431
Rp7432
(dp7433
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp7434
g883
S'1'
p7435
stp7436
Rp7437
(dp7438
g72
S'environ_items'
p7439
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp7440
sg87
S'dr_tempreg_maps_zstat_stack_to_standard_0'
p7441
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp7442
sg99
Nsg100
Nsb(dp7443
sg5
(g18
g7
Ntp7444
Rp7445
(dp7446
g22
(dp7447
sg24
g5
(g106
g7
Ntp7448
Rp7449
(dp7450
g29
g30
(g110
tp7451
Rp7452
(dp7453
g35
g36
sg881
I3
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp7454
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp7455
sg87
g7441
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp7456
sg99
Nsg100
Nsb(dp7457
sg5
(g18
g7
Ntp7458
Rp7459
(dp7460
g22
(dp7461
sg24
g5
(g106
g7
Ntp7462
Rp7463
(dp7464
g29
g30
(g110
tp7465
Rp7466
(dp7467
g35
g36
sg876
g39
sbsg117
(lp7468
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp7469
sg87
g7441
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp7470
sg99
Nsg100
Nsb(dp7471
ssg140
g65
sg141
g65
sg142
(dp7472
g7425
(dp7473
g7459
(dp7474
g146
(lp7475
(g876
g876
tp7476
asssg7445
(dp7477
g7425
(dp7478
g146
(lp7479
(g890
g890
tp7480
a(g889
g889
tp7481
a(g435
g435
tp7482
a(g474
g474
tp7483
a(g881
g881
tp7484
a(g900
g900
tp7485
asssg7459
(dp7486
ssg157
g7472
sg158
(dp7487
sg160
g65
sg161
g7472
sg162
(dp7488
g7425
(dp7489
g7445
g7478
ssg7445
(dp7490
sg7459
(dp7491
g7425
g7474
sssbsg74
g7441
sg87
g167
sg95
g7441
sg96
g168
((lp7492
(lp7493
g171
ag168
((lp7494
(lp7495
g174
ag175
aa(lp7496
g177
ag178
aa(lp7497
g180
ag181
aa(lp7498
g183
ag184
aa(lp7499
g186
ag187
aa(lp7500
g189
ag190
aa(lp7501
g192
ag193
aatp7502
Rp7503
aa(lp7504
g197
ag168
((lp7505
(lp7506
g200
ag201
aa(lp7507
g203
ag204
aa(lp7508
g206
ag207
aa(lp7509
g209
ag210
aa(lp7510
g212
ag213
aa(lp7511
g215
ag216
aa(lp7512
g218
ag219
aa(lp7513
g221
ag222
aa(lp7514
g224
ag225
aa(lp7515
g227
ag228
aa(lp7516
g230
ag231
aa(lp7517
g233
ag234
aa(lp7518
g236
ag237
aa(lp7519
g239
ag240
aa(lp7520
g242
ag243
aa(lp7521
g245
ag246
aa(lp7522
g248
ag249
aa(lp7523
g251
ag252
aa(lp7524
g254
ag255
aa(lp7525
g257
ag258
aa(lp7526
g260
ag261
aa(lp7527
g263
ag264
aatp7528
Rp7529
aa(lp7530
g268
ag168
((lp7531
(lp7532
g271
ag272
aatp7533
Rp7534
aatp7535
Rp7536
sg100
Nsbg2362
tp7537
sS'seg_probability_maps'
p7538
(g763
S'outputspec.probability_maps'
p7539
tp7540
sS'alff_smooth'
p7541
(g5
(g18
g7
Ntp7542
Rp7543
(dp7544
g22
(dp7545
sg24
g5
(g801
g7
Ntp7546
Rp7547
(dp7548
g29
g30
(g805
tp7549
Rp7550
(dp7551
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp7552
g67
g68
stp7553
Rp7554
(dp7555
g72
S'environ_items'
p7556
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'alff_smooth_0'
p7557
sg85
(dp7558
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g7557
sg96
Nsg97
(lp7559
sg99
Nsg100
Nsbg60
tp7560
sS'vmhc_fisher_zstd'
p7561
(g2398
S'outputspec.VMHC_Z_FWHM_img'
p7562
tp7563
sS'scrubbing_frames_excluded'
p7564
(g6585
S'outputspec.frames_ex_1D'
p7565
tp7566
sS'anatomical_to_mni_nonlinear_xfm'
p7567
(g281
g6385
tp7568
sS'frame_wise_displacement'
p7569
(g6585
S'outputspec.FD_1D'
p7570
tp7571
sS'ants_symmetric_rigid_xfm'
p7572
(g4481
g5049
tp7573
sS'output_means.@dr_tempreg_maps_files_to_standard_average'
p7574
(g5
(g2365
g7
Ntp7575
Rp7576
(dp7577
g2369
I00
sg22
(dp7578
sg24
g5
(g291
g7
Ntp7579
Rp7580
(dp7581
g29
g30
(g295
tp7582
Rp7583
(dp7584
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p7585
sg632
S'dr_tempreg_maps_files_to_standard'
p7586
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp7587
g47
ag632
asg82
I1
sg307
(dp7588
g636
Nssg310
(lp7589
g636
asbsg83
Nsg2382
g30
(g110
tp7590
Rp7591
(dp7592
g50
I00
sg302
g7585
sg632
g7586
sg47
g39
sg35
g36
sbsg74
S'dr_tempreg_maps_files_to_standard_mean_to_txt_0'
p7593
sg85
(dp7594
sg2388
I00
sg87
g167
sg2389
(lp7595
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g7593
sg96
Nsg97
(lp7596
sg99
Nsg100
Nsbg636
tp7597
sS'coordinate_transformation'
p7598
(g1570
S'outputspec.oned_matrix_save'
p7599
tp7600
sS'anat_to_symmetric_mni_ants_composite_xfm'
p7601
(g4481
g2394
tp7602
sS'dr_tempreg_maps_zstat_files'
p7603
(g5338
S'outputspec.temp_reg_map_z_files'
p7604
tp7605
sg1878
(g5
(g18
g7
Ntp7606
Rp7607
(dp7608
g22
(dp7609
sg24
g5
(cnipype.interfaces.afni.preprocess
TShift
p7610
g7
Ntp7611
Rp7612
(dp7613
g29
g30
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p7614
tp7615
Rp7616
(dp7617
g50
I00
sg35
g36
sS'tpattern'
p7618
g39
sg60
g39
sg5727
g39
sg52
g39
sg3851
g39
sg1588
g1589
sS'tzero'
p7619
g39
sS'ignore'
p7620
g39
sS'rltplus'
p7621
g39
sg54
g55
sS'tslice'
p7622
g39
sg47
g39
sS'rlt'
p7623
g39
sg63
g5
(g64
g65
(dp7624
tp7625
Rp7626
(dp7627
g72
S'environ_items'
p7628
sg74
g63
sbsbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
S'func_slice_timing_correction_0'
p7629
sg85
(dp7630
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g7629
sg96
Nsg97
(lp7631
sg99
Nsg100
Nsbg60
tp7632
sg6741
(g6585
S'outputspec.motion_params'
p7633
tp7634
sS'output_means.@alff_smooth_average'
p7635
(g5
(g18
g7
Ntp7636
Rp7637
(dp7638
g22
(dp7639
sg24
g5
(g291
g7
Ntp7640
Rp7641
(dp7642
g29
g30
(g295
tp7643
Rp7644
(dp7645
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p7646
sg632
S'alff_smooth'
p7647
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp7648
g47
ag632
asg82
I1
sg307
(dp7649
g636
Nssg310
(lp7650
g636
asbsg83
Nsg74
S'alff_smooth_mean_to_txt_0'
p7651
sg85
(dp7652
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g7651
sg96
Nsg97
(lp7653
sg99
Nsg100
Nsbg636
tp7654
sa(dp7655
g4
(g5
(g6
g7
Ntp7656
Rp7657
(dp7658
g11
g5
(g12
g7
Ntp7659
Rp7660
(dp7661
g16
(dp7662
g5
(g18
g7
Ntp7663
Rp7664
(dp7665
g22
(dp7666
sg24
g5
(g106
g7
Ntp7667
Rp7668
(dp7669
g29
g30
(g110
tp7670
Rp7671
(dp7672
g114
g39
sg115
g39
sg48
I01
sg35
g36
sg116
g39
sbsg117
(lp7673
g115
ag116
ag114
ag48
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp7674
sg87
S'spatial_map_timeseries_for_DR_1'
p7675
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp7676
sg99
Nsg100
Nsb(dp7677
sg5
(g18
g7
Ntp7678
Rp7679
(dp7680
g22
(dp7681
sg24
g5
(g25
g7
Ntp7682
Rp7683
(dp7684
g29
g30
(g31
tp7685
Rp7686
(dp7687
g35
g36
sg37
g39
sg40
g39
sg41
g39
sg42
g39
sg43
g39
sg44
g39
sg45
g39
sg46
g39
sg47
g39
sg48
g39
sg49
g39
sg50
I00
sg51
g39
sg52
g39
sg53
g39
sg54
g55
sg56
g39
sg57
g39
sg58
g39
sg59
g39
sg60
g61
sg62
g39
sg63
g5
(g64
g65
(dp7688
g67
g68
stp7689
Rp7690
(dp7691
g72
S'environ_items'
p7692
sg74
g63
sbsg75
g68
sg76
g39
sg77
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
g84
sg85
(dp7693
sg87
g7675
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g84
sg96
Nsg97
(lp7694
sg99
Nsg100
Nsb(dp7695
sg5
(g18
g7
Ntp7696
Rp7697
(dp7698
g22
(dp7699
sg24
g5
(g106
g7
Ntp7700
Rp7701
(dp7702
g29
g30
(g110
tp7703
Rp7704
(dp7705
g35
g36
sg134
g39
sbsg117
(lp7706
g134
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp7707
sg87
g7675
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp7708
sg99
Nsg100
Nsb(dp7709
ssg140
g65
sg141
g65
sg142
(dp7710
g7664
(dp7711
g7679
(dp7712
g146
(lp7713
(g115
g47
tp7714
a(g116
g41
tp7715
a(g114
g45
tp7716
a(g48
g48
tp7717
asssg7679
(dp7718
g7697
(dp7719
g146
(lp7720
(g60
g134
tp7721
asssg7697
(dp7722
ssg157
g7710
sg158
(dp7723
sg160
g65
sg161
g7710
sg162
(dp7724
g7664
(dp7725
sg7679
(dp7726
g7664
g7712
ssg7697
(dp7727
g7679
g7719
sssbsg74
g7675
sg87
g167
sg95
g7675
sg96
g168
((lp7728
(lp7729
g171
ag168
((lp7730
(lp7731
g174
ag175
aa(lp7732
g177
ag178
aa(lp7733
g180
ag181
aa(lp7734
g183
ag184
aa(lp7735
g186
ag187
aa(lp7736
g189
ag190
aa(lp7737
g192
ag193
aatp7738
Rp7739
aa(lp7740
g197
ag168
((lp7741
(lp7742
g200
ag201
aa(lp7743
g203
ag204
aa(lp7744
g206
ag207
aa(lp7745
g209
ag210
aa(lp7746
g212
ag213
aa(lp7747
g215
ag216
aa(lp7748
g218
ag219
aa(lp7749
g221
ag222
aa(lp7750
g224
ag225
aa(lp7751
g227
ag228
aa(lp7752
g230
ag231
aa(lp7753
g233
ag234
aa(lp7754
g236
ag237
aa(lp7755
g239
ag240
aa(lp7756
g242
ag243
aa(lp7757
g245
ag246
aa(lp7758
g248
ag249
aa(lp7759
g251
ag252
aa(lp7760
g254
ag255
aa(lp7761
g257
ag258
aa(lp7762
g260
ag261
aa(lp7763
g263
ag264
aatp7764
Rp7765
aa(lp7766
g268
ag168
((lp7767
(lp7768
g271
ag272
aatp7769
Rp7770
aatp7771
Rp7772
sg100
Nsbg277
tp7773
sg7391
g7393
sS'output_means.@reho_to_standard_smooth_average'
p7774
(g5
(g18
g7
Ntp7775
Rp7776
(dp7777
g22
(dp7778
sg24
g5
(g291
g7
Ntp7779
Rp7780
(dp7781
g29
g30
(g295
tp7782
Rp7783
(dp7784
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p7785
sg632
g633
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp7786
g47
ag632
asg82
I1
sg307
(dp7787
g636
Nssg310
(lp7788
g636
asbsg83
Nsg74
S'reho_to_standard_smooth_mean_to_txt_1'
p7789
sg85
(dp7790
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g7789
sg96
Nsg97
(lp7791
sg99
Nsg100
Nsbg636
tp7792
sg642
(g5
(g6
g7
Ntp7793
Rp7794
(dp7795
g11
g5
(g12
g7
Ntp7796
Rp7797
(dp7798
g16
(dp7799
g5
(g18
g7
Ntp7800
Rp7801
(dp7802
g22
(dp7803
sg24
g5
(g106
g7
Ntp7804
Rp7805
(dp7806
g29
g30
(g110
tp7807
Rp7808
(dp7809
g35
g36
sg134
g39
sbsg117
(lp7810
g134
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp7811
sg87
S'spatial_map_timeseries_1'
p7812
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp7813
sg99
Nsg100
Nsb(dp7814
sg5
(g18
g7
Ntp7815
Rp7816
(dp7817
g22
(dp7818
sg24
g5
(g106
g7
Ntp7819
Rp7820
(dp7821
g29
g30
(g110
tp7822
Rp7823
(dp7824
g114
g39
sg115
g39
sg48
I01
sg35
g36
sg116
g39
sbsg117
(lp7825
g115
ag116
ag114
ag48
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp7826
sg87
g7812
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp7827
sg99
Nsg100
Nsb(dp7828
sg5
(g18
g7
Ntp7829
Rp7830
(dp7831
g22
(dp7832
sg24
g5
(g25
g7
Ntp7833
Rp7834
(dp7835
g29
g30
(g31
tp7836
Rp7837
(dp7838
g35
g36
sg37
g39
sg40
g39
sg41
g39
sg42
g39
sg43
g39
sg44
g39
sg45
g39
sg46
g39
sg47
g39
sg48
g39
sg49
g39
sg50
I00
sg51
g39
sg52
g39
sg53
g39
sg54
g55
sg56
g39
sg57
g39
sg58
g39
sg59
g39
sg60
g61
sg62
g39
sg63
g5
(g64
g65
(dp7839
g67
g68
stp7840
Rp7841
(dp7842
g72
S'environ_items'
p7843
sg74
g63
sbsg75
g68
sg76
g39
sg77
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
g84
sg85
(dp7844
sg87
g7812
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g84
sg96
Nsg97
(lp7845
sg99
Nsg100
Nsb(dp7846
ssg140
g65
sg141
g65
sg142
(dp7847
g7801
(dp7848
sg7816
(dp7849
g7830
(dp7850
g146
(lp7851
(g115
g47
tp7852
a(g116
g41
tp7853
a(g114
g45
tp7854
a(g48
g48
tp7855
asssg7830
(dp7856
g7801
(dp7857
g146
(lp7858
(g60
g134
tp7859
assssg157
g7847
sg158
(dp7860
sg160
g65
sg161
g7847
sg162
(dp7861
g7801
(dp7862
g7830
g7857
ssg7816
(dp7863
sg7830
(dp7864
g7816
g7850
sssbsg74
g7812
sg87
g167
sg95
g7812
sg96
g168
((lp7865
(lp7866
g171
ag168
((lp7867
(lp7868
g174
ag175
aa(lp7869
g177
ag178
aa(lp7870
g180
ag181
aa(lp7871
g183
ag184
aa(lp7872
g186
ag187
aa(lp7873
g189
ag190
aa(lp7874
g192
ag193
aatp7875
Rp7876
aa(lp7877
g197
ag168
((lp7878
(lp7879
g200
ag201
aa(lp7880
g203
ag204
aa(lp7881
g206
ag207
aa(lp7882
g209
ag210
aa(lp7883
g212
ag213
aa(lp7884
g215
ag216
aa(lp7885
g218
ag219
aa(lp7886
g221
ag222
aa(lp7887
g224
ag225
aa(lp7888
g227
ag228
aa(lp7889
g230
ag231
aa(lp7890
g233
ag234
aa(lp7891
g236
ag237
aa(lp7892
g239
ag240
aa(lp7893
g242
ag243
aa(lp7894
g245
ag246
aa(lp7895
g248
ag249
aa(lp7896
g251
ag252
aa(lp7897
g254
ag255
aa(lp7898
g257
ag258
aa(lp7899
g260
ag261
aa(lp7900
g263
ag264
aatp7901
Rp7902
aa(lp7903
g268
ag168
((lp7904
(lp7905
g271
ag272
aatp7906
Rp7907
aatp7908
Rp7909
sg100
Nsbg277
tp7910
sg761
g1567
sg1568
g2030
sS'reho_to_standard_smooth'
p7911
(g5
(g18
g7
Ntp7912
Rp7913
(dp7914
g22
(dp7915
sg24
g5
(g801
g7
Ntp7916
Rp7917
(dp7918
g29
g30
(g805
tp7919
Rp7920
(dp7921
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp7922
g67
g68
stp7923
Rp7924
(dp7925
g72
S'environ_items'
p7926
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'reho_to_standard_smooth_1'
p7927
sg85
(dp7928
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g7927
sg96
Nsg97
(lp7929
sg99
Nsg100
Nsbg60
tp7930
sS'output_means.@alff_to_standard_smooth_average'
p7931
(g5
(g18
g7
Ntp7932
Rp7933
(dp7934
g22
(dp7935
sg24
g5
(g291
g7
Ntp7936
Rp7937
(dp7938
g29
g30
(g295
tp7939
Rp7940
(dp7941
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p7942
sg632
g2063
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp7943
g47
ag632
asg82
I1
sg307
(dp7944
g636
Nssg310
(lp7945
g636
asbsg83
Nsg74
S'alff_to_standard_smooth_mean_to_txt_1'
p7946
sg85
(dp7947
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g7946
sg96
Nsg97
(lp7948
sg99
Nsg100
Nsbg636
tp7949
sg2071
g2236
sS'reho_to_standard'
p7950
(g5
(g6
g7
Ntp7951
Rp7952
(dp7953
g11
g5
(g12
g7
Ntp7954
Rp7955
(dp7956
g16
(dp7957
g5
(g18
g7
Ntp7958
Rp7959
(dp7960
g22
(dp7961
sg24
g5
(g106
g7
Ntp7962
Rp7963
(dp7964
g29
g30
(g110
tp7965
Rp7966
(dp7967
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp7968
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp7969
sg87
S'reho_to_standard_1'
p7970
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp7971
sg99
Nsg100
Nsb(dp7972
sg5
(g18
g7
Ntp7973
Rp7974
(dp7975
g22
(dp7976
sg24
g5
(g106
g7
Ntp7977
Rp7978
(dp7979
g29
g30
(g110
tp7980
Rp7981
(dp7982
g35
g36
sg876
g39
sbsg117
(lp7983
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp7984
sg87
g7970
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp7985
sg99
Nsg100
Nsb(dp7986
sg5
(g18
g7
Ntp7987
Rp7988
(dp7989
g22
(dp7990
sg24
g5
(g867
g7
Ntp7991
Rp7992
(dp7993
g29
g30
(g871
tp7994
Rp7995
(dp7996
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp7997
g883
S'1'
p7998
stp7999
Rp8000
(dp8001
g72
S'environ_items'
p8002
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp8003
sg87
g7970
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp8004
sg99
Nsg100
Nsb(dp8005
ssg140
g65
sg141
g65
sg142
(dp8006
g7959
(dp8007
g7988
(dp8008
g146
(lp8009
(g890
g890
tp8010
a(g889
g889
tp8011
a(g435
g435
tp8012
a(g474
g474
tp8013
a(g881
g881
tp8014
a(g900
g900
tp8015
asssg7974
(dp8016
sg7988
(dp8017
g7974
(dp8018
g146
(lp8019
(g876
g876
tp8020
assssg157
g8006
sg158
(dp8021
sg160
g65
sg161
g8006
sg162
(dp8022
g7959
(dp8023
sg7974
(dp8024
g7988
g8018
ssg7988
(dp8025
g7959
g8008
sssbsg74
g7970
sg87
g167
sg95
g7970
sg96
g168
((lp8026
(lp8027
g171
ag168
((lp8028
(lp8029
g174
ag175
aa(lp8030
g177
ag178
aa(lp8031
g180
ag181
aa(lp8032
g183
ag184
aa(lp8033
g186
ag187
aa(lp8034
g189
ag190
aa(lp8035
g192
ag193
aatp8036
Rp8037
aa(lp8038
g197
ag168
((lp8039
(lp8040
g200
ag201
aa(lp8041
g203
ag204
aa(lp8042
g206
ag207
aa(lp8043
g209
ag210
aa(lp8044
g212
ag213
aa(lp8045
g215
ag216
aa(lp8046
g218
ag219
aa(lp8047
g221
ag222
aa(lp8048
g224
ag225
aa(lp8049
g227
ag228
aa(lp8050
g230
ag231
aa(lp8051
g233
ag234
aa(lp8052
g236
ag237
aa(lp8053
g239
ag240
aa(lp8054
g242
ag243
aa(lp8055
g245
ag246
aa(lp8056
g248
ag249
aa(lp8057
g251
ag252
aa(lp8058
g254
ag255
aa(lp8059
g257
ag258
aa(lp8060
g260
ag261
aa(lp8061
g263
ag264
aatp8062
Rp8063
aa(lp8064
g268
ag168
((lp8065
(lp8066
g271
ag272
aatp8067
Rp8068
aatp8069
Rp8070
sg100
Nsbg2362
tp8071
sS'output_means.@dr_tempreg_maps_files_average'
p8072
(g5
(g2365
g7
Ntp8073
Rp8074
(dp8075
g2369
I00
sg22
(dp8076
sg24
g5
(g291
g7
Ntp8077
Rp8078
(dp8079
g29
g30
(g295
tp8080
Rp8081
(dp8082
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p8083
sg632
g2378
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp8084
g47
ag632
asg82
I1
sg307
(dp8085
g636
Nssg310
(lp8086
g636
asbsg83
Nsg2382
g30
(g110
tp8087
Rp8088
(dp8089
g50
I00
sg302
g8083
sg632
g2378
sg47
g39
sg35
g36
sbsg74
S'dr_tempreg_maps_files_mean_to_txt_1'
p8090
sg85
(dp8091
sg2388
I00
sg87
g167
sg2389
(lp8092
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g8090
sg96
Nsg97
(lp8093
sg99
Nsg100
Nsbg636
tp8094
sg2393
g2395
sg2396
(g5
(g6
g7
Ntp8095
Rp8096
(dp8097
g11
g5
(g12
g7
Ntp8098
Rp8099
(dp8100
g16
(dp8101
g5
(g6
g7
Ntp8102
Rp8103
(dp8104
g11
g5
(g12
g7
Ntp8105
Rp8106
(dp8107
g16
(dp8108
g5
(g18
g7
Ntp8109
Rp8110
(dp8111
g22
(dp8112
sg24
g5
(g106
g7
Ntp8113
Rp8114
(dp8115
g29
g30
(g110
tp8116
Rp8117
(dp8118
g35
g36
sg2677
g39
sg2678
g39
sg2679
g39
sbsg117
(lp8119
g2677
ag2679
ag2678
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp8120
sg87
g2682
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp8121
sg99
Nsg100
Nsb(dp8122
sg5
(g18
g7
Ntp8123
Rp8124
(dp8125
g22
(dp8126
sg24
g5
(g106
g7
Ntp8127
Rp8128
(dp8129
g29
g30
(g110
tp8130
Rp8131
(dp8132
g35
g36
sg2695
g39
sbsg117
(lp8133
g2695
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp8134
sg87
g2682
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp8135
sg99
Nsg100
Nsb(dp8136
sg5
(g18
g7
Ntp8137
Rp8138
(dp8139
g22
(dp8140
sg24
g5
(g2704
g7
Ntp8141
Rp8142
(dp8143
g29
g30
(g2708
tp8144
Rp8145
(dp8146
g50
I00
sg35
g36
sg52
g39
sg2712
I01
sg54
g55
sg63
g5
(g64
g65
(dp8147
tp8148
Rp8149
(dp8150
g72
S'environ_items'
p8151
sg74
g63
sbsg2695
I01
sg2678
g39
sg2718
g39
sg2679
g39
sbsg82
I1
sg79
g55
sg81
Nsg78
I1
sbsg83
Nsg74
g2719
sg85
(dp8152
sg87
g2682
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2719
sg96
Nsg97
(lp8153
sg99
Nsg100
Nsb(dp8154
sg5
(g18
g7
Ntp8155
Rp8156
(dp8157
g22
(dp8158
sg24
g5
(g291
g7
Ntp8159
Rp8160
(dp8161
g29
g30
(g295
tp8162
Rp8163
(dp8164
g50
I00
sg35
g36
sg2733
g39
sg302
S"def change_itk_transform_type(input_affine_file):\n\n    '''\n    this function takes in the affine.txt produced by the c3d_affine_tool\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\n\n    it then modifies the 'Transform Type' of this affine.txt so that it is\n    compatible with the antsApplyTransforms tool and produces a new affine\n    file titled 'updated_affine.txt'\n    '''\n\n    import os\n\n    new_file_lines = []\n\n    with open(input_affine_file) as f:\n\n        for line in f:\n\n            if 'Transform:' in line:\n\n                if 'MatrixOffsetTransformBase_double_3_3' in line:\n\n                    transform_line = 'Transform: AffineTransform_double_3_3'\n                    new_file_lines.append(transform_line)\n\n            else:\n\n                new_file_lines.append(line)\n\n\n    updated_affine_file = os.path.join(os.getcwd(), 'updated_affine.txt')\n\n    outfile = open(updated_affine_file, 'wt')\n\n    for line in new_file_lines:\n\n        print >>outfile, line.strip('\\n')\n\n    outfile.close()\n\n\n    return updated_affine_file\n"
p8165
sbsg78
I1
sg304
Nsg305
(lp8166
g2733
asg82
I1
sg307
(dp8167
g2737
Nssg310
(lp8168
g2737
asbsg83
Nsg74
g2739
sg85
(dp8169
sg87
g2682
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2739
sg96
Nsg97
(lp8170
sg99
Nsg100
Nsb(dp8171
ssg140
g65
sg141
g65
sg142
(dp8172
g8110
(dp8173
g8138
(dp8174
g146
(lp8175
(g2677
g2718
tp8176
a(g2679
g2679
tp8177
a(g2678
g2678
tp8178
asssg8124
(dp8179
sg8138
(dp8180
g8156
(dp8181
g146
(lp8182
(g2695
g2733
tp8183
asssg8156
(dp8184
g8124
(dp8185
g146
(lp8186
(g2737
g2695
tp8187
assssg157
g8172
sg158
(dp8188
sg160
g65
sg161
g8172
sg162
(dp8189
g8110
(dp8190
sg8124
(dp8191
g8156
g8185
ssg8138
(dp8192
g8110
g8174
ssg8156
(dp8193
g8138
g8181
sssbsg74
g2682
sg87
S'vmhc_1'
p8194
sg95
g2682
sg96
g168
((lp8195
(lp8196
g171
ag168
((lp8197
(lp8198
g174
ag175
aa(lp8199
g177
ag178
aa(lp8200
g180
ag181
aa(lp8201
g183
ag184
aa(lp8202
g186
ag187
aa(lp8203
g189
ag190
aa(lp8204
g192
ag193
aatp8205
Rp8206
aa(lp8207
g197
ag168
((lp8208
(lp8209
g200
ag201
aa(lp8210
g203
ag204
aa(lp8211
g206
ag207
aa(lp8212
g209
ag210
aa(lp8213
g212
ag213
aa(lp8214
g215
ag216
aa(lp8215
g218
ag219
aa(lp8216
g221
ag222
aa(lp8217
g224
ag225
aa(lp8218
g227
ag228
aa(lp8219
g230
ag231
aa(lp8220
g233
ag234
aa(lp8221
g236
ag237
aa(lp8222
g239
ag240
aa(lp8223
g242
ag243
aa(lp8224
g245
ag246
aa(lp8225
g248
ag249
aa(lp8226
g251
ag252
aa(lp8227
g254
ag255
aa(lp8228
g257
ag258
aa(lp8229
g260
ag261
aa(lp8230
g263
ag264
aatp8231
Rp8232
aa(lp8233
g268
ag168
((lp8234
(lp8235
g271
ag272
aatp8236
Rp8237
aatp8238
Rp8239
sg100
Nsb(dp8240
sg5
(g18
g7
Ntp8241
Rp8242
(dp8243
g22
(dp8244
sg24
g5
(g2638
g7
Ntp8245
Rp8246
(dp8247
g29
g30
(g2642
tp8248
Rp8249
(dp8250
g2646
g2650
sg50
I00
sg60
g39
sg52
g39
sg54
g55
sg63
g5
(g64
g65
(dp8251
g67
g68
stp8252
Rp8253
(dp8254
g72
S'environ_items'
p8255
sg74
g63
sbsg47
g39
sg75
g68
sg35
g36
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
g2656
sg85
(dp8256
sg87
g8194
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2656
sg96
Nsg97
(lp8257
sg99
Nsg100
Nsb(dp8258
sg5
(g18
g7
Ntp8259
Rp8260
(dp8261
g22
(dp8262
sg24
g5
(g801
g7
Ntp8263
Rp8264
(dp8265
g29
g30
(g805
tp8266
Rp8267
(dp8268
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp8269
g67
g68
stp8270
Rp8271
(dp8272
g72
S'environ_items'
p8273
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
g3009
sg85
(dp8274
sg87
g8194
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3009
sg96
Nsg97
(lp8275
sg99
Nsg100
Nsb(dp8276
sg5
(g18
g7
Ntp8277
Rp8278
(dp8279
g22
(dp8280
sg24
g5
(g2852
g7
Ntp8281
Rp8282
(dp8283
g29
g30
(g2856
tp8284
Rp8285
(dp8286
g2860
I-1
sg50
I00
sg2861
I01
sg60
g39
sg52
g39
sg2862
g39
sg1588
g1589
sg54
g55
sg63
g5
(g64
g65
(dp8287
tp8288
Rp8289
(dp8290
g72
S'environ_items'
p8291
sg74
g63
sbsg2868
g39
sg35
g36
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
g2869
sg85
(dp8292
sg87
g8194
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2869
sg96
Nsg97
(lp8293
sg99
Nsg100
Nsb(dp8294
sg5
(g6
g7
Ntp8295
Rp8296
(dp8297
g11
g5
(g12
g7
Ntp8298
Rp8299
(dp8300
g16
(dp8301
g5
(g18
g7
Ntp8302
Rp8303
(dp8304
g22
(dp8305
sg24
g5
(g106
g7
Ntp8306
Rp8307
(dp8308
g29
g30
(g110
tp8309
Rp8310
(dp8311
g35
g36
sg2523
g39
sg2524
g39
sg2525
g39
sg2526
g39
sg2527
g39
sbsg117
(lp8312
g2526
ag2523
ag2524
ag2525
ag2527
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp8313
sg87
g2530
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp8314
sg99
Nsg100
Nsb(dp8315
sg5
(g18
g7
Ntp8316
Rp8317
(dp8318
g22
(dp8319
sg24
g5
(g106
g7
Ntp8320
Rp8321
(dp8322
g29
g30
(g110
tp8323
Rp8324
(dp8325
g35
g36
sg2543
g39
sbsg117
(lp8326
g2543
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp8327
sg87
g2530
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp8328
sg99
Nsg100
Nsb(dp8329
sg5
(g18
g7
Ntp8330
Rp8331
(dp8332
g22
(dp8333
sg24
g5
(g828
g7
Ntp8334
Rp8335
(dp8336
g832
I5
sg29
g30
(g833
tp8337
Rp8338
(dp8339
g50
I00
sg35
g36
sg837
I00
sS'in5'
p8340
g39
sS'in1'
p8341
g39
sS'in2'
p8342
g39
sS'in3'
p8343
g39
sS'in4'
p8344
g39
sg841
g842
sbsg82
I1
sg78
I1
sbsg83
Nsg74
g2563
sg85
(dp8345
sg87
g2530
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2563
sg96
Nsg97
(lp8346
sg99
Nsg100
Nsb(dp8347
ssg140
g65
sg141
g65
sg142
(dp8348
g8303
(dp8349
g8331
(dp8350
g146
(lp8351
(g2526
g915
tp8352
a(g2524
g917
tp8353
a(g2525
g919
tp8354
a(g2523
g2574
tp8355
a(g2527
g2576
tp8356
asssg8317
(dp8357
sg8331
(dp8358
g8317
(dp8359
g146
(lp8360
(g931
g2543
tp8361
assssg157
g8348
sg158
(dp8362
sg160
g65
sg161
g8348
sg162
(dp8363
g8303
(dp8364
sg8317
(dp8365
g8331
g8359
ssg8331
(dp8366
g8303
g8350
sssbsg74
g2530
sg87
g8194
sg95
g2530
sg96
g168
((lp8367
(lp8368
g171
ag168
((lp8369
(lp8370
g174
ag175
aa(lp8371
g177
ag178
aa(lp8372
g180
ag181
aa(lp8373
g183
ag184
aa(lp8374
g186
ag187
aa(lp8375
g189
ag190
aa(lp8376
g192
ag193
aatp8377
Rp8378
aa(lp8379
g197
ag168
((lp8380
(lp8381
g200
ag201
aa(lp8382
g203
ag204
aa(lp8383
g206
ag207
aa(lp8384
g209
ag210
aa(lp8385
g212
ag213
aa(lp8386
g215
ag216
aa(lp8387
g218
ag219
aa(lp8388
g221
ag222
aa(lp8389
g224
ag225
aa(lp8390
g227
ag228
aa(lp8391
g230
ag231
aa(lp8392
g233
ag234
aa(lp8393
g236
ag237
aa(lp8394
g239
ag240
aa(lp8395
g242
ag243
aa(lp8396
g245
ag246
aa(lp8397
g248
ag249
aa(lp8398
g251
ag252
aa(lp8399
g254
ag255
aa(lp8400
g257
ag258
aa(lp8401
g260
ag261
aa(lp8402
g263
ag264
aatp8403
Rp8404
aa(lp8405
g268
ag168
((lp8406
(lp8407
g271
ag272
aatp8408
Rp8409
aatp8410
Rp8411
sg100
Nsb(dp8412
sg5
(g6
g7
Ntp8413
Rp8414
(dp8415
g11
g5
(g12
g7
Ntp8416
Rp8417
(dp8418
g16
(dp8419
g5
(g18
g7
Ntp8420
Rp8421
(dp8422
g22
(dp8423
sg24
g5
(g106
g7
Ntp8424
Rp8425
(dp8426
g29
g30
(g110
tp8427
Rp8428
(dp8429
g35
g36
sg876
g39
sbsg117
(lp8430
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp8431
sg87
g2892
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp8432
sg99
Nsg100
Nsb(dp8433
sg5
(g18
g7
Ntp8434
Rp8435
(dp8436
g22
(dp8437
sg24
g5
(g106
g7
Ntp8438
Rp8439
(dp8440
g29
g30
(g110
tp8441
Rp8442
(dp8443
g35
g36
sg881
I3
sg435
g39
sg889
g39
sg890
g39
sg474
g39
sg900
g39
sbsg117
(lp8444
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp8445
sg87
g2892
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp8446
sg99
Nsg100
Nsb(dp8447
sg5
(g18
g7
Ntp8448
Rp8449
(dp8450
g22
(dp8451
sg24
g5
(g867
g7
Ntp8452
Rp8453
(dp8454
g29
g30
(g871
tp8455
Rp8456
(dp8457
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp8458
g883
S'1'
p8459
stp8460
Rp8461
(dp8462
g72
S'environ_items'
p8463
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp8464
sg87
g2892
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp8465
sg99
Nsg100
Nsb(dp8466
ssg140
g65
sg141
g65
sg142
(dp8467
g8421
(dp8468
sg8435
(dp8469
g8449
(dp8470
g146
(lp8471
(g890
g890
tp8472
a(g889
g889
tp8473
a(g435
g435
tp8474
a(g474
g474
tp8475
a(g881
g881
tp8476
a(g900
g900
tp8477
asssg8449
(dp8478
g8421
(dp8479
g146
(lp8480
(g876
g876
tp8481
assssg157
g8467
sg158
(dp8482
sg160
g65
sg161
g8467
sg162
(dp8483
g8421
(dp8484
g8449
g8479
ssg8435
(dp8485
sg8449
(dp8486
g8435
g8470
sssbsg74
g2892
sg87
g8194
sg95
g2892
sg96
g168
((lp8487
(lp8488
g171
ag168
((lp8489
(lp8490
g174
ag175
aa(lp8491
g177
ag178
aa(lp8492
g180
ag181
aa(lp8493
g183
ag184
aa(lp8494
g186
ag187
aa(lp8495
g189
ag190
aa(lp8496
g192
ag193
aatp8497
Rp8498
aa(lp8499
g197
ag168
((lp8500
(lp8501
g200
ag201
aa(lp8502
g203
ag204
aa(lp8503
g206
ag207
aa(lp8504
g209
ag210
aa(lp8505
g212
ag213
aa(lp8506
g215
ag216
aa(lp8507
g218
ag219
aa(lp8508
g221
ag222
aa(lp8509
g224
ag225
aa(lp8510
g227
ag228
aa(lp8511
g230
ag231
aa(lp8512
g233
ag234
aa(lp8513
g236
ag237
aa(lp8514
g239
ag240
aa(lp8515
g242
ag243
aa(lp8516
g245
ag246
aa(lp8517
g248
ag249
aa(lp8518
g251
ag252
aa(lp8519
g254
ag255
aa(lp8520
g257
ag258
aa(lp8521
g260
ag261
aa(lp8522
g263
ag264
aatp8523
Rp8524
aa(lp8525
g268
ag168
((lp8526
(lp8527
g271
ag272
aatp8528
Rp8529
aatp8530
Rp8531
sg100
Nsb(dp8532
sg5
(g18
g7
Ntp8533
Rp8534
(dp8535
g22
(dp8536
sg24
g5
(g291
g7
Ntp8537
Rp8538
(dp8539
g29
g30
(g295
tp8540
Rp8541
(dp8542
g50
I00
sg2417
g39
sg302
S'def get_operand_expression(nvols):\n\n    """\n    Generates operand string\n\n    Parameters\n    ----------\n\n    nvols : int\n\n    Returns\n    -------\n\n    expr : string\n\n    """\n\n    expr = None\n    vol = int(nvols)\n    expr = (\'a*sqrt(%d-3)\' % vol)\n\n    return expr\n'
p8543
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp8544
g2417
asg82
I1
sg307
(dp8545
g1763
Nssg310
(lp8546
g1763
asbsg83
Nsg74
g2463
sg85
(dp8547
sg87
g8194
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2463
sg96
Nsg97
(lp8548
sg99
Nsg100
Nsb(dp8549
sg5
(g18
g7
Ntp8550
Rp8551
(dp8552
g22
(dp8553
sg24
g5
(g1754
g7
Ntp8554
Rp8555
(dp8556
g29
g30
(g1758
tp8557
Rp8558
(dp8559
g1762
g39
sg50
I00
sg35
g36
sg60
g39
sg1763
g39
sg52
g39
sg1588
g1589
sg1765
g39
sg1766
g39
sg1767
g39
sg63
g5
(g64
g65
(dp8560
tp8561
Rp8562
(dp8563
g72
S'environ_items'
p8564
sg74
g63
sbsg1773
g39
sg1774
g39
sg1775
g39
sg54
g55
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
g2826
sg85
(dp8565
sg87
g8194
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2826
sg96
Nsg97
(lp8566
sg99
Nsg100
Nsb(dp8567
sg5
(g18
g7
Ntp8568
Rp8569
(dp8570
g22
(dp8571
sg24
g5
(g106
g7
Ntp8572
Rp8573
(dp8574
g29
g30
(g110
tp8575
Rp8576
(dp8577
g35
g36
sg2497
(lp8578
I6
asbsg117
(lp8579
g2497
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g2500
sg85
(dp8580
sg87
g8194
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
(g2497
g2502
tp8581
sg94
I00
sg95
g2500
sg96
Nsg97
(lp8582
sg99
Nsg100
Nsb(dp8583
sg5
(g18
g7
Ntp8584
Rp8585
(dp8586
g22
(dp8587
sg24
g5
(g291
g7
Ntp8588
Rp8589
(dp8590
g29
g30
(g295
tp8591
Rp8592
(dp8593
g50
I00
sg35
g36
sg302
S'def get_img_nvols(in_files):\n\n    """\n    Calculates the number of volumes in the given nifti image\n\n    Parameters\n    ----------\n\n    in_files : string (nifti file)\n\n    Returns\n    -------\n\n    out : int\n        number of volumes of input nifti file\n\n    """\n\n    out = None\n    from nibabel import load\n    img = load(in_files)\n    hdr = img.get_header()\n    nvols = None\n    if len(hdr.get_data_shape()) > 3:\n        nvols = int(hdr.get_data_shape()[3])\n    else:\n        nvols = 1\n    out = nvols\n\n    return out\n'
p8594
sg1027
g39
sbsg78
I1
sg304
Nsg305
(lp8595
g1027
asg82
I1
sg307
(dp8596
g2417
Nssg310
(lp8597
g2417
asbsg83
Nsg74
g2419
sg85
(dp8598
sg87
g8194
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2419
sg96
Nsg97
(lp8599
sg99
Nsg100
Nsb(dp8600
sg5
(g18
g7
Ntp8601
Rp8602
(dp8603
g22
(dp8604
sg24
g5
(g106
g7
Ntp8605
Rp8606
(dp8607
g29
g30
(g110
tp8608
Rp8609
(dp8610
g2434
g39
sg2435
g39
sg2436
g39
sg2437
g39
sg2438
g39
sg789
g39
sg2439
g39
sg2440
g39
sg2441
g2442
sg2443
g39
sg2444
g39
sg35
g36
sbsg117
(lp8611
g2434
ag2436
ag2440
ag2441
ag2438
ag789
ag2443
ag2437
ag2439
ag2435
ag2444
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp8612
sg87
g8194
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp8613
sg99
Nsg100
Nsb(dp8614
sg5
(g18
g7
Ntp8615
Rp8616
(dp8617
g22
(dp8618
sg24
g5
(g1754
g7
Ntp8619
Rp8620
(dp8621
g29
g30
(g1758
tp8622
Rp8623
(dp8624
g1762
g39
sg50
I00
sg35
g36
sg60
g39
sg1763
g2477
sg52
g39
sg1588
g1589
sg1765
g39
sg1766
g39
sg1767
g39
sg63
g5
(g64
g65
(dp8625
tp8626
Rp8627
(dp8628
g72
S'environ_items'
p8629
sg74
g63
sbsg1773
g39
sg1774
g39
sg1775
g39
sg54
g55
sbsg78
I1
sg79
g55
sg81
Nsg82
I1
sg1597
g1589
sbsg83
Nsg74
g2483
sg85
(dp8630
sg87
g8194
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2483
sg96
Nsg97
(lp8631
sg99
Nsg100
Nsb(dp8632
sg5
(g18
g7
Ntp8633
Rp8634
(dp8635
g22
(dp8636
sg24
g5
(g106
g7
Ntp8637
Rp8638
(dp8639
g29
g30
(g110
tp8640
Rp8641
(dp8642
g35
g36
sg2840
g39
sg2841
g39
sg2842
g39
sg2843
g39
sbsg117
(lp8643
g2842
ag2840
ag2843
ag2841
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp8644
sg87
g8194
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp8645
sg99
Nsg100
Nsb(dp8646
ssg140
g65
sg141
g65
sg142
(dp8647
g8103
(dp8648
g8296
(dp8649
g146
(lp8650
(g3078
g3079
tp8651
asssg8242
(dp8652
g8278
(dp8653
g146
(lp8654
(g60
g2868
tp8655
assg8585
(dp8656
g146
(lp8657
(g60
g1027
tp8658
asssg8260
(dp8659
g8414
(dp8660
g146
(lp8661
(g60
g3107
tp8662
asssg8278
(dp8663
g8616
(dp8664
g146
(lp8665
(g60
g1767
tp8666
assg8634
(dp8667
g146
(lp8668
(g60
g2840
tp8669
asssg8296
(dp8670
g8414
(dp8671
g146
(lp8672
(g3065
g3066
tp8673
asssg8414
(dp8674
g8242
(dp8675
g146
(lp8676
(g3096
g47
tp8677
assg8634
(dp8678
g146
(lp8679
(g3096
g2842
tp8680
assg8278
(dp8681
g146
(lp8682
(g3096
g2862
tp8683
asssg8534
(dp8684
g8551
(dp8685
g146
(lp8686
(g1763
g1763
tp8687
asssg8551
(dp8688
g8634
(dp8689
g146
(lp8690
(g60
g2841
tp8691
asssg8569
(dp8692
g8260
(dp8693
g146
(lp8694
((g2497
S'def set_gauss(fwhm):\n\n    """\n    Compute the sigma value, given Full Width Half Max. \n    Further it builds an operand string and returns it\n\n    Parameters\n    ----------\n\n    fwhm : float\n\n    Returns\n    -------\n\n    op_string : string\n\n    """\n\n    op_string = ""\n\n    fwhm = float(fwhm)\n\n    sigma = float(fwhm / 2.3548)\n\n    op = "-kernel gauss %f -fmean -mas " % (sigma) + "%s"\n    op_string = op\n\n    return op_string\n'
p8695
(ttp8696
g810
tp8697
asssg8585
(dp8698
g8534
(dp8699
g146
(lp8700
(g2417
g2417
tp8701
asssg8602
(dp8702
g8260
(dp8703
g146
(lp8704
(g2434
g47
tp8705
a(g2440
g819
tp8706
assg8103
(dp8707
g146
(lp8708
(g2436
g3021
tp8709
a(g789
g3023
tp8710
a(g2438
g3025
tp8711
assg8414
(dp8712
g146
(lp8713
(g2441
g3029
tp8714
assg8296
(dp8715
g146
(lp8716
(g2437
g3037
tp8717
a(g2439
g3039
tp8718
a(g2435
g3041
tp8719
a(g2444
g3043
tp8720
asssg8616
(dp8721
g8551
(dp8722
g146
(lp8723
(g60
g1767
tp8724
assg8634
(dp8725
g146
(lp8726
(g60
g2843
tp8727
asssg8634
(dp8728
ssg157
g8647
sg158
(dp8729
sg160
g65
sg161
g8647
sg162
(dp8730
g8103
(dp8731
g8602
g8707
ssg8242
(dp8732
g8414
g8675
ssg8260
(dp8733
g8602
g8703
sg8569
g8693
ssg8278
(dp8734
g8242
g8653
sg8414
g8681
ssg8296
(dp8735
g8602
g8715
sg8103
g8649
ssg8414
(dp8736
g8260
g8660
sg8296
g8671
sg8602
g8712
ssg8534
(dp8737
g8585
g8699
ssg8551
(dp8738
g8616
g8722
sg8534
g8685
ssg8569
(dp8739
sg8585
(dp8740
g8242
g8656
ssg8602
(dp8741
sg8616
(dp8742
g8278
g8664
ssg8634
(dp8743
g8278
g8667
sg8551
g8689
sg8414
g8678
sg8616
g8725
sssbsg74
g8194
sg87
g167
sg95
g8194
sg96
g168
((lp8744
(lp8745
g171
ag168
((lp8746
(lp8747
g174
ag175
aa(lp8748
g177
ag178
aa(lp8749
g180
ag181
aa(lp8750
g183
ag184
aa(lp8751
g186
ag187
aa(lp8752
g189
ag190
aa(lp8753
g192
ag193
aatp8754
Rp8755
aa(lp8756
g197
ag168
((lp8757
(lp8758
g200
ag201
aa(lp8759
g203
ag204
aa(lp8760
g206
ag207
aa(lp8761
g209
ag210
aa(lp8762
g212
ag213
aa(lp8763
g215
ag216
aa(lp8764
g218
ag219
aa(lp8765
g221
ag222
aa(lp8766
g224
ag225
aa(lp8767
g227
ag228
aa(lp8768
g230
ag231
aa(lp8769
g233
ag234
aa(lp8770
g236
ag237
aa(lp8771
g239
ag240
aa(lp8772
g242
ag243
aa(lp8773
g245
ag246
aa(lp8774
g248
ag249
aa(lp8775
g251
ag252
aa(lp8776
g254
ag255
aa(lp8777
g257
ag258
aa(lp8778
g260
ag261
aa(lp8779
g263
ag264
aatp8780
Rp8781
aa(lp8782
g268
ag168
((lp8783
(lp8784
g271
ag272
aatp8785
Rp8786
aatp8787
Rp8788
sg100
Nsbg3169
tp8789
sg3171
(g5
(g6
g7
Ntp8790
Rp8791
(dp8792
g11
g5
(g12
g7
Ntp8793
Rp8794
(dp8795
g16
(dp8796
g5
(g18
g7
Ntp8797
Rp8798
(dp8799
g22
(dp8800
sg24
g5
(g867
g7
Ntp8801
Rp8802
(dp8803
g29
g30
(g871
tp8804
Rp8805
(dp8806
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp8807
g883
S'1'
p8808
stp8809
Rp8810
(dp8811
g72
S'environ_items'
p8812
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp8813
sg87
S'apply_ants_warp_functional_brain_mask_to_standard_1'
p8814
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp8815
sg99
Nsg100
Nsb(dp8816
sg5
(g18
g7
Ntp8817
Rp8818
(dp8819
g22
(dp8820
sg24
g5
(g106
g7
Ntp8821
Rp8822
(dp8823
g29
g30
(g110
tp8824
Rp8825
(dp8826
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g901
sbsg117
(lp8827
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp8828
sg87
g8814
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp8829
sg99
Nsg100
Nsb(dp8830
sg5
(g18
g7
Ntp8831
Rp8832
(dp8833
g22
(dp8834
sg24
g5
(g106
g7
Ntp8835
Rp8836
(dp8837
g29
g30
(g110
tp8838
Rp8839
(dp8840
g35
g36
sg876
g39
sbsg117
(lp8841
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp8842
sg87
g8814
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp8843
sg99
Nsg100
Nsb(dp8844
ssg140
g65
sg141
g65
sg142
(dp8845
g8798
(dp8846
g8832
(dp8847
g146
(lp8848
(g876
g876
tp8849
asssg8818
(dp8850
g8798
(dp8851
g146
(lp8852
(g890
g890
tp8853
a(g889
g889
tp8854
a(g435
g435
tp8855
a(g474
g474
tp8856
a(g881
g881
tp8857
a(g900
g900
tp8858
asssg8832
(dp8859
ssg157
g8845
sg158
(dp8860
sg160
g65
sg161
g8845
sg162
(dp8861
g8798
(dp8862
g8818
g8851
ssg8818
(dp8863
sg8832
(dp8864
g8798
g8847
sssbsg74
g8814
sg87
g167
sg95
g8814
sg96
g168
((lp8865
(lp8866
g171
ag168
((lp8867
(lp8868
g174
ag175
aa(lp8869
g177
ag178
aa(lp8870
g180
ag181
aa(lp8871
g183
ag184
aa(lp8872
g186
ag187
aa(lp8873
g189
ag190
aa(lp8874
g192
ag193
aatp8875
Rp8876
aa(lp8877
g197
ag168
((lp8878
(lp8879
g200
ag201
aa(lp8880
g203
ag204
aa(lp8881
g206
ag207
aa(lp8882
g209
ag210
aa(lp8883
g212
ag213
aa(lp8884
g215
ag216
aa(lp8885
g218
ag219
aa(lp8886
g221
ag222
aa(lp8887
g224
ag225
aa(lp8888
g227
ag228
aa(lp8889
g230
ag231
aa(lp8890
g233
ag234
aa(lp8891
g236
ag237
aa(lp8892
g239
ag240
aa(lp8893
g242
ag243
aa(lp8894
g245
ag246
aa(lp8895
g248
ag249
aa(lp8896
g251
ag252
aa(lp8897
g254
ag255
aa(lp8898
g257
ag258
aa(lp8899
g260
ag261
aa(lp8900
g263
ag264
aatp8901
Rp8902
aa(lp8903
g268
ag168
((lp8904
(lp8905
g271
ag272
aatp8906
Rp8907
aatp8908
Rp8909
sg100
Nsbg3292
tp8910
sS'output_means.@falff_to_standard_smooth_average'
p8911
(g5
(g18
g7
Ntp8912
Rp8913
(dp8914
g22
(dp8915
sg24
g5
(g291
g7
Ntp8916
Rp8917
(dp8918
g29
g30
(g295
tp8919
Rp8920
(dp8921
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p8922
sg632
g3306
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp8923
g47
ag632
asg82
I1
sg307
(dp8924
g636
Nssg310
(lp8925
g636
asbsg83
Nsg74
S'falff_to_standard_smooth_mean_to_txt_1'
p8926
sg85
(dp8927
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g8926
sg96
Nsg97
(lp8928
sg99
Nsg100
Nsbg636
tp8929
sS'falff_smooth'
p8930
(g5
(g18
g7
Ntp8931
Rp8932
(dp8933
g22
(dp8934
sg24
g5
(g801
g7
Ntp8935
Rp8936
(dp8937
g29
g30
(g805
tp8938
Rp8939
(dp8940
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp8941
g67
g68
stp8942
Rp8943
(dp8944
g72
S'environ_items'
p8945
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'falff_smooth_1'
p8946
sg85
(dp8947
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g8946
sg96
Nsg97
(lp8948
sg99
Nsg100
Nsbg60
tp8949
sS'output_means.@dr_tempreg_maps_files_to_standard_smooth_average'
p8950
(g5
(g2365
g7
Ntp8951
Rp8952
(dp8953
g2369
I00
sg22
(dp8954
sg24
g5
(g291
g7
Ntp8955
Rp8956
(dp8957
g29
g30
(g295
tp8958
Rp8959
(dp8960
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p8961
sg632
g3346
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp8962
g47
ag632
asg82
I1
sg307
(dp8963
g636
Nssg310
(lp8964
g636
asbsg83
Nsg2382
g30
(g110
tp8965
Rp8966
(dp8967
g50
I00
sg302
g8961
sg632
g3346
sg47
g39
sg35
g36
sbsg74
S'dr_tempreg_maps_files_to_standard_smooth_mean_to_txt_1'
p8968
sg85
(dp8969
sg2388
I00
sg87
g167
sg2389
(lp8970
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g8968
sg96
Nsg97
(lp8971
sg99
Nsg100
Nsbg636
tp8972
sg3358
g3563
sg3346
(g5
(g2365
g7
Ntp8973
Rp8974
(dp8975
g2369
I00
sg22
(dp8976
sg24
g5
(g801
g7
Ntp8977
Rp8978
(dp8979
g29
g30
(g805
tp8980
Rp8981
(dp8982
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp8983
g67
g68
stp8984
Rp8985
(dp8986
g72
S'environ_items'
p8987
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp8988
Rp8989
(dp8990
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp8991
g67
g68
stp8992
Rp8993
(dp8994
g72
S'environ_items'
p8995
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg74
S'dr_tempreg_maps_files_smooth_1'
p8996
sg85
(dp8997
sg2388
I00
sg87
g167
sg2389
(lp8998
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g8996
sg96
Nsg97
(lp8999
sg99
Nsg100
Nsbg60
tp9000
sS'alff_to_standard_smooth'
p9001
(g5
(g18
g7
Ntp9002
Rp9003
(dp9004
g22
(dp9005
sg24
g5
(g801
g7
Ntp9006
Rp9007
(dp9008
g29
g30
(g805
tp9009
Rp9010
(dp9011
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp9012
g67
g68
stp9013
Rp9014
(dp9015
g72
S'environ_items'
p9016
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'alff_to_standard_smooth_1'
p9017
sg85
(dp9018
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g9017
sg96
Nsg97
(lp9019
sg99
Nsg100
Nsbg60
tp9020
sS'output_means.@reho_to_standard_average'
p9021
(g5
(g18
g7
Ntp9022
Rp9023
(dp9024
g22
(dp9025
sg24
g5
(g291
g7
Ntp9026
Rp9027
(dp9028
g29
g30
(g295
tp9029
Rp9030
(dp9031
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p9032
sg632
g3624
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp9033
g47
ag632
asg82
I1
sg307
(dp9034
g636
Nssg310
(lp9035
g636
asbsg83
Nsg74
S'reho_to_standard_mean_to_txt_1'
p9036
sg85
(dp9037
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g9036
sg96
Nsg97
(lp9038
sg99
Nsg100
Nsbg636
tp9039
sS'dr_tempreg_maps_files_to_standard'
p9040
(g5
(g6
g7
Ntp9041
Rp9042
(dp9043
g11
g5
(g12
g7
Ntp9044
Rp9045
(dp9046
g16
(dp9047
g5
(g18
g7
Ntp9048
Rp9049
(dp9050
g22
(dp9051
sg24
g5
(g106
g7
Ntp9052
Rp9053
(dp9054
g29
g30
(g110
tp9055
Rp9056
(dp9057
g35
g36
sg876
g39
sbsg117
(lp9058
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp9059
sg87
S'dr_tempreg_maps_files_to_standard_1'
p9060
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp9061
sg99
Nsg100
Nsb(dp9062
sg5
(g18
g7
Ntp9063
Rp9064
(dp9065
g22
(dp9066
sg24
g5
(g106
g7
Ntp9067
Rp9068
(dp9069
g29
g30
(g110
tp9070
Rp9071
(dp9072
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp9073
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp9074
sg87
g9060
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp9075
sg99
Nsg100
Nsb(dp9076
sg5
(g2365
g7
Ntp9077
Rp9078
(dp9079
g2369
I00
sg22
(dp9080
sg24
g5
(g867
g7
Ntp9081
Rp9082
(dp9083
g29
g30
(g871
tp9084
Rp9085
(dp9086
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp9087
g883
S'1'
p9088
stp9089
Rp9090
(dp9091
g72
S'environ_items'
p9092
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg2382
g30
(g110
tp9093
Rp9094
(dp9095
g891
F0.0
sg50
I00
sg78
I1
sg876
g39
sg52
g39
sg877
g2286
sg879
g39
sg875
g39
sg880
g39
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp9096
g883
g9088
stp9097
Rp9098
(dp9099
g72
S'environ_items'
p9100
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg892
g39
sg474
g39
sg35
g36
sg900
g2271
sbsg74
g3679
sg85
(dp9101
sg2388
I00
sg87
g9060
sg2389
(lp9102
g890
ag435
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3679
sg96
Nsg97
(lp9103
sg99
Nsg100
Nsb(dp9104
ssg140
g65
sg141
g65
sg142
(dp9105
g9049
(dp9106
sg9064
(dp9107
g9078
(dp9108
g146
(lp9109
(g890
g890
tp9110
a(g889
g889
tp9111
a(g435
g435
tp9112
a(g474
g474
tp9113
a(g881
g881
tp9114
a(g900
g900
tp9115
asssg9078
(dp9116
g9049
(dp9117
g146
(lp9118
(g876
g876
tp9119
assssg157
g9105
sg158
(dp9120
sg160
g65
sg161
g9105
sg162
(dp9121
g9049
(dp9122
g9078
g9117
ssg9064
(dp9123
sg9078
(dp9124
g9064
g9108
sssbsg74
g9060
sg87
g167
sg95
g9060
sg96
g168
((lp9125
(lp9126
g171
ag168
((lp9127
(lp9128
g174
ag175
aa(lp9129
g177
ag178
aa(lp9130
g180
ag181
aa(lp9131
g183
ag184
aa(lp9132
g186
ag187
aa(lp9133
g189
ag190
aa(lp9134
g192
ag193
aatp9135
Rp9136
aa(lp9137
g197
ag168
((lp9138
(lp9139
g200
ag201
aa(lp9140
g203
ag204
aa(lp9141
g206
ag207
aa(lp9142
g209
ag210
aa(lp9143
g212
ag213
aa(lp9144
g215
ag216
aa(lp9145
g218
ag219
aa(lp9146
g221
ag222
aa(lp9147
g224
ag225
aa(lp9148
g227
ag228
aa(lp9149
g230
ag231
aa(lp9150
g233
ag234
aa(lp9151
g236
ag237
aa(lp9152
g239
ag240
aa(lp9153
g242
ag243
aa(lp9154
g245
ag246
aa(lp9155
g248
ag249
aa(lp9156
g251
ag252
aa(lp9157
g254
ag255
aa(lp9158
g257
ag258
aa(lp9159
g260
ag261
aa(lp9160
g263
ag264
aatp9161
Rp9162
aa(lp9163
g268
ag168
((lp9164
(lp9165
g271
ag272
aatp9166
Rp9167
aatp9168
Rp9169
sg100
Nsbg2362
tp9170
sg3764
(g5
(g18
g7
Ntp9171
Rp9172
(dp9173
g22
(dp9174
sg24
g5
(g291
g7
Ntp9175
Rp9176
(dp9177
g29
g30
(g295
tp9178
Rp9179
(dp9180
g50
I00
sg3775
g39
sg3776
g39
sg302
S'def merge_lists(deg_list=[],eig_list=[],lfcd_list=[]):\n    merged_list = []\n    merged_list.extend(deg_list)\n    merged_list.extend(eig_list)\n    merged_list.extend(lfcd_list)\n\n    return merged_list\n'
p9181
sg3778
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp9182
g3778
ag3775
ag3776
asg82
I1
sg307
(dp9183
g3781
Nssg310
(lp9184
g3781
asbsg83
Nsg74
S'merge_node_1'
p9185
sg85
(dp9186
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g9185
sg96
Nsg97
(lp9187
sg99
Nsg100
Nsbg3781
tp9188
sS'output_means.@falff_img_average'
p9189
(g5
(g18
g7
Ntp9190
Rp9191
(dp9192
g22
(dp9193
sg24
g5
(g291
g7
Ntp9194
Rp9195
(dp9196
g29
g30
(g295
tp9197
Rp9198
(dp9199
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p9200
sg632
g3799
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp9201
g47
ag632
asg82
I1
sg307
(dp9202
g636
Nssg310
(lp9203
g636
asbsg83
Nsg74
S'falff_img_mean_to_txt_1'
p9204
sg85
(dp9205
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g9204
sg96
Nsg97
(lp9206
sg99
Nsg100
Nsbg636
tp9207
sg3807
g4226
sg4227
(g5
(g6
g7
Ntp9208
Rp9209
(dp9210
g11
g5
(g12
g7
Ntp9211
Rp9212
(dp9213
g16
(dp9214
g5
(g18
g7
Ntp9215
Rp9216
(dp9217
g22
(dp9218
sg24
g5
(g106
g7
Ntp9219
Rp9220
(dp9221
g29
g30
(g110
tp9222
Rp9223
(dp9224
g35
g36
sg876
g39
sbsg117
(lp9225
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp9226
sg87
S'apply_ants_warp_mean_functional_to_standard_1'
p9227
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp9228
sg99
Nsg100
Nsb(dp9229
sg5
(g18
g7
Ntp9230
Rp9231
(dp9232
g22
(dp9233
sg24
g5
(g106
g7
Ntp9234
Rp9235
(dp9236
g29
g30
(g110
tp9237
Rp9238
(dp9239
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp9240
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp9241
sg87
g9227
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp9242
sg99
Nsg100
Nsb(dp9243
sg5
(g18
g7
Ntp9244
Rp9245
(dp9246
g22
(dp9247
sg24
g5
(g867
g7
Ntp9248
Rp9249
(dp9250
g29
g30
(g871
tp9251
Rp9252
(dp9253
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp9254
g883
S'1'
p9255
stp9256
Rp9257
(dp9258
g72
S'environ_items'
p9259
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp9260
sg87
g9227
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp9261
sg99
Nsg100
Nsb(dp9262
ssg140
g65
sg141
g65
sg142
(dp9263
g9216
(dp9264
sg9231
(dp9265
g9245
(dp9266
g146
(lp9267
(g890
g890
tp9268
a(g889
g889
tp9269
a(g435
g435
tp9270
a(g474
g474
tp9271
a(g881
g881
tp9272
a(g900
g900
tp9273
asssg9245
(dp9274
g9216
(dp9275
g146
(lp9276
(g876
g876
tp9277
assssg157
g9263
sg158
(dp9278
sg160
g65
sg161
g9263
sg162
(dp9279
g9216
(dp9280
g9245
g9275
ssg9231
(dp9281
sg9245
(dp9282
g9231
g9266
sssbsg74
g9227
sg87
g167
sg95
g9227
sg96
g168
((lp9283
(lp9284
g171
ag168
((lp9285
(lp9286
g174
ag175
aa(lp9287
g177
ag178
aa(lp9288
g180
ag181
aa(lp9289
g183
ag184
aa(lp9290
g186
ag187
aa(lp9291
g189
ag190
aa(lp9292
g192
ag193
aatp9293
Rp9294
aa(lp9295
g197
ag168
((lp9296
(lp9297
g200
ag201
aa(lp9298
g203
ag204
aa(lp9299
g206
ag207
aa(lp9300
g209
ag210
aa(lp9301
g212
ag213
aa(lp9302
g215
ag216
aa(lp9303
g218
ag219
aa(lp9304
g221
ag222
aa(lp9305
g224
ag225
aa(lp9306
g227
ag228
aa(lp9307
g230
ag231
aa(lp9308
g233
ag234
aa(lp9309
g236
ag237
aa(lp9310
g239
ag240
aa(lp9311
g242
ag243
aa(lp9312
g245
ag246
aa(lp9313
g248
ag249
aa(lp9314
g251
ag252
aa(lp9315
g254
ag255
aa(lp9316
g257
ag258
aa(lp9317
g260
ag261
aa(lp9318
g263
ag264
aatp9319
Rp9320
aa(lp9321
g268
ag168
((lp9322
(lp9323
g271
ag272
aatp9324
Rp9325
aatp9326
Rp9327
sg100
Nsbg3292
tp9328
sg4349
g4351
sg4352
(g5
(g6
g7
Ntp9329
Rp9330
(dp9331
g11
g5
(g12
g7
Ntp9332
Rp9333
(dp9334
g16
(dp9335
g5
(g18
g7
Ntp9336
Rp9337
(dp9338
g22
(dp9339
sg24
g5
(g867
g7
Ntp9340
Rp9341
(dp9342
g29
g30
(g871
tp9343
Rp9344
(dp9345
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp9346
g883
S'1'
p9347
stp9348
Rp9349
(dp9350
g72
S'environ_items'
p9351
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp9352
sg87
S'apply_ants_warp_motion_correct_to_standard_1'
p9353
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp9354
sg99
Nsg100
Nsb(dp9355
sg5
(g18
g7
Ntp9356
Rp9357
(dp9358
g22
(dp9359
sg24
g5
(g106
g7
Ntp9360
Rp9361
(dp9362
g29
g30
(g110
tp9363
Rp9364
(dp9365
g35
g36
sg881
I3
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp9366
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp9367
sg87
g9353
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp9368
sg99
Nsg100
Nsb(dp9369
sg5
(g18
g7
Ntp9370
Rp9371
(dp9372
g22
(dp9373
sg24
g5
(g106
g7
Ntp9374
Rp9375
(dp9376
g29
g30
(g110
tp9377
Rp9378
(dp9379
g35
g36
sg876
g39
sbsg117
(lp9380
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp9381
sg87
g9353
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp9382
sg99
Nsg100
Nsb(dp9383
ssg140
g65
sg141
g65
sg142
(dp9384
g9337
(dp9385
g9371
(dp9386
g146
(lp9387
(g876
g876
tp9388
asssg9357
(dp9389
g9337
(dp9390
g146
(lp9391
(g890
g890
tp9392
a(g889
g889
tp9393
a(g435
g435
tp9394
a(g474
g474
tp9395
a(g881
g881
tp9396
a(g900
g900
tp9397
asssg9371
(dp9398
ssg157
g9384
sg158
(dp9399
sg160
g65
sg161
g9384
sg162
(dp9400
g9337
(dp9401
g9357
g9390
ssg9357
(dp9402
sg9371
(dp9403
g9337
g9386
sssbsg74
g9353
sg87
g167
sg95
g9353
sg96
g168
((lp9404
(lp9405
g171
ag168
((lp9406
(lp9407
g174
ag175
aa(lp9408
g177
ag178
aa(lp9409
g180
ag181
aa(lp9410
g183
ag184
aa(lp9411
g186
ag187
aa(lp9412
g189
ag190
aa(lp9413
g192
ag193
aatp9414
Rp9415
aa(lp9416
g197
ag168
((lp9417
(lp9418
g200
ag201
aa(lp9419
g203
ag204
aa(lp9420
g206
ag207
aa(lp9421
g209
ag210
aa(lp9422
g212
ag213
aa(lp9423
g215
ag216
aa(lp9424
g218
ag219
aa(lp9425
g221
ag222
aa(lp9426
g224
ag225
aa(lp9427
g227
ag228
aa(lp9428
g230
ag231
aa(lp9429
g233
ag234
aa(lp9430
g236
ag237
aa(lp9431
g239
ag240
aa(lp9432
g242
ag243
aa(lp9433
g245
ag246
aa(lp9434
g248
ag249
aa(lp9435
g251
ag252
aa(lp9436
g254
ag255
aa(lp9437
g257
ag258
aa(lp9438
g260
ag261
aa(lp9439
g263
ag264
aatp9440
Rp9441
aa(lp9442
g268
ag168
((lp9443
(lp9444
g271
ag272
aatp9445
Rp9446
aatp9447
Rp9448
sg100
Nsbg3292
tp9449
sg2438
g4475
sg4476
g4478
sg4479
g4764
sg4765
(g5
(g2365
g7
Ntp9450
Rp9451
(dp9452
g2369
I00
sg22
(dp9453
sg24
g5
(g801
g7
Ntp9454
Rp9455
(dp9456
g29
g30
(g805
tp9457
Rp9458
(dp9459
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp9460
g67
g68
stp9461
Rp9462
(dp9463
g72
S'environ_items'
p9464
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g5
(g893
g894
(lp9465
g4782
atp9466
Rp9467
(dp9468
g72
S'operand_files_items'
p9469
sg74
g819
sbsbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp9470
Rp9471
(dp9472
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp9473
g67
g68
stp9474
Rp9475
(dp9476
g72
S'environ_items'
p9477
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g5
(g893
g894
(lp9478
g4782
atp9479
Rp9480
(dp9481
g72
S'operand_files_items'
p9482
sg74
g819
sbsbsg74
S'network_centrality_zstd_smooth_1'
p9483
sg85
(dp9484
sg2388
I00
sg87
g167
sg2389
(lp9485
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g9483
sg96
Nsg97
(lp9486
sg99
Nsg100
Nsbg60
tp9487
sS'dr_tempreg_maps_stack_to_standard'
p9488
(g5
(g6
g7
Ntp9489
Rp9490
(dp9491
g11
g5
(g12
g7
Ntp9492
Rp9493
(dp9494
g16
(dp9495
g5
(g18
g7
Ntp9496
Rp9497
(dp9498
g22
(dp9499
sg24
g5
(g106
g7
Ntp9500
Rp9501
(dp9502
g29
g30
(g110
tp9503
Rp9504
(dp9505
g35
g36
sg881
I3
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp9506
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp9507
sg87
S'dr_tempreg_maps_stack_to_standard_1'
p9508
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp9509
sg99
Nsg100
Nsb(dp9510
sg5
(g18
g7
Ntp9511
Rp9512
(dp9513
g22
(dp9514
sg24
g5
(g106
g7
Ntp9515
Rp9516
(dp9517
g29
g30
(g110
tp9518
Rp9519
(dp9520
g35
g36
sg876
g39
sbsg117
(lp9521
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp9522
sg87
g9508
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp9523
sg99
Nsg100
Nsb(dp9524
sg5
(g18
g7
Ntp9525
Rp9526
(dp9527
g22
(dp9528
sg24
g5
(g867
g7
Ntp9529
Rp9530
(dp9531
g29
g30
(g871
tp9532
Rp9533
(dp9534
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp9535
g883
S'1'
p9536
stp9537
Rp9538
(dp9539
g72
S'environ_items'
p9540
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp9541
sg87
g9508
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp9542
sg99
Nsg100
Nsb(dp9543
ssg140
g65
sg141
g65
sg142
(dp9544
g9497
(dp9545
g9526
(dp9546
g146
(lp9547
(g890
g890
tp9548
a(g889
g889
tp9549
a(g435
g435
tp9550
a(g474
g474
tp9551
a(g881
g881
tp9552
a(g900
g900
tp9553
asssg9512
(dp9554
sg9526
(dp9555
g9512
(dp9556
g146
(lp9557
(g876
g876
tp9558
assssg157
g9544
sg158
(dp9559
sg160
g65
sg161
g9544
sg162
(dp9560
g9497
(dp9561
sg9512
(dp9562
g9526
g9556
ssg9526
(dp9563
g9497
g9546
sssbsg74
g9508
sg87
g167
sg95
g9508
sg96
g168
((lp9564
(lp9565
g171
ag168
((lp9566
(lp9567
g174
ag175
aa(lp9568
g177
ag178
aa(lp9569
g180
ag181
aa(lp9570
g183
ag184
aa(lp9571
g186
ag187
aa(lp9572
g189
ag190
aa(lp9573
g192
ag193
aatp9574
Rp9575
aa(lp9576
g197
ag168
((lp9577
(lp9578
g200
ag201
aa(lp9579
g203
ag204
aa(lp9580
g206
ag207
aa(lp9581
g209
ag210
aa(lp9582
g212
ag213
aa(lp9583
g215
ag216
aa(lp9584
g218
ag219
aa(lp9585
g221
ag222
aa(lp9586
g224
ag225
aa(lp9587
g227
ag228
aa(lp9588
g230
ag231
aa(lp9589
g233
ag234
aa(lp9590
g236
ag237
aa(lp9591
g239
ag240
aa(lp9592
g242
ag243
aa(lp9593
g245
ag246
aa(lp9594
g248
ag249
aa(lp9595
g251
ag252
aa(lp9596
g254
ag255
aa(lp9597
g257
ag258
aa(lp9598
g260
ag261
aa(lp9599
g263
ag264
aatp9600
Rp9601
aa(lp9602
g268
ag168
((lp9603
(lp9604
g271
ag272
aatp9605
Rp9606
aatp9607
Rp9608
sg100
Nsbg2362
tp9609
sg4927
(g5
(g6
g7
Ntp9610
Rp9611
(dp9612
g11
g5
(g12
g7
Ntp9613
Rp9614
(dp9615
g16
(dp9616
g5
(g18
g7
Ntp9617
Rp9618
(dp9619
g22
(dp9620
sg24
g5
(g291
g7
Ntp9621
Rp9622
(dp9623
g305
(lp9624
g47
ag4974
ag4946
asg29
g30
(g295
tp9625
Rp9626
(dp9627
g50
I00
sg35
g36
sg302
S'def compute_reho(in_file, mask_file, cluster_size):\n\n    """\n    Computes the ReHo Map, by computing tied ranks of the timepoints,\n    followed by computing Kendall\'s coefficient concordance(KCC) of a timeseries with its neighbours\n\n    Parameters\n    ----------\n\n    in_file : nifti file\n        4D EPI File \n\n    mask_file : nifti file\n        Mask of the EPI File(Only Compute ReHo of voxels in the mask)\n\n    cluster_size : integer\n        for a brain voxel the number of neighbouring brain voxels to use for KCC.\n\n\n    Returns\n    -------\n\n    out_file : nifti file\n        ReHo map of the input EPI image\n\n    """\n\n    import nibabel as nb\n    import numpy as np\n    import os\n    import sys\n    from CPAC.reho.utils import f_kendall\n\n    out_file = None\n\n    res_fname = (in_file)\n    res_mask_fname = (mask_file)\n    CUTNUMBER = 10\n\n#    nvoxel = 27\n\n    if not (cluster_size == 27 or cluster_size == 19 or cluster_size == 7):\n        cluster_size = 27\n\n    nvoxel = cluster_size\n\n    res_img = nb.load(res_fname)\n    res_mask_img = nb.load(res_mask_fname)\n\n\n    res_data = res_img.get_data()\n    res_mask_data = res_mask_img.get_data()\n\n    print res_data.shape\n    (n_x, n_y, n_z, n_t) = res_data.shape\n\n    res_data = np.reshape(res_data, (n_x*n_y*n_z, n_t), order=\'F\').T\n\n    Ranks_res_data = np.tile((np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1])\n    #Ranks_res_data = np.tile(np.uint16(np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1])\n\n    segment_length = np.ceil(float((res_data.shape)[1])/float(CUTNUMBER))\n\n    for icut in range(0, CUTNUMBER):\n\n        segment = None\n\n        if not (icut == (CUTNUMBER - 1)):\n\n            segment = np.array(np.arange(icut * segment_length, (icut+1) * segment_length))\n\n        else:\n\n            segment = np.array(np.arange(icut * segment_length, ((res_data.shape)[1])))\n\n        segment = np.int64(segment[np.newaxis])\n\n        res_data_piece = res_data[:, segment[0]]\n        nvoxels_piece = (res_data_piece.shape)[1]\n\n        res_data_sorted = np.sort(res_data_piece, 0, kind=\'mergesort\')\n        sort_index = np.argsort(res_data_piece, axis=0, kind=\'mergesort\')\n\n        db = np.diff(res_data_sorted, 1, 0)\n\n        db = db == 0\n\n        sumdb = np.sum(db, 0)\n\n        temp_array = np.array(np.arange(0, n_t))\n        temp_array = temp_array[:, np.newaxis]\n\n        sorted_ranks = np.tile(temp_array, [1, nvoxels_piece])\n\n        if np.any(sumdb[:]):\n\n            tie_adjust_index = np.flatnonzero(sumdb)\n\n            for i in range(0, len(tie_adjust_index)):\n\n                ranks = sorted_ranks[:, tie_adjust_index[i]]\n\n                ties = db[:, tie_adjust_index[i]]\n\n                tieloc = np.append(np.flatnonzero(ties), n_t + 2)\n                maxties = len(tieloc)\n                tiecount = 0\n\n                while(tiecount < maxties -1):\n                    tiestart = tieloc[tiecount]\n                    ntied = 2\n                    while(tieloc[tiecount + 1] == (tieloc[tiecount] + 1)):\n                        tiecount += 1\n                        ntied += 1\n\n                    ranks[tiestart:tiestart + ntied ] = np.ceil(np.float32(np.sum(ranks[tiestart:tiestart + ntied ]))/np.float32(ntied))\n                    tiecount += 1\n\n                sorted_ranks[:, tie_adjust_index[i]] = ranks\n\n        del db, sumdb\n        sort_index_base = np.tile(np.multiply(np.arange(0, nvoxels_piece), n_t), [n_t, 1])\n        sort_index += sort_index_base\n        del sort_index_base\n\n        ranks_piece = np.zeros((n_t, nvoxels_piece))\n\n        ranks_piece = ranks_piece.flatten(order=\'F\')\n        sort_index = sort_index.flatten(order=\'F\')\n        sorted_ranks = sorted_ranks.flatten(order=\'F\')\n\n        ranks_piece[sort_index] = np.array(sorted_ranks)\n\n        ranks_piece = np.reshape(ranks_piece, (n_t, nvoxels_piece), order=\'F\')\n\n#        ranks_piece = np.uint16(ranks_piece)\n\n        del sort_index, sorted_ranks\n\n        Ranks_res_data[:, segment[0]] = ranks_piece\n\n        sys.stdout.write(\'.\')\n\n\n    Ranks_res_data = np.reshape(Ranks_res_data, (n_t, n_x, n_y, n_z), order=\'F\')\n\n\n    K = np.zeros((n_x, n_y, n_z))\n\n    mask_cluster = np.ones((3, 3, 3))\n\n    if nvoxel == 19:\n        mask_cluster[0, 0, 0] = 0\n        mask_cluster[0, 2, 0] = 0\n        mask_cluster[2, 0, 0] = 0\n        mask_cluster[2, 2, 0] = 0\n        mask_cluster[0, 0, 2] = 0\n        mask_cluster[0, 2, 2] = 0\n        mask_cluster[2, 0, 2] = 0\n        mask_cluster[2, 2, 2] = 0\n\n    elif nvoxel == 7:\n\n        mask_cluster[0, 0, 0] = 0\n        mask_cluster[0, 1, 0] = 0\n        mask_cluster[0, 2, 0] = 0\n        mask_cluster[0, 0, 1] = 0\n        mask_cluster[0, 2, 1] = 0\n        mask_cluster[0, 0, 2] = 0\n        mask_cluster[0, 1, 2] = 0\n        mask_cluster[0, 2, 2] = 0\n        mask_cluster[1, 0, 0] = 0\n        mask_cluster[1, 2, 0] = 0\n        mask_cluster[1, 0, 2] = 0\n        mask_cluster[1, 2, 2] = 0\n        mask_cluster[2, 0, 0] = 0\n        mask_cluster[2, 1, 0] = 0\n        mask_cluster[2, 2, 0] = 0\n        mask_cluster[2, 0, 1] = 0\n        mask_cluster[2, 2, 1] = 0\n        mask_cluster[2, 0, 2] = 0\n        mask_cluster[2, 1, 2] = 0\n        mask_cluster[2, 2, 2] = 0\n\n\n    for i in range(1, n_x - 1):\n\n        for j in range(1, n_y -1):\n\n            for k in range(1, n_z -1):\n\n\n\n                block = Ranks_res_data[:, i-1:i+2, j-1:j+2, k-1:k+2]\n                mask_block = res_mask_data[i-1:i+2, j-1:j+2, k-1:k+2]\n\n\n                if not(int(mask_block[1, 1, 1]) == 0):\n\n\n                    if nvoxel == 19 or nvoxel == 7:\n\n                        mask_block = np.multiply(mask_block, mask_cluster)\n\n                    R_block = np.reshape(block, (block.shape[0], 27), order=\'F\')\n                    mask_R_block = R_block[:, np.argwhere(np.reshape(mask_block, (1, 27), order=\'F\') > 0)[:, 1]]\n\n                    K[i, j, k] = f_kendall(mask_R_block)\n\n\n    img = nb.Nifti1Image(K, header=res_img.get_header(), affine=res_img.get_affine())\n\n    reho_file = os.path.join(os.getcwd(), \'ReHo.nii.gz\')\n\n    img.to_filename(reho_file)\n\n    out_file = reho_file\n\n    return out_file\n'
p9628
sg47
g39
sg4946
g39
sg4974
g39
sbsg82
I1
sg78
I1
sg307
(dp9629
g60
Nssg304
Nsg310
(lp9630
g60
asbsg83
Nsg90
I00
sg85
(dp9631
sg92
Nsg89
Nsg99
Nsg74
g4982
sg87
S'reho_1'
p9632
sg91
I00
sg93
Nsg94
I00
sg95
g4982
sg96
Nsg97
(lp9633
sg100
Nsb(dp9634
sg5
(g18
g7
Ntp9635
Rp9636
(dp9637
g22
(dp9638
sg24
g5
(g106
g7
Ntp9639
Rp9640
(dp9641
g119
I01
sg29
g30
(g110
tp9642
Rp9643
(dp9644
g35
g36
sg4945
g39
sg2440
g39
sg4946
I27
sbsg117
(lp9645
g4946
ag4945
ag2440
asg82
I1
sg78
I1
sbsg83
Nsg90
I00
sg85
(dp9646
sg92
Nsg89
Nsg99
Nsg74
g120
sg87
g9632
sg91
I00
sg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp9647
sg100
Nsb(dp9648
sg5
(g18
g7
Ntp9649
Rp9650
(dp9651
g22
(dp9652
sg24
g5
(g106
g7
Ntp9653
Rp9654
(dp9655
g119
I01
sg29
g30
(g110
tp9656
Rp9657
(dp9658
g35
g36
sg4927
g39
sbsg117
(lp9659
g4927
asg82
I1
sg78
I1
sbsg83
Nsg90
I00
sg85
(dp9660
sg92
Nsg89
Nsg99
Nsg74
g136
sg87
g9632
sg91
I00
sg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp9661
sg100
Nsb(dp9662
ssg140
g65
sg141
g65
sg142
(dp9663
g9618
(dp9664
g9650
(dp9665
g146
(lp9666
(g60
g4927
tp9667
asssg9636
(dp9668
g9618
(dp9669
g146
(lp9670
(g4945
g47
tp9671
a(g2440
g4974
tp9672
a(g4946
g4946
tp9673
asssg9650
(dp9674
ssg157
g9663
sg158
(dp9675
sg160
g65
sg161
g9663
sg162
(dp9676
g9618
(dp9677
g9636
g9669
ssg9636
(dp9678
sg9650
(dp9679
g9618
g9665
sssbsg74
g9632
sg87
g167
sg95
g9632
sg96
g168
((lp9680
(lp9681
g171
ag168
((lp9682
(lp9683
g174
ag175
aa(lp9684
g177
ag178
aa(lp9685
g180
ag181
aa(lp9686
g183
ag184
aa(lp9687
g186
ag187
aa(lp9688
g189
ag190
aa(lp9689
g192
ag193
aatp9690
Rp9691
aa(lp9692
g197
ag168
((lp9693
(lp9694
g200
ag201
aa(lp9695
g203
ag204
aa(lp9696
g206
ag207
aa(lp9697
g209
ag210
aa(lp9698
g212
ag213
aa(lp9699
g215
ag216
aa(lp9700
g218
ag219
aa(lp9701
g221
ag222
aa(lp9702
g224
ag225
aa(lp9703
g227
ag228
aa(lp9704
g230
ag231
aa(lp9705
g233
ag234
aa(lp9706
g236
ag237
aa(lp9707
g239
ag240
aa(lp9708
g242
ag243
aa(lp9709
g245
ag246
aa(lp9710
g248
ag249
aa(lp9711
g251
ag252
aa(lp9712
g254
ag255
aa(lp9713
g257
ag258
aa(lp9714
g260
ag261
aa(lp9715
g263
ag264
aatp9716
Rp9717
aa(lp9718
g268
ag168
((lp9719
(lp9720
g271
ag272
aatp9721
Rp9722
aatp9723
Rp9724
sg100
Nsbg5047
tp9725
sg371
g5050
sg5051
g5053
sS'alff_to_standard'
p9726
(g5
(g6
g7
Ntp9727
Rp9728
(dp9729
g11
g5
(g12
g7
Ntp9730
Rp9731
(dp9732
g16
(dp9733
g5
(g18
g7
Ntp9734
Rp9735
(dp9736
g22
(dp9737
sg24
g5
(g106
g7
Ntp9738
Rp9739
(dp9740
g29
g30
(g110
tp9741
Rp9742
(dp9743
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp9744
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp9745
sg87
S'alff_to_standard_1'
p9746
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp9747
sg99
Nsg100
Nsb(dp9748
sg5
(g18
g7
Ntp9749
Rp9750
(dp9751
g22
(dp9752
sg24
g5
(g106
g7
Ntp9753
Rp9754
(dp9755
g29
g30
(g110
tp9756
Rp9757
(dp9758
g35
g36
sg876
g39
sbsg117
(lp9759
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp9760
sg87
g9746
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp9761
sg99
Nsg100
Nsb(dp9762
sg5
(g18
g7
Ntp9763
Rp9764
(dp9765
g22
(dp9766
sg24
g5
(g867
g7
Ntp9767
Rp9768
(dp9769
g29
g30
(g871
tp9770
Rp9771
(dp9772
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp9773
g883
S'1'
p9774
stp9775
Rp9776
(dp9777
g72
S'environ_items'
p9778
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp9779
sg87
g9746
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp9780
sg99
Nsg100
Nsb(dp9781
ssg140
g65
sg141
g65
sg142
(dp9782
g9735
(dp9783
g9764
(dp9784
g146
(lp9785
(g890
g890
tp9786
a(g889
g889
tp9787
a(g435
g435
tp9788
a(g474
g474
tp9789
a(g881
g881
tp9790
a(g900
g900
tp9791
asssg9750
(dp9792
sg9764
(dp9793
g9750
(dp9794
g146
(lp9795
(g876
g876
tp9796
assssg157
g9782
sg158
(dp9797
sg160
g65
sg161
g9782
sg162
(dp9798
g9735
(dp9799
sg9750
(dp9800
g9764
g9794
ssg9764
(dp9801
g9735
g9784
sssbsg74
g9746
sg87
g167
sg95
g9746
sg96
g168
((lp9802
(lp9803
g171
ag168
((lp9804
(lp9805
g174
ag175
aa(lp9806
g177
ag178
aa(lp9807
g180
ag181
aa(lp9808
g183
ag184
aa(lp9809
g186
ag187
aa(lp9810
g189
ag190
aa(lp9811
g192
ag193
aatp9812
Rp9813
aa(lp9814
g197
ag168
((lp9815
(lp9816
g200
ag201
aa(lp9817
g203
ag204
aa(lp9818
g206
ag207
aa(lp9819
g209
ag210
aa(lp9820
g212
ag213
aa(lp9821
g215
ag216
aa(lp9822
g218
ag219
aa(lp9823
g221
ag222
aa(lp9824
g224
ag225
aa(lp9825
g227
ag228
aa(lp9826
g230
ag231
aa(lp9827
g233
ag234
aa(lp9828
g236
ag237
aa(lp9829
g239
ag240
aa(lp9830
g242
ag243
aa(lp9831
g245
ag246
aa(lp9832
g248
ag249
aa(lp9833
g251
ag252
aa(lp9834
g254
ag255
aa(lp9835
g257
ag258
aa(lp9836
g260
ag261
aa(lp9837
g263
ag264
aatp9838
Rp9839
aa(lp9840
g268
ag168
((lp9841
(lp9842
g271
ag272
aatp9843
Rp9844
aatp9845
Rp9846
sg100
Nsbg2362
tp9847
sg5176
g5333
sg5334
g5336
sg2378
(g5
(g6
g7
Ntp9848
Rp9849
(dp9850
g11
g5
(g12
g7
Ntp9851
Rp9852
(dp9853
g16
(dp9854
g5
(g18
g7
Ntp9855
Rp9856
(dp9857
g22
(dp9858
sg24
g5
(g5348
g7
Ntp9859
Rp9860
(dp9861
g29
g30
(g5352
tp9862
Rp9863
(dp9864
g50
I00
sg35
g36
sg52
g39
sg5356
g5357
sg54
g55
sg63
g5
(g64
g65
(dp9865
g67
g68
stp9866
Rp9867
(dp9868
g72
S'environ_items'
p9869
sg74
g63
sbsg47
g39
sg75
g68
sg474
g5363
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
g5364
sg85
(dp9870
sg87
S'temporal_dual_regression_1'
p9871
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5364
sg96
Nsg97
(lp9872
sg99
Nsg100
Nsb(dp9873
sg5
(g18
g7
Ntp9874
Rp9875
(dp9876
g22
(dp9877
sg24
g5
(g291
g7
Ntp9878
Rp9879
(dp9880
g29
g30
(g295
tp9881
Rp9882
(dp9883
g50
I00
sg35
g36
sg302
S"def check_ts(in_file):\n    import numpy as np\n    try:\n        timepoints, rois = np.loadtxt(in_file).shape\n    except ValueError:\n        timepoints = np.loadtxt(in_file).shape[0]\n        rois = 1\t\n    if rois > timepoints:\n        message = ('\\n\\n\\n****The number of timepoints (' + str(timepoints)\n                   + ') is smaller than the number of ROIs to run ('\n                   + str(rois) + ') - therefore the GLM is'\n                   + ' underspecified and can\\'t run.****\\n\\n\\n')\n        print(message)\n        raise Exception(message)\n    else:\n        return in_file\n"
p9884
sg47
g39
sbsg78
I1
sg304
Nsg305
(lp9885
g47
asg82
I1
sg307
(dp9886
g60
Nssg310
(lp9887
g60
asbsg83
Nsg74
g5418
sg85
(dp9888
sg87
g9871
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5418
sg96
Nsg97
(lp9889
sg99
Nsg100
Nsb(dp9890
sg5
(g18
g7
Ntp9891
Rp9892
(dp9893
g22
(dp9894
sg24
g5
(g5348
g7
Ntp9895
Rp9896
(dp9897
g29
g30
(g5352
tp9898
Rp9899
(dp9900
g50
I00
sg35
g36
sg52
g39
sg5356
g5379
sg54
g55
sg63
g5
(g64
g65
(dp9901
g67
g68
stp9902
Rp9903
(dp9904
g72
S'environ_items'
p9905
sg74
g63
sbsg47
g39
sg75
g68
sg474
g5363
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
g5385
sg85
(dp9906
sg87
g9871
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5385
sg96
Nsg97
(lp9907
sg99
Nsg100
Nsb(dp9908
sg5
(g18
g7
Ntp9909
Rp9910
(dp9911
g22
(dp9912
sg24
g5
(g25
g7
Ntp9913
Rp9914
(dp9915
g29
g30
(g31
tp9916
Rp9917
(dp9918
g35
g36
sg37
g39
sg40
g39
sg41
g39
sg42
g39
sg43
g39
sg44
g39
sg45
g39
sg46
g39
sg47
g39
sg48
g39
sg49
g39
sg50
I00
sg51
g39
sg52
g39
sg53
g5432
sg54
g55
sg56
g39
sg57
g39
sg58
g39
sg59
g39
sg60
g5433
sg62
g39
sg63
g5
(g64
g65
(dp9919
g67
g68
stp9920
Rp9921
(dp9922
g72
S'environ_items'
p9923
sg74
g63
sbsg75
g68
sg76
g39
sg77
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
g5439
sg85
(dp9924
sg87
g9871
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5439
sg96
Nsg97
(lp9925
sg99
Nsg100
Nsb(dp9926
sg5
(g18
g7
Ntp9927
Rp9928
(dp9929
g22
(dp9930
sg24
g5
(g106
g7
Ntp9931
Rp9932
(dp9933
g29
g30
(g110
tp9934
Rp9935
(dp9936
g35
g36
sg5453
g39
sg5454
g39
sg5455
g39
sg5456
g39
sbsg117
(lp9937
g5455
ag5453
ag5456
ag5454
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp9938
sg87
g9871
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp9939
sg99
Nsg100
Nsb(dp9940
sg5
(g18
g7
Ntp9941
Rp9942
(dp9943
g22
(dp9944
sg24
g5
(g106
g7
Ntp9945
Rp9946
(dp9947
g29
g30
(g110
tp9948
Rp9949
(dp9950
g5399
I01
sg115
g39
sg134
g39
sg116
g39
sg48
I01
sg35
g36
sbsg117
(lp9951
g115
ag134
ag116
ag48
ag5399
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp9952
sg87
g9871
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp9953
sg99
Nsg100
Nsb(dp9954
ssg140
g65
sg141
g65
sg142
(dp9955
g9856
(dp9956
g9928
(dp9957
g146
(lp9958
(g5465
g5454
tp9959
asssg9875
(dp9960
g9910
(dp9961
g146
(lp9962
(g60
g45
tp9963
asssg9892
(dp9964
g9928
(dp9965
g146
(lp9966
(g5465
g5453
tp9967
asssg9910
(dp9968
g9856
(dp9969
g146
(lp9970
(g5489
g47
tp9971
assg9928
(dp9972
g146
(lp9973
(g60
g5455
tp9974
a(g5489
g5456
tp9975
assg9892
(dp9976
g146
(lp9977
(g60
g47
tp9978
asssg9928
(dp9979
sg9942
(dp9980
g9875
(dp9981
g146
(lp9982
(g134
g47
tp9983
assg9910
(dp9984
g146
(lp9985
(g115
g47
tp9986
a(g48
g48
tp9987
a(g5399
g76
tp9988
a(g116
g41
tp9989
assssg157
g9955
sg158
(dp9990
sg160
g65
sg161
g9955
sg162
(dp9991
g9856
(dp9992
g9910
g9969
ssg9875
(dp9993
g9942
g9981
ssg9892
(dp9994
g9910
g9976
ssg9910
(dp9995
g9875
g9961
sg9942
g9984
ssg9928
(dp9996
g9910
g9972
sg9892
g9965
sg9856
g9957
ssg9942
(dp9997
ssbsg74
g9871
sg87
g167
sg95
g9871
sg96
g168
((lp9998
(lp9999
g171
ag168
((lp10000
(lp10001
g174
ag175
aa(lp10002
g177
ag178
aa(lp10003
g180
ag181
aa(lp10004
g183
ag184
aa(lp10005
g186
ag187
aa(lp10006
g189
ag190
aa(lp10007
g192
ag193
aatp10008
Rp10009
aa(lp10010
g197
ag168
((lp10011
(lp10012
g200
ag201
aa(lp10013
g203
ag204
aa(lp10014
g206
ag207
aa(lp10015
g209
ag210
aa(lp10016
g212
ag213
aa(lp10017
g215
ag216
aa(lp10018
g218
ag219
aa(lp10019
g221
ag222
aa(lp10020
g224
ag225
aa(lp10021
g227
ag228
aa(lp10022
g230
ag231
aa(lp10023
g233
ag234
aa(lp10024
g236
ag237
aa(lp10025
g239
ag240
aa(lp10026
g242
ag243
aa(lp10027
g245
ag246
aa(lp10028
g248
ag249
aa(lp10029
g251
ag252
aa(lp10030
g254
ag255
aa(lp10031
g257
ag258
aa(lp10032
g260
ag261
aa(lp10033
g263
ag264
aatp10034
Rp10035
aa(lp10036
g268
ag168
((lp10037
(lp10038
g271
ag272
aatp10039
Rp10040
aatp10041
Rp10042
sg100
Nsbg5551
tp10043
sg5553
(g5
(g18
g7
Ntp10044
Rp10045
(dp10046
g22
(dp10047
sg24
g5
(g801
g7
Ntp10048
Rp10049
(dp10050
g29
g30
(g805
tp10051
Rp10052
(dp10053
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp10054
g67
g68
stp10055
Rp10056
(dp10057
g72
S'environ_items'
p10058
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'dr_tempreg_maps_stack_smooth_1'
p10059
sg85
(dp10060
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10059
sg96
Nsg97
(lp10061
sg99
Nsg100
Nsbg60
tp10062
sg5573
(g9849
g5574
tp10063
sg5576
g5578
sg3799
g5874
sg372
g5875
sg5876
g5878
sS'motion_correct_smooth'
p10064
(g5
(g18
g7
Ntp10065
Rp10066
(dp10067
g22
(dp10068
sg24
g5
(g801
g7
Ntp10069
Rp10070
(dp10071
g29
g30
(g805
tp10072
Rp10073
(dp10074
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp10075
g67
g68
stp10076
Rp10077
(dp10078
g72
S'environ_items'
p10079
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'motion_correct_smooth_1'
p10080
sg85
(dp10081
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10080
sg96
Nsg97
(lp10082
sg99
Nsg100
Nsbg60
tp10083
sS'falff_to_standard_smooth'
p10084
(g5
(g18
g7
Ntp10085
Rp10086
(dp10087
g22
(dp10088
sg24
g5
(g801
g7
Ntp10089
Rp10090
(dp10091
g29
g30
(g805
tp10092
Rp10093
(dp10094
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp10095
g67
g68
stp10096
Rp10097
(dp10098
g72
S'environ_items'
p10099
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'falff_to_standard_smooth_1'
p10100
sg85
(dp10101
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10100
sg96
Nsg97
(lp10102
sg99
Nsg100
Nsbg60
tp10103
sS'reho_smooth'
p10104
(g5
(g18
g7
Ntp10105
Rp10106
(dp10107
g22
(dp10108
sg24
g5
(g801
g7
Ntp10109
Rp10110
(dp10111
g29
g30
(g805
tp10112
Rp10113
(dp10114
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp10115
g67
g68
stp10116
Rp10117
(dp10118
g72
S'environ_items'
p10119
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'reho_smooth_1'
p10120
sg85
(dp10121
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10120
sg96
Nsg97
(lp10122
sg99
Nsg100
Nsbg60
tp10123
sg5939
(g5
(g6
g7
Ntp10124
Rp10125
(dp10126
g11
g5
(g12
g7
Ntp10127
Rp10128
(dp10129
g16
(dp10130
g5
(g18
g7
Ntp10131
Rp10132
(dp10133
g22
(dp10134
sg24
g5
(g106
g7
Ntp10135
Rp10136
(dp10137
g29
g30
(g110
tp10138
Rp10139
(dp10140
g35
g36
sg6005
g39
sbsg117
(lp10141
g6005
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp10142
sg87
S'centrality_zscore_1'
p10143
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp10144
sg99
Nsg100
Nsb(dp10145
sg5
(g2365
g7
Ntp10146
Rp10147
(dp10148
g2369
I00
sg22
(dp10149
sg24
g5
(g5967
g7
Ntp10150
Rp10151
(dp10152
g29
g30
(g5971
tp10153
Rp10154
(dp10155
g50
I00
sg35
g36
sg810
g5975
sg5976
g39
sg52
g39
sg54
g55
sg63
g5
(g64
g65
(dp10156
g67
g68
stp10157
Rp10158
(dp10159
g72
S'environ_items'
p10160
sg74
g63
sbsg47
g39
sg4974
g39
sg75
g68
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp10161
Rp10162
(dp10163
g50
I00
sg35
g36
sg810
g5975
sg5976
g39
sg52
g39
sg54
g55
sg63
g5
(g64
g65
(dp10164
g67
g68
stp10165
Rp10166
(dp10167
g72
S'environ_items'
p10168
sg74
g63
sbsg47
g39
sg4974
g39
sg75
g68
sbsg74
g5990
sg85
(dp10169
sg2388
I00
sg87
g10143
sg2389
(lp10170
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g5990
sg96
Nsg97
(lp10171
sg99
Nsg100
Nsb(dp10172
sg5
(g2365
g7
Ntp10173
Rp10174
(dp10175
g2369
I00
sg22
(dp10176
sg24
g5
(g5967
g7
Ntp10177
Rp10178
(dp10179
g29
g30
(g5971
tp10180
Rp10181
(dp10182
g50
I00
sg35
g36
sg810
g6020
sg5976
g39
sg52
g39
sg54
g55
sg63
g5
(g64
g65
(dp10183
g67
g68
stp10184
Rp10185
(dp10186
g72
S'environ_items'
p10187
sg74
g63
sbsg47
g39
sg4974
g39
sg75
g68
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp10188
Rp10189
(dp10190
g50
I00
sg35
g36
sg810
g6020
sg5976
g39
sg52
g39
sg54
g55
sg63
g5
(g64
g65
(dp10191
g67
g68
stp10192
Rp10193
(dp10194
g72
S'environ_items'
p10195
sg74
g63
sbsg47
g39
sg4974
g39
sg75
g68
sbsg74
g6034
sg85
(dp10196
sg2388
I00
sg87
g10143
sg2389
(lp10197
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6034
sg96
Nsg97
(lp10198
sg99
Nsg100
Nsb(dp10199
sg5
(g18
g7
Ntp10200
Rp10201
(dp10202
g22
(dp10203
sg24
g5
(g106
g7
Ntp10204
Rp10205
(dp10206
g29
g30
(g110
tp10207
Rp10208
(dp10209
g4974
g4782
sg35
g36
sg5957
g39
sbsg117
(lp10210
g5957
ag4974
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp10211
sg87
g10143
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp10212
sg99
Nsg100
Nsb(dp10213
sg5
(g2365
g7
Ntp10214
Rp10215
(dp10216
g2369
I00
sg22
(dp10217
sg24
g5
(g801
g7
Ntp10218
Rp10219
(dp10220
g29
g30
(g805
tp10221
Rp10222
(dp10223
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp10224
g67
g68
stp10225
Rp10226
(dp10227
g72
S'environ_items'
p10228
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp10229
Rp10230
(dp10231
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp10232
g67
g68
stp10233
Rp10234
(dp10235
g72
S'environ_items'
p10236
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg74
g6084
sg85
(dp10237
sg2388
I00
sg87
g10143
sg2389
(lp10238
g47
ag810
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6084
sg96
Nsg97
(lp10239
sg99
Nsg100
Nsb(dp10240
sg5
(g2365
g7
Ntp10241
Rp10242
(dp10243
g2369
I00
sg22
(dp10244
sg24
g5
(g291
g7
Ntp10245
Rp10246
(dp10247
g29
g30
(g295
tp10248
Rp10249
(dp10250
g50
I00
sg302
S'def get_operand_string(mean, std_dev):\n    """\n    Method to get operand string for Fsl Maths\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    ------\n    op_string : string\n        operand string\n    """\n\n    str1 = "-sub %f -div %f" % (float(mean), float(std_dev))\n    op_string = str1 + " -mas %s"\n    return op_string\n'
p10251
sg6050
g39
sg35
g36
sg6034
g39
sbsg78
I1
sg304
Nsg305
(lp10252
g6034
ag6050
asg82
I1
sg307
(dp10253
g810
Nssg310
(lp10254
g810
asbsg83
Nsg2382
g30
(g110
tp10255
Rp10256
(dp10257
g50
I00
sg302
g10251
sg6050
g39
sg35
g36
sg6034
g39
sbsg74
g810
sg85
(dp10258
sg2388
I00
sg87
g10143
sg2389
(lp10259
g6034
ag6050
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g810
sg96
Nsg97
(lp10260
sg99
Nsg100
Nsb(dp10261
ssg140
g65
sg141
g65
sg142
(dp10262
g10132
(dp10263
sg10147
(dp10264
g10242
(dp10265
g146
(lp10266
(g6106
g6050
tp10267
asssg10174
(dp10268
g10242
(dp10269
g146
(lp10270
(g6106
g6034
tp10271
asssg10201
(dp10272
g10147
(dp10273
g146
(lp10274
(g5957
g47
tp10275
a(g4974
g4974
tp10276
assg10174
(dp10277
g146
(lp10278
(g5957
g47
tp10279
a(g4974
g4974
tp10280
assg10215
(dp10281
g146
(lp10282
(g5957
g47
tp10283
a(g4974
g819
tp10284
asssg10215
(dp10285
g10132
(dp10286
g146
(lp10287
(g60
g6005
tp10288
asssg10242
(dp10289
g10215
(dp10290
g146
(lp10291
(g810
g810
tp10292
assssg157
g10262
sg158
(dp10293
sg160
g65
sg161
g10262
sg162
(dp10294
g10132
(dp10295
g10215
g10286
ssg10147
(dp10296
g10201
g10273
ssg10174
(dp10297
g10201
g10277
ssg10201
(dp10298
sg10215
(dp10299
g10201
g10281
sg10242
g10290
ssg10242
(dp10300
g10147
g10265
sg10174
g10269
sssbsg74
g10143
sg87
g167
sg95
g10143
sg96
g168
((lp10301
(lp10302
g171
ag168
((lp10303
(lp10304
g174
ag175
aa(lp10305
g177
ag178
aa(lp10306
g180
ag181
aa(lp10307
g183
ag184
aa(lp10308
g186
ag187
aa(lp10309
g189
ag190
aa(lp10310
g192
ag193
aatp10311
Rp10312
aa(lp10313
g197
ag168
((lp10314
(lp10315
g200
ag201
aa(lp10316
g203
ag204
aa(lp10317
g206
ag207
aa(lp10318
g209
ag210
aa(lp10319
g212
ag213
aa(lp10320
g215
ag216
aa(lp10321
g218
ag219
aa(lp10322
g221
ag222
aa(lp10323
g224
ag225
aa(lp10324
g227
ag228
aa(lp10325
g230
ag231
aa(lp10326
g233
ag234
aa(lp10327
g236
ag237
aa(lp10328
g239
ag240
aa(lp10329
g242
ag243
aa(lp10330
g245
ag246
aa(lp10331
g248
ag249
aa(lp10332
g251
ag252
aa(lp10333
g254
ag255
aa(lp10334
g257
ag258
aa(lp10335
g260
ag261
aa(lp10336
g263
ag264
aatp10337
Rp10338
aa(lp10339
g268
ag168
((lp10340
(lp10341
g271
ag272
aatp10342
Rp10343
aatp10344
Rp10345
sg100
Nsbg6174
tp10346
sS'dr_tempreg_maps_zstat_files_to_standard'
p10347
(g5
(g6
g7
Ntp10348
Rp10349
(dp10350
g11
g5
(g12
g7
Ntp10351
Rp10352
(dp10353
g16
(dp10354
g5
(g2365
g7
Ntp10355
Rp10356
(dp10357
g2369
I00
sg22
(dp10358
sg24
g5
(g867
g7
Ntp10359
Rp10360
(dp10361
g29
g30
(g871
tp10362
Rp10363
(dp10364
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp10365
g883
S'1'
p10366
stp10367
Rp10368
(dp10369
g72
S'environ_items'
p10370
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg2382
g30
(g110
tp10371
Rp10372
(dp10373
g891
F0.0
sg50
I00
sg78
I1
sg876
g39
sg52
g39
sg877
g2286
sg879
g39
sg875
g39
sg880
g39
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp10374
g883
g10366
stp10375
Rp10376
(dp10377
g72
S'environ_items'
p10378
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg892
g39
sg474
g39
sg35
g36
sg900
g2271
sbsg74
g3679
sg85
(dp10379
sg2388
I00
sg87
S'dr_tempreg_maps_zstat_files_to_standard_1'
p10380
sg2389
(lp10381
g890
ag435
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g3679
sg96
Nsg97
(lp10382
sg99
Nsg100
Nsb(dp10383
sg5
(g18
g7
Ntp10384
Rp10385
(dp10386
g22
(dp10387
sg24
g5
(g106
g7
Ntp10388
Rp10389
(dp10390
g29
g30
(g110
tp10391
Rp10392
(dp10393
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp10394
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp10395
sg87
g10380
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp10396
sg99
Nsg100
Nsb(dp10397
sg5
(g18
g7
Ntp10398
Rp10399
(dp10400
g22
(dp10401
sg24
g5
(g106
g7
Ntp10402
Rp10403
(dp10404
g29
g30
(g110
tp10405
Rp10406
(dp10407
g35
g36
sg876
g39
sbsg117
(lp10408
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp10409
sg87
g10380
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp10410
sg99
Nsg100
Nsb(dp10411
ssg140
g65
sg141
g65
sg142
(dp10412
g10356
(dp10413
g10399
(dp10414
g146
(lp10415
(g876
g876
tp10416
asssg10385
(dp10417
g10356
(dp10418
g146
(lp10419
(g890
g890
tp10420
a(g889
g889
tp10421
a(g435
g435
tp10422
a(g474
g474
tp10423
a(g881
g881
tp10424
a(g900
g900
tp10425
asssg10399
(dp10426
ssg157
g10412
sg158
(dp10427
sg160
g65
sg161
g10412
sg162
(dp10428
g10356
(dp10429
g10385
g10418
ssg10385
(dp10430
sg10399
(dp10431
g10356
g10414
sssbsg74
g10380
sg87
g167
sg95
g10380
sg96
g168
((lp10432
(lp10433
g171
ag168
((lp10434
(lp10435
g174
ag175
aa(lp10436
g177
ag178
aa(lp10437
g180
ag181
aa(lp10438
g183
ag184
aa(lp10439
g186
ag187
aa(lp10440
g189
ag190
aa(lp10441
g192
ag193
aatp10442
Rp10443
aa(lp10444
g197
ag168
((lp10445
(lp10446
g200
ag201
aa(lp10447
g203
ag204
aa(lp10448
g206
ag207
aa(lp10449
g209
ag210
aa(lp10450
g212
ag213
aa(lp10451
g215
ag216
aa(lp10452
g218
ag219
aa(lp10453
g221
ag222
aa(lp10454
g224
ag225
aa(lp10455
g227
ag228
aa(lp10456
g230
ag231
aa(lp10457
g233
ag234
aa(lp10458
g236
ag237
aa(lp10459
g239
ag240
aa(lp10460
g242
ag243
aa(lp10461
g245
ag246
aa(lp10462
g248
ag249
aa(lp10463
g251
ag252
aa(lp10464
g254
ag255
aa(lp10465
g257
ag258
aa(lp10466
g260
ag261
aa(lp10467
g263
ag264
aatp10468
Rp10469
aa(lp10470
g268
ag168
((lp10471
(lp10472
g271
ag272
aatp10473
Rp10474
aatp10475
Rp10476
sg100
Nsbg2362
tp10477
sg6307
(g8096
g6308
tp10478
sg5689
g6311
sS'output_means.@falff_smooth_average'
p10479
(g5
(g18
g7
Ntp10480
Rp10481
(dp10482
g22
(dp10483
sg24
g5
(g291
g7
Ntp10484
Rp10485
(dp10486
g29
g30
(g295
tp10487
Rp10488
(dp10489
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p10490
sg632
g6324
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp10491
g47
ag632
asg82
I1
sg307
(dp10492
g636
Nssg310
(lp10493
g636
asbsg83
Nsg74
S'falff_smooth_mean_to_txt_1'
p10494
sg85
(dp10495
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10494
sg96
Nsg97
(lp10496
sg99
Nsg100
Nsbg636
tp10497
sg6332
(g5
(g2365
g7
Ntp10498
Rp10499
(dp10500
g2369
I00
sg22
(dp10501
sg24
g5
(g801
g7
Ntp10502
Rp10503
(dp10504
g29
g30
(g805
tp10505
Rp10506
(dp10507
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp10508
g67
g68
stp10509
Rp10510
(dp10511
g72
S'environ_items'
p10512
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp10513
Rp10514
(dp10515
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp10516
g67
g68
stp10517
Rp10518
(dp10519
g72
S'environ_items'
p10520
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg74
S'dr_tempreg_maps_zstat_files_smooth_1'
p10521
sg85
(dp10522
sg2388
I00
sg87
g167
sg2389
(lp10523
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10521
sg96
Nsg97
(lp10524
sg99
Nsg100
Nsbg60
tp10525
sg6361
(g9849
g6362
tp10526
sS'output_means.@reho_smooth_average'
p10527
(g5
(g18
g7
Ntp10528
Rp10529
(dp10530
g22
(dp10531
sg24
g5
(g291
g7
Ntp10532
Rp10533
(dp10534
g29
g30
(g295
tp10535
Rp10536
(dp10537
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p10538
sg632
g6376
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp10539
g47
ag632
asg82
I1
sg307
(dp10540
g636
Nssg310
(lp10541
g636
asbsg83
Nsg74
S'reho_smooth_mean_to_txt_1'
p10542
sg85
(dp10543
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10542
sg96
Nsg97
(lp10544
sg99
Nsg100
Nsbg636
tp10545
sg6384
g6386
sg1880
g6388
sS'output_means.@alff_img_average'
p10546
(g5
(g18
g7
Ntp10547
Rp10548
(dp10549
g22
(dp10550
sg24
g5
(g291
g7
Ntp10551
Rp10552
(dp10553
g29
g30
(g295
tp10554
Rp10555
(dp10556
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p10557
sg632
g5689
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp10558
g47
ag632
asg82
I1
sg307
(dp10559
g636
Nssg310
(lp10560
g636
asbsg83
Nsg74
S'alff_img_mean_to_txt_1'
p10561
sg85
(dp10562
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10561
sg96
Nsg97
(lp10563
sg99
Nsg100
Nsbg636
tp10564
sg6408
g6410
sg6411
g6413
sg1877
g6415
sS'output_means.@alff_to_standard_average'
p10565
(g5
(g18
g7
Ntp10566
Rp10567
(dp10568
g22
(dp10569
sg24
g5
(g291
g7
Ntp10570
Rp10571
(dp10572
g29
g30
(g295
tp10573
Rp10574
(dp10575
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p10576
sg632
g6428
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp10577
g47
ag632
asg82
I1
sg307
(dp10578
g636
Nssg310
(lp10579
g636
asbsg83
Nsg74
S'alff_to_standard_mean_to_txt_1'
p10580
sg85
(dp10581
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10580
sg96
Nsg97
(lp10582
sg99
Nsg100
Nsbg636
tp10583
sg6436
(g5
(g6
g7
Ntp10584
Rp10585
(dp10586
g11
g5
(g12
g7
Ntp10587
Rp10588
(dp10589
g16
(dp10590
g5
(g18
g7
Ntp10591
Rp10592
(dp10593
g22
(dp10594
sg24
g5
(g6464
g7
Ntp10595
Rp10596
(dp10597
g29
g30
(g6468
tp10598
Rp10599
(dp10600
g50
I00
sg35
g36
sg52
g6472
sg41
g39
sg6473
I00
sg54
g6474
sg63
g5
(g64
g65
(dp10601
tp10602
Rp10603
(dp10604
g72
S'environ_items'
p10605
sg74
g63
sbsg47
g39
sg6480
g39
sbsg82
I1
sg79
g6474
sg81
Nsg78
I1
sbsg83
Nsg74
g6481
sg85
(dp10606
sg87
S'roi_timeseries_1'
p10607
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6481
sg96
Nsg97
(lp10608
sg99
Nsg100
Nsb(dp10609
sg5
(g18
g7
Ntp10610
Rp10611
(dp10612
g22
(dp10613
sg24
g5
(g106
g7
Ntp10614
Rp10615
(dp10616
g29
g30
(g110
tp10617
Rp10618
(dp10619
g35
g36
sg75
g39
sg2115
g39
sbsg117
(lp10620
g2115
ag75
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp10621
sg87
g10607
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp10622
sg99
Nsg100
Nsb(dp10623
sg5
(g18
g7
Ntp10624
Rp10625
(dp10626
g22
(dp10627
sg24
g5
(g106
g7
Ntp10628
Rp10629
(dp10630
g29
g30
(g110
tp10631
Rp10632
(dp10633
g35
g36
sg6454
g39
sbsg117
(lp10634
g6454
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp10635
sg87
g10607
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp10636
sg99
Nsg100
Nsb(dp10637
sg5
(g18
g7
Ntp10638
Rp10639
(dp10640
g22
(dp10641
sg24
g5
(g106
g7
Ntp10642
Rp10643
(dp10644
g29
g30
(g110
tp10645
Rp10646
(dp10647
g35
g36
sg6509
g39
sbsg117
(lp10648
g6509
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g6511
sg85
(dp10649
sg87
g10607
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g6511
sg96
Nsg97
(lp10650
sg99
Nsg100
Nsb(dp10651
ssg140
g65
sg141
g65
sg142
(dp10652
g10592
(dp10653
g10625
(dp10654
g146
(lp10655
(g6520
g6454
tp10656
asssg10611
(dp10657
g10592
(dp10658
g146
(lp10659
(g2115
g47
tp10660
asssg10625
(dp10661
sg10639
(dp10662
g10592
(dp10663
g146
(lp10664
(g6509
g41
tp10665
assssg157
g10652
sg158
(dp10666
sg160
g65
sg161
g10652
sg162
(dp10667
g10592
(dp10668
g10611
g10658
sg10639
g10663
ssg10611
(dp10669
sg10625
(dp10670
g10592
g10654
ssg10639
(dp10671
ssbsg74
g10607
sg87
g167
sg95
g10607
sg96
g168
((lp10672
(lp10673
g171
ag168
((lp10674
(lp10675
g174
ag175
aa(lp10676
g177
ag178
aa(lp10677
g180
ag181
aa(lp10678
g183
ag184
aa(lp10679
g186
ag187
aa(lp10680
g189
ag190
aa(lp10681
g192
ag193
aatp10682
Rp10683
aa(lp10684
g197
ag168
((lp10685
(lp10686
g200
ag201
aa(lp10687
g203
ag204
aa(lp10688
g206
ag207
aa(lp10689
g209
ag210
aa(lp10690
g212
ag213
aa(lp10691
g215
ag216
aa(lp10692
g218
ag219
aa(lp10693
g221
ag222
aa(lp10694
g224
ag225
aa(lp10695
g227
ag228
aa(lp10696
g230
ag231
aa(lp10697
g233
ag234
aa(lp10698
g236
ag237
aa(lp10699
g239
ag240
aa(lp10700
g242
ag243
aa(lp10701
g245
ag246
aa(lp10702
g248
ag249
aa(lp10703
g251
ag252
aa(lp10704
g254
ag255
aa(lp10705
g257
ag258
aa(lp10706
g260
ag261
aa(lp10707
g263
ag264
aatp10708
Rp10709
aa(lp10710
g268
ag168
((lp10711
(lp10712
g271
ag272
aatp10713
Rp10714
aatp10715
Rp10716
sg100
Nsbg6581
tp10717
sg6583
g6915
sg6916
g6917
sS'output_means.@falff_to_standard_average'
p10718
(g5
(g18
g7
Ntp10719
Rp10720
(dp10721
g22
(dp10722
sg24
g5
(g291
g7
Ntp10723
Rp10724
(dp10725
g29
g30
(g295
tp10726
Rp10727
(dp10728
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p10729
sg632
g6930
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp10730
g47
ag632
asg82
I1
sg307
(dp10731
g636
Nssg310
(lp10732
g636
asbsg83
Nsg74
S'falff_to_standard_mean_to_txt_1'
p10733
sg85
(dp10734
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10733
sg96
Nsg97
(lp10735
sg99
Nsg100
Nsbg636
tp10736
sg6938
g6940
sg6941
g6943
sS'motion_correct_to_standard_smooth'
p10737
(g5
(g18
g7
Ntp10738
Rp10739
(dp10740
g22
(dp10741
sg24
g5
(g801
g7
Ntp10742
Rp10743
(dp10744
g29
g30
(g805
tp10745
Rp10746
(dp10747
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp10748
g67
g68
stp10749
Rp10750
(dp10751
g72
S'environ_items'
p10752
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'motion_correct_to_standard_smooth_1'
p10753
sg85
(dp10754
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10753
sg96
Nsg97
(lp10755
sg99
Nsg100
Nsbg60
tp10756
sg329
g6965
sg6966
(g5
(g2365
g7
Ntp10757
Rp10758
(dp10759
g2369
I00
sg22
(dp10760
sg24
g5
(g801
g7
Ntp10761
Rp10762
(dp10763
g29
g30
(g805
tp10764
Rp10765
(dp10766
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp10767
g67
g68
stp10768
Rp10769
(dp10770
g72
S'environ_items'
p10771
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g5
(g893
g894
(lp10772
g4782
atp10773
Rp10774
(dp10775
g72
S'operand_files_items'
p10776
sg74
g819
sbsbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg2382
g30
(g110
tp10777
Rp10778
(dp10779
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp10780
g67
g68
stp10781
Rp10782
(dp10783
g72
S'environ_items'
p10784
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g5
(g893
g894
(lp10785
g4782
atp10786
Rp10787
(dp10788
g72
S'operand_files_items'
p10789
sg74
g819
sbsbsg74
S'network_centrality_smooth_1'
p10790
sg85
(dp10791
sg2388
I00
sg87
g167
sg2389
(lp10792
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10790
sg96
Nsg97
(lp10793
sg99
Nsg100
Nsbg60
tp10794
sS'falff_to_standard'
p10795
(g5
(g6
g7
Ntp10796
Rp10797
(dp10798
g11
g5
(g12
g7
Ntp10799
Rp10800
(dp10801
g16
(dp10802
g5
(g18
g7
Ntp10803
Rp10804
(dp10805
g22
(dp10806
sg24
g5
(g867
g7
Ntp10807
Rp10808
(dp10809
g29
g30
(g871
tp10810
Rp10811
(dp10812
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp10813
g883
S'1'
p10814
stp10815
Rp10816
(dp10817
g72
S'environ_items'
p10818
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp10819
sg87
S'falff_to_standard_1'
p10820
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp10821
sg99
Nsg100
Nsb(dp10822
sg5
(g18
g7
Ntp10823
Rp10824
(dp10825
g22
(dp10826
sg24
g5
(g106
g7
Ntp10827
Rp10828
(dp10829
g29
g30
(g110
tp10830
Rp10831
(dp10832
g35
g36
sg881
I0
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp10833
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp10834
sg87
g10820
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp10835
sg99
Nsg100
Nsb(dp10836
sg5
(g18
g7
Ntp10837
Rp10838
(dp10839
g22
(dp10840
sg24
g5
(g106
g7
Ntp10841
Rp10842
(dp10843
g29
g30
(g110
tp10844
Rp10845
(dp10846
g35
g36
sg876
g39
sbsg117
(lp10847
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp10848
sg87
g10820
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp10849
sg99
Nsg100
Nsb(dp10850
ssg140
g65
sg141
g65
sg142
(dp10851
g10804
(dp10852
g10838
(dp10853
g146
(lp10854
(g876
g876
tp10855
asssg10824
(dp10856
g10804
(dp10857
g146
(lp10858
(g890
g890
tp10859
a(g889
g889
tp10860
a(g435
g435
tp10861
a(g474
g474
tp10862
a(g881
g881
tp10863
a(g900
g900
tp10864
asssg10838
(dp10865
ssg157
g10851
sg158
(dp10866
sg160
g65
sg161
g10851
sg162
(dp10867
g10804
(dp10868
g10824
g10857
ssg10824
(dp10869
sg10838
(dp10870
g10804
g10853
sssbsg74
g10820
sg87
g167
sg95
g10820
sg96
g168
((lp10871
(lp10872
g171
ag168
((lp10873
(lp10874
g174
ag175
aa(lp10875
g177
ag178
aa(lp10876
g180
ag181
aa(lp10877
g183
ag184
aa(lp10878
g186
ag187
aa(lp10879
g189
ag190
aa(lp10880
g192
ag193
aatp10881
Rp10882
aa(lp10883
g197
ag168
((lp10884
(lp10885
g200
ag201
aa(lp10886
g203
ag204
aa(lp10887
g206
ag207
aa(lp10888
g209
ag210
aa(lp10889
g212
ag213
aa(lp10890
g215
ag216
aa(lp10891
g218
ag219
aa(lp10892
g221
ag222
aa(lp10893
g224
ag225
aa(lp10894
g227
ag228
aa(lp10895
g230
ag231
aa(lp10896
g233
ag234
aa(lp10897
g236
ag237
aa(lp10898
g239
ag240
aa(lp10899
g242
ag243
aa(lp10900
g245
ag246
aa(lp10901
g248
ag249
aa(lp10902
g251
ag252
aa(lp10903
g254
ag255
aa(lp10904
g257
ag258
aa(lp10905
g260
ag261
aa(lp10906
g263
ag264
aatp10907
Rp10908
aa(lp10909
g268
ag168
((lp10910
(lp10911
g271
ag272
aatp10912
Rp10913
aatp10914
Rp10915
sg100
Nsbg2362
tp10916
sg1879
g7243
sg7244
(g5
(g18
g7
Ntp10917
Rp10918
(dp10919
g22
(dp10920
sg24
g5
(g801
g7
Ntp10921
Rp10922
(dp10923
g29
g30
(g805
tp10924
Rp10925
(dp10926
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp10927
g67
g68
stp10928
Rp10929
(dp10930
g72
S'environ_items'
p10931
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'dr_tempreg_maps_zstat_stack_smooth_1'
p10932
sg85
(dp10933
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g10932
sg96
Nsg97
(lp10934
sg99
Nsg100
Nsbg60
tp10935
sg7264
g7266
sS'functional_freq_filtered'
p10936
(g5
(g18
g7
Ntp10937
Rp10938
(dp10939
g22
(dp10940
sg24
g5
(g291
g7
Ntp10941
Rp10942
(dp10943
g29
g30
(g295
tp10944
Rp10945
(dp10946
g50
I00
sg35
g36
sS'realigned_file'
p10947
g39
sg302
S'def bandpass_voxels(realigned_file, bandpass_freqs, sample_period = None):\n    """\n    Performs ideal bandpass filtering on each voxel time-series.\n\n    Parameters\n    ----------\n    realigned_file : string\n        Path of a realigned nifti file.\n    bandpass_freqs : tuple\n        Tuple containing the bandpass frequencies. (LowCutoff, HighCutoff)\n    sample_period : float, optional\n        Length of sampling period in seconds.  If not specified,\n        this value is read from the nifti file provided.\n\n    Returns\n    -------\n    bandpassed_file : string\n        Path of filtered output (nifti file).\n\n    """\n\n    import os\n    import nibabel as nb\n    import numpy as np\n\n    def ideal_bandpass(data, sample_period, bandpass_freqs):\n        #Derived from YAN Chao-Gan 120504 based on REST.\n        from scipy.fftpack import fft, ifft\n\n    #    sample_period = T\n    #    LowCutoff = 10.\n    #    HighCutoff = 15.\n    #    data = x\n\n        def nextpow2(n):\n            x = np.log2(n)\n            return 2**np.ceil(x)\n\n        sample_freq = 1./sample_period\n        sample_length = data.shape[0]\n\n        data_p = np.zeros(nextpow2(sample_length))\n        data_p[:sample_length] = data\n\n        LowCutoff, HighCutoff = bandpass_freqs\n\n        if(LowCutoff is None): #No lower cutoff (low-pass filter)\n            low_cutoff_i = 0\n        elif(LowCutoff > sample_freq/2.): #Cutoff beyond fs/2 (all-stop filter)\n            low_cutoff_i = int(data_p.shape[0]/2)\n        else:\n            low_cutoff_i = np.ceil(LowCutoff*data_p.shape[0]*sample_period).astype(\'int\')\n\n        if(HighCutoff > sample_freq/2. or HighCutoff is None): #Cutoff beyond fs/2 or unspecified (become a highpass filter)\n            high_cutoff_i = int(data_p.shape[0]/2)\n        else:\n            high_cutoff_i = np.fix(HighCutoff*data_p.shape[0]*sample_period).astype(\'int\')\n\n        freq_mask = np.zeros_like(data_p, dtype=\'bool\')\n        freq_mask[low_cutoff_i:high_cutoff_i+1] = True\n        freq_mask[data_p.shape[0]-high_cutoff_i:data_p.shape[0]+1-low_cutoff_i] = True\n\n\n        f_data = fft(data_p)\n        f_data[freq_mask != True] = 0.\n        data_bp = np.real_if_close(ifft(f_data)[:sample_length])\n\n        return data_bp\n\n    nii = nb.load(realigned_file)\n    data = nii.get_data().astype(\'float64\')\n    mask = (data != 0).sum(-1) != 0\n    Y = data[mask].T\n    Yc = Y - np.tile(Y.mean(0), (Y.shape[0], 1))\n\n    if not sample_period:\n        hdr = nii.get_header()\n        sample_period = float(hdr.get_zooms()[3])\n        # Sketchy check to convert TRs in millisecond units\n        if sample_period > 20.0:\n            sample_period /= 1000.0\n\n    print \'Frequency filtering using sample period: \', sample_period, \'sec\'\n\n    Y_bp = np.zeros_like(Y)\n    for j in range(Y.shape[1]):\n        Y_bp[:,j] = ideal_bandpass(Yc[:,j], sample_period, bandpass_freqs)\n\n    data[mask] = Y_bp.T\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\n    bandpassed_file = os.path.join(os.getcwd(), \'bandpassed_demeaned_filtered.nii.gz\')\n    img.to_filename(bandpassed_file)\n\n    return bandpassed_file\n'
p10948
sS'sample_period'
p10949
g39
sS'bandpass_freqs'
p10950
g39
sbsg78
I1
sg304
Nsg305
(lp10951
g10947
ag10950
ag10949
asg82
I1
sg307
(dp10952
S'bandpassed_file'
p10953
Nssg310
(lp10954
g10953
asbsg83
Nsg74
S'frequency_filter_0'
p10955
sg85
(dp10956
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
(g10950
(lp10957
(lp10958
F0.01
aF0.1
aatp10959
sg94
I00
sg95
g10955
sg96
Nsg97
(lp10960
sg99
Nsg100
Nsbg10953
tp10961
sg7267
(g5
(g6
g7
Ntp10962
Rp10963
(dp10964
g11
g5
(g12
g7
Ntp10965
Rp10966
(dp10967
g16
(dp10968
g5
(g18
g7
Ntp10969
Rp10970
(dp10971
g22
(dp10972
sg24
g5
(g106
g7
Ntp10973
Rp10974
(dp10975
g29
g30
(g110
tp10976
Rp10977
(dp10978
g35
g36
sg881
I3
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp10979
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp10980
sg87
S'apply_ants_warp_functional_to_standard_1'
p10981
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp10982
sg99
Nsg100
Nsb(dp10983
sg5
(g18
g7
Ntp10984
Rp10985
(dp10986
g22
(dp10987
sg24
g5
(g106
g7
Ntp10988
Rp10989
(dp10990
g29
g30
(g110
tp10991
Rp10992
(dp10993
g35
g36
sg876
g39
sbsg117
(lp10994
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp10995
sg87
g10981
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp10996
sg99
Nsg100
Nsb(dp10997
sg5
(g18
g7
Ntp10998
Rp10999
(dp11000
g22
(dp11001
sg24
g5
(g867
g7
Ntp11002
Rp11003
(dp11004
g29
g30
(g871
tp11005
Rp11006
(dp11007
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp11008
g883
S'1'
p11009
stp11010
Rp11011
(dp11012
g72
S'environ_items'
p11013
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp11014
sg87
g10981
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp11015
sg99
Nsg100
Nsb(dp11016
ssg140
g65
sg141
g65
sg142
(dp11017
g10970
(dp11018
g10999
(dp11019
g146
(lp11020
(g890
g890
tp11021
a(g889
g889
tp11022
a(g435
g435
tp11023
a(g474
g474
tp11024
a(g881
g881
tp11025
a(g900
g900
tp11026
asssg10985
(dp11027
sg10999
(dp11028
g10985
(dp11029
g146
(lp11030
(g876
g876
tp11031
assssg157
g11017
sg158
(dp11032
sg160
g65
sg161
g11017
sg162
(dp11033
g10970
(dp11034
sg10985
(dp11035
g10999
g11029
ssg10999
(dp11036
g10970
g11019
sssbsg74
g10981
sg87
g167
sg95
g10981
sg96
g168
((lp11037
(lp11038
g171
ag168
((lp11039
(lp11040
g174
ag175
aa(lp11041
g177
ag178
aa(lp11042
g180
ag181
aa(lp11043
g183
ag184
aa(lp11044
g186
ag187
aa(lp11045
g189
ag190
aa(lp11046
g192
ag193
aatp11047
Rp11048
aa(lp11049
g197
ag168
((lp11050
(lp11051
g200
ag201
aa(lp11052
g203
ag204
aa(lp11053
g206
ag207
aa(lp11054
g209
ag210
aa(lp11055
g212
ag213
aa(lp11056
g215
ag216
aa(lp11057
g218
ag219
aa(lp11058
g221
ag222
aa(lp11059
g224
ag225
aa(lp11060
g227
ag228
aa(lp11061
g230
ag231
aa(lp11062
g233
ag234
aa(lp11063
g236
ag237
aa(lp11064
g239
ag240
aa(lp11065
g242
ag243
aa(lp11066
g245
ag246
aa(lp11067
g248
ag249
aa(lp11068
g251
ag252
aa(lp11069
g254
ag255
aa(lp11070
g257
ag258
aa(lp11071
g260
ag261
aa(lp11072
g263
ag264
aatp11073
Rp11074
aa(lp11075
g268
ag168
((lp11076
(lp11077
g271
ag272
aatp11078
Rp11079
aatp11080
Rp11081
sg100
Nsbg3292
tp11082
sg7389
g7390
sg279
g619
sg7394
g7396
sS'output_means.@raw_reho_map_average'
p11083
(g5
(g18
g7
Ntp11084
Rp11085
(dp11086
g22
(dp11087
sg24
g5
(g291
g7
Ntp11088
Rp11089
(dp11090
g29
g30
(g295
tp11091
Rp11092
(dp11093
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p11094
sg632
g4927
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp11095
g47
ag632
asg82
I1
sg307
(dp11096
g636
Nssg310
(lp11097
g636
asbsg83
Nsg74
S'raw_reho_map_mean_to_txt_1'
p11098
sg85
(dp11099
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g11098
sg96
Nsg97
(lp11100
sg99
Nsg100
Nsbg636
tp11101
sS'dr_tempreg_maps_zstat_stack_to_standard'
p11102
(g5
(g6
g7
Ntp11103
Rp11104
(dp11105
g11
g5
(g12
g7
Ntp11106
Rp11107
(dp11108
g16
(dp11109
g5
(g18
g7
Ntp11110
Rp11111
(dp11112
g22
(dp11113
sg24
g5
(g106
g7
Ntp11114
Rp11115
(dp11116
g29
g30
(g110
tp11117
Rp11118
(dp11119
g35
g36
sg876
g39
sbsg117
(lp11120
g876
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g136
sg85
(dp11121
sg87
S'dr_tempreg_maps_zstat_stack_to_standard_1'
p11122
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g136
sg96
Nsg97
(lp11123
sg99
Nsg100
Nsb(dp11124
sg5
(g18
g7
Ntp11125
Rp11126
(dp11127
g22
(dp11128
sg24
g5
(g106
g7
Ntp11129
Rp11130
(dp11131
g29
g30
(g110
tp11132
Rp11133
(dp11134
g35
g36
sg881
I3
sg435
g39
sg889
g2270
sg890
g39
sg474
I3
sg900
g2271
sbsg117
(lp11135
g890
ag889
ag435
ag474
ag881
ag900
asg82
I1
sg119
I01
sg78
I1
sbsg83
Nsg74
g120
sg85
(dp11136
sg87
g11122
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g120
sg96
Nsg97
(lp11137
sg99
Nsg100
Nsb(dp11138
sg5
(g18
g7
Ntp11139
Rp11140
(dp11141
g22
(dp11142
sg24
g5
(g867
g7
Ntp11143
Rp11144
(dp11145
g29
g30
(g871
tp11146
Rp11147
(dp11148
g50
I00
sg78
I1
sg875
g39
sg876
g39
sg877
g2286
sg879
g39
sg52
g39
sg880
g39
sg35
g36
sg881
g39
sg54
g55
sg63
g5
(g64
g65
(dp11149
g883
S'1'
p11150
stp11151
Rp11152
(dp11153
g72
S'environ_items'
p11154
sg74
g63
sbsg435
g39
sg889
g39
sg890
g39
sg891
F0.0
sg474
g39
sg892
g39
sg900
g2271
sbsg78
I1
sg79
g55
sg81
Nsg82
F1.5
sg902
I1
sbsg83
Nsg74
g2293
sg85
(dp11155
sg87
g11122
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g2293
sg96
Nsg97
(lp11156
sg99
Nsg100
Nsb(dp11157
ssg140
g65
sg141
g65
sg142
(dp11158
g11111
(dp11159
sg11126
(dp11160
g11140
(dp11161
g146
(lp11162
(g890
g890
tp11163
a(g889
g889
tp11164
a(g435
g435
tp11165
a(g474
g474
tp11166
a(g881
g881
tp11167
a(g900
g900
tp11168
asssg11140
(dp11169
g11111
(dp11170
g146
(lp11171
(g876
g876
tp11172
assssg157
g11158
sg158
(dp11173
sg160
g65
sg161
g11158
sg162
(dp11174
g11111
(dp11175
g11140
g11170
ssg11126
(dp11176
sg11140
(dp11177
g11126
g11161
sssbsg74
g11122
sg87
g167
sg95
g11122
sg96
g168
((lp11178
(lp11179
g171
ag168
((lp11180
(lp11181
g174
ag175
aa(lp11182
g177
ag178
aa(lp11183
g180
ag181
aa(lp11184
g183
ag184
aa(lp11185
g186
ag187
aa(lp11186
g189
ag190
aa(lp11187
g192
ag193
aatp11188
Rp11189
aa(lp11190
g197
ag168
((lp11191
(lp11192
g200
ag201
aa(lp11193
g203
ag204
aa(lp11194
g206
ag207
aa(lp11195
g209
ag210
aa(lp11196
g212
ag213
aa(lp11197
g215
ag216
aa(lp11198
g218
ag219
aa(lp11199
g221
ag222
aa(lp11200
g224
ag225
aa(lp11201
g227
ag228
aa(lp11202
g230
ag231
aa(lp11203
g233
ag234
aa(lp11204
g236
ag237
aa(lp11205
g239
ag240
aa(lp11206
g242
ag243
aa(lp11207
g245
ag246
aa(lp11208
g248
ag249
aa(lp11209
g251
ag252
aa(lp11210
g254
ag255
aa(lp11211
g257
ag258
aa(lp11212
g260
ag261
aa(lp11213
g263
ag264
aatp11214
Rp11215
aa(lp11216
g268
ag168
((lp11217
(lp11218
g271
ag272
aatp11219
Rp11220
aatp11221
Rp11222
sg100
Nsbg2362
tp11223
sg7538
g7540
sS'alff_smooth'
p11224
(g5
(g18
g7
Ntp11225
Rp11226
(dp11227
g22
(dp11228
sg24
g5
(g801
g7
Ntp11229
Rp11230
(dp11231
g29
g30
(g805
tp11232
Rp11233
(dp11234
g50
I00
sg809
g39
sg810
g39
sg60
g39
sg52
g39
sg812
g39
sg35
g36
sg54
g55
sg63
g5
(g64
g65
(dp11235
g67
g68
stp11236
Rp11237
(dp11238
g72
S'environ_items'
p11239
sg74
g63
sbsg47
g39
sg75
g68
sg818
g39
sg819
g39
sbsg78
I1
sg79
g55
sg80
g68
sg81
Nsg82
I1
sbsg83
Nsg74
S'alff_smooth_1'
p11240
sg85
(dp11241
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g11240
sg96
Nsg97
(lp11242
sg99
Nsg100
Nsbg60
tp11243
sg7561
(g8096
g7562
tp11244
sg7564
g7566
sg7567
g7568
sg7569
g7571
sg7572
g7573
sS'output_means.@dr_tempreg_maps_files_to_standard_average'
p11245
(g5
(g2365
g7
Ntp11246
Rp11247
(dp11248
g2369
I00
sg22
(dp11249
sg24
g5
(g291
g7
Ntp11250
Rp11251
(dp11252
g29
g30
(g295
tp11253
Rp11254
(dp11255
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p11256
sg632
g7586
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp11257
g47
ag632
asg82
I1
sg307
(dp11258
g636
Nssg310
(lp11259
g636
asbsg83
Nsg2382
g30
(g110
tp11260
Rp11261
(dp11262
g50
I00
sg302
g11256
sg632
g7586
sg47
g39
sg35
g36
sbsg74
S'dr_tempreg_maps_files_to_standard_mean_to_txt_1'
p11263
sg85
(dp11264
sg2388
I00
sg87
g167
sg2389
(lp11265
g47
asg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g11263
sg96
Nsg97
(lp11266
sg99
Nsg100
Nsbg636
tp11267
sg7598
g7600
sg7601
g7602
sg7603
(g9849
g7604
tp11268
sg1878
g7632
sg6741
g7634
sS'output_means.@alff_smooth_average'
p11269
(g5
(g18
g7
Ntp11270
Rp11271
(dp11272
g22
(dp11273
sg24
g5
(g291
g7
Ntp11274
Rp11275
(dp11276
g29
g30
(g295
tp11277
Rp11278
(dp11279
g50
I00
sg302
S'def extract_output_mean(in_file, output_name):\n\n    \'\'\'\n    function takes \'in_file\', which should be an intermediary 1D file\n    from individual-level analysis, containing the mean of the output across\n    all voxels\n\n    it then parses this value and writes it to a .csv file named\n    output_means.csv located in the subject\'s output directory\n    \'\'\'\n\n    import os\n\n    if os.path.exists(in_file):\n\n        mean_oned_file = open(in_file, \'rU\')\n        line = mean_oned_file.readline()\n        mean_oned_file.close()\n\n        line = line.split(\'[\')[0].strip(\' \')\n\n        # get filename of input maskave 1D file\n        filename = in_file.split("/")[-1]\n        filename = filename[0:-3]\n\n\n        split_fullpath = in_file.split("/")\n\n        if ("_mask_" in in_file) and (("sca_roi" in in_file) or \\\n            ("sca_tempreg" in in_file)):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        elif ("_spatial_map_" in in_file) and \\\n            ("dr_tempreg" in in_file):\n\n            for dirname in split_fullpath:\n                if "_spatial_map_" in dirname:\n                    mapname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (mapname, filename)\n\n\n        elif ("_mask_" in in_file) and ("centrality" in in_file):\n\n            for dirname in split_fullpath:\n                if "_mask_" in dirname:\n                    maskname = dirname\n\n            filename = split_fullpath[-1]\n\n            if ".1D" in filename:\n                filename = filename.replace(".1D","")\n\n            resource_name = output_name + "_%s_%s" % (maskname, filename)\n\n\n        else:\n\n            resource_name = output_name\n\n\n        output_means_file = os.path.join(os.getcwd(), \'mean_%s.txt\' % resource_name)\n        output_means = open(output_means_file, \'wb\')\n\n        print >>output_means, line\n\n        output_means.close()\n\n\n    return output_means_file\n'
p11280
sg632
g7647
sg47
g39
sg35
g36
sbsg78
I1
sg304
Nsg305
(lp11281
g47
ag632
asg82
I1
sg307
(dp11282
g636
Nssg310
(lp11283
g636
asbsg83
Nsg74
S'alff_smooth_mean_to_txt_1'
p11284
sg85
(dp11285
sg87
g167
sg89
Nsg90
I00
sg91
I00
sg92
Nsg93
Nsg94
I00
sg95
g11284
sg96
Nsg97
(lp11286
sg99
Nsg100
Nsbg636
tp11287
sasS'status'
p11288
S'Completed'
p11289
sS'strat_0'
p11290
(lp11291
g3379
ag314
ag4525
ag948
ag7629
ag1600
ag7147
aS'func_to_anat_FLIRT_0'
p11292
ag5197
ag6608
ag3830
ag5605
ag7287
ag4372
ag3191
ag4247
ag2421
ag4949
ag662
ag88
ag6457
ag5366
ag7000
ag7000
ag4825
ag7441
ag3652
ag6209
ag5079
ag7025
ag2257
ag5569
aS'dr_tempreg_maps_files_mean_0'
p11293
aS'dr_tempreg_maps_files_to_standard_mean_0'
p11294
aS'dr_tempreg_maps_files_to_standard_smooth_mean_0'
p11295
ag5895
ag6960
ag7557
ag3608
ag3330
ag5915
aS'alff_img_mean_0'
p11296
aS'falff_img_mean_0'
p11297
aS'alff_smooth_mean_0'
p11298
aS'falff_smooth_mean_0'
p11299
aS'alff_to_standard_mean_0'
p11300
aS'falff_to_standard_mean_0'
p11301
aS'alff_to_standard_smooth_mean_0'
p11302
aS'falff_to_standard_smooth_mean_0'
p11303
ag5935
ag2047
aS'raw_reho_map_mean_0'
p11304
aS'reho_smooth_mean_0'
p11305
aS'reho_to_standard_mean_0'
p11306
aS'reho_to_standard_smooth_mean_0'
p11307
asS'strat_1'
p11308
(lp11309
g3379
ag314
ag4525
ag948
ag7629
ag1600
ag7147
ag11292
ag5197
ag6608
ag3830
ag5605
ag10955
ag10981
ag9353
ag8814
ag9227
ag8194
ag9632
ag7812
ag7675
ag10607
ag9871
ag10790
ag10790
ag9508
ag11122
ag9060
ag10380
ag9746
ag10820
ag7970
ag10059
aS'dr_tempreg_maps_files_mean_1'
p11310
aS'dr_tempreg_maps_files_to_standard_mean_1'
p11311
aS'dr_tempreg_maps_files_to_standard_smooth_mean_1'
p11312
ag10080
ag10753
ag11240
ag9017
ag8946
ag10100
aS'alff_img_mean_1'
p11313
aS'falff_img_mean_1'
p11314
aS'alff_smooth_mean_1'
p11315
aS'falff_smooth_mean_1'
p11316
aS'alff_to_standard_mean_1'
p11317
aS'falff_to_standard_mean_1'
p11318
aS'alff_to_standard_smooth_mean_1'
p11319
aS'falff_to_standard_smooth_mean_1'
p11320
ag10120
ag7927
aS'raw_reho_map_mean_1'
p11321
aS'reho_smooth_mean_1'
p11322
aS'reho_to_standard_mean_1'
p11323
aS'reho_to_standard_smooth_mean_1'
p11324
asg6680
g2091
sS'strategies'
p11325
(lp11326
(lp11327
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global1.motion1.quadratic1.gm0.compcor1.csf1.ncomponents_5_selector_pc10.linear1.wm0.global0.motion1.quadratic1.gm0.compcor1.csf1'
p11328
aS'_target_angle_deg_90'
p11329
aS'_threshold_0.2'
p11330
aasS'start_time'
p11331
F1506459844.05333
s.